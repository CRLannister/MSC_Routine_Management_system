{
  "version": 3,
  "file": "codeSign.js",
  "sourceRoot": "",
  "sources": [
    "../src/codeSign.ts"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "import { exec, getTempName, isEmptyOrSpaces, getCacheDirectory } from \"./util/util\"\nimport { deleteFile, outputFile, copy, rename } from \"fs-extra-p\"\nimport { download } from \"electron-builder-http\"\nimport * as path from \"path\"\nimport { executeFinally, all } from \"./util/promise\"\nimport BluebirdPromise from \"bluebird-lst-c\"\nimport { randomBytes } from \"crypto\"\nimport { TmpDir } from \"./util/tmp\"\nimport { homedir } from \"os\"\nimport { statOrNull } from \"./util/fs\"\nimport isCi from \"is-ci\"\n\nexport const appleCertificatePrefixes = [\"Developer ID Application:\", \"Developer ID Installer:\", \"3rd Party Mac Developer Application:\", \"3rd Party Mac Developer Installer:\"]\n\nexport type CertType = \"Developer ID Application\" | \"Developer ID Installer\" | \"3rd Party Mac Developer Application\" | \"3rd Party Mac Developer Installer\" | \"Mac Developer\"\n\nexport interface CodeSigningInfo {\n  keychainName?: string | null\n}\n\nexport async function downloadCertificate(urlOrBase64: string, tmpDir: TmpDir): Promise<string> {\n  let file: string | null = null\n  if ((urlOrBase64.length > 3 && urlOrBase64[1] === \":\") || urlOrBase64.startsWith(\"/\")) {\n    file = urlOrBase64\n  }\n  else if (urlOrBase64.startsWith(\"file://\")) {\n    file = urlOrBase64.substring(\"file://\".length)\n  }\n  else if (urlOrBase64.startsWith(\"~/\")) {\n    file = path.join(homedir(), urlOrBase64.substring(\"~/\".length))\n  }\n  else {\n    const tempFile = await tmpDir.getTempFile(\".p12\")\n    if (urlOrBase64.startsWith(\"https://\")) {\n      await download(urlOrBase64, tempFile)\n    }\n    else {\n      await outputFile(tempFile, new Buffer(urlOrBase64, \"base64\"))\n    }\n    return tempFile\n  }\n\n  const stat = await statOrNull(file)\n  if (stat == null) {\n    throw new Error(`${file} doesn't exist`)\n  }\n  else if (!stat.isFile()) {\n    throw new Error(`${file} not a file`)\n  }\n  else {\n    return file\n  }\n}\n\nlet bundledCertKeychainAdded: Promise<any> | null = null\n\n// \"Note that filename will not be searched to resolve the signing identity's certificate chain unless it is also on the user's keychain search list.\"\n// but \"security list-keychains\" doesn't support add - we should 1) get current list 2) set new list - it is very bad http://stackoverflow.com/questions/10538942/add-a-keychain-to-search-list\n// \"overly complicated and introduces a race condition.\"\n// https://github.com/electron-userland/electron-builder/issues/398\nasync function createCustomCertKeychain() {\n  // copy to temp and then atomic rename to final path\n  const tmpKeychainPath = path.join(getCacheDirectory(), getTempName(\"electron-builder-root-certs\"))\n  const keychainPath = path.join(getCacheDirectory(), \"electron-builder-root-certs.keychain\")\n  const results = await BluebirdPromise.all<string>([\n    exec(\"security\", [\"list-keychains\"]),\n    copy(path.join(__dirname, \"..\", \"certs\", \"root_certs.keychain\"), tmpKeychainPath)\n      .then(() => rename(tmpKeychainPath, keychainPath)),\n  ])\n  const list = results[0]\n    .split(\"\\n\")\n    .map(it => {\n      const r = it.trim()\n      return r.substring(1, r.length - 1)\n    })\n    .filter(it => it.length > 0)\n\n  if (!list.includes(keychainPath)) {\n    await exec(\"security\", [\"list-keychains\", \"-d\", \"user\", \"-s\", keychainPath].concat(list))\n  }\n}\n\nexport async function createKeychain(tmpDir: TmpDir, cscLink: string, cscKeyPassword: string, cscILink?: string | null, cscIKeyPassword?: string | null): Promise<CodeSigningInfo> {\n  if (bundledCertKeychainAdded == null) {\n    bundledCertKeychainAdded = createCustomCertKeychain()\n  }\n  await bundledCertKeychainAdded\n\n  const keychainName = await tmpDir.getTempFile(\".keychain\")\n\n  const certLinks = [cscLink]\n  if (cscILink != null) {\n    certLinks.push(cscILink)\n  }\n\n  const certPaths = new Array(certLinks.length)\n  const keychainPassword = randomBytes(8).toString(\"hex\")\n  return await executeFinally(BluebirdPromise.all([\n      BluebirdPromise.map(certLinks, (link, i) => downloadCertificate(link, tmpDir).then(it => certPaths[i] = it)),\n      BluebirdPromise.mapSeries([\n        [\"create-keychain\", \"-p\", keychainPassword, keychainName],\n        [\"unlock-keychain\", \"-p\", keychainPassword, keychainName],\n        [\"set-keychain-settings\", \"-t\", \"3600\", \"-u\", keychainName]\n      ], it => exec(\"security\", it))\n    ])\n    .then<CodeSigningInfo>(() => importCerts(keychainName, certPaths, <Array<string>>[cscKeyPassword, cscIKeyPassword].filter(it => it != null))),\n    () => all(certPaths.map((it, index) => certLinks[index].startsWith(\"https://\") ? deleteFile(it, true) : BluebirdPromise.resolve())))\n}\n\nasync function importCerts(keychainName: string, paths: Array<string>, keyPasswords: Array<string>): Promise<CodeSigningInfo> {\n  for (let i = 0; i < paths.length; i++) {\n    await exec(\"security\", [\"import\", paths[i], \"-k\", keychainName, \"-T\", \"/usr/bin/codesign\", \"-T\", \"/usr/bin/productbuild\", \"-P\", keyPasswords[i]])\n  }\n\n  return {\n    keychainName: keychainName,\n  }\n}\n\nexport function sign(path: string, name: string, keychain: string): Promise<any> {\n  const args = [\"--deep\", \"--force\", \"--sign\", name, path]\n  if (keychain != null) {\n    args.push(\"--keychain\", keychain)\n  }\n  return exec(\"codesign\", args)\n}\n\nexport let findIdentityRawResult: Promise<Array<string>> | null = null\n\nasync function getValidIdentities(keychain?: string | null): Promise<Array<string>> {\n  function addKeychain(args: Array<string>) {\n    if (keychain != null) {\n      args.push(keychain)\n    }\n    return args\n  }\n\n  let result = findIdentityRawResult\n  if (result == null || keychain != null) {\n    // https://github.com/electron-userland/electron-builder/issues/481\n    // https://github.com/electron-userland/electron-builder/issues/535\n    result = BluebirdPromise.all<Array<string>>([\n      exec(\"security\", addKeychain([\"find-identity\", \"-v\"]))\n        .then(it => it.trim().split(\"\\n\").filter(it => {\n          for (const prefix of appleCertificatePrefixes) {\n            if (it.includes(prefix)) {\n              return true\n            }\n          }\n          return false\n        })),\n      exec(\"security\", addKeychain([\"find-identity\", \"-v\", \"-p\", \"codesigning\"]))\n        .then(it => it.trim().split((\"\\n\"))),\n    ])\n      .then(it => {\n        const array = it[0].concat(it[1])\n          .filter(it => !it.includes(\"(Missing required extension)\") && !it.includes(\"valid identities found\") && !it.includes(\"iPhone \") && !it.includes(\"com.apple.idms.appleid.prd.\"))\n          // remove 1)\n          .map(it => it.substring(it.indexOf(\")\") + 1).trim())\n        return Array.from(new Set(array))\n      })\n\n    if (keychain == null) {\n      findIdentityRawResult = result\n    }\n  }\n  return result\n}\n\nasync function _findIdentity(type: CertType, qualifier?: string | null, keychain?: string | null): Promise<string | null> {\n  // https://github.com/electron-userland/electron-builder/issues/484\n  //noinspection SpellCheckingInspection\n  const lines = await getValidIdentities(keychain)\n  const namePrefix = `${type}:`\n  for (const line of lines) {\n    if (qualifier != null && !line.includes(qualifier)) {\n      continue\n    }\n\n    if (line.includes(namePrefix)) {\n      return line.substring(line.indexOf('\"') + 1, line.lastIndexOf('\"'))\n    }\n  }\n\n  if (type === \"Developer ID Application\") {\n    // find non-Apple certificate\n    // https://github.com/electron-userland/electron-builder/issues/458\n    l: for (const line of lines) {\n      if (qualifier != null && !line.includes(qualifier)) {\n        continue\n      }\n\n      if (line.includes(\"Mac Developer:\")) {\n        continue\n      }\n\n      for (const prefix of appleCertificatePrefixes) {\n        if (line.includes(prefix)) {\n          continue l\n        }\n      }\n\n      return line.substring(line.indexOf('\"') + 1, line.lastIndexOf('\"'))\n    }\n  }\n  return null\n}\n\nexport async function findIdentity(certType: CertType, qualifier?: string | null, keychain?: string | null): Promise<string | null> {\n  let identity = process.env.CSC_NAME || qualifier\n  if (isEmptyOrSpaces(identity)) {\n    if (keychain == null && !isCi && process.env.CSC_IDENTITY_AUTO_DISCOVERY === \"false\") {\n      return null\n    }\n    else {\n      return await _findIdentity(certType, null, keychain)\n    }\n  }\n  else {\n    identity = identity.trim()\n    for (const prefix of appleCertificatePrefixes) {\n      checkPrefix(identity, prefix)\n    }\n    const result = await _findIdentity(certType, identity, keychain)\n    if (result == null) {\n      throw new Error(`Identity name \"${identity}\" is specified, but no valid identity with this name in the keychain`)\n    }\n    return result\n  }\n}\n\nfunction checkPrefix(name: string, prefix: string) {\n  if (name.startsWith(prefix)) {\n    throw new Error(`Please remove prefix \"${prefix}\" from the specified name — appropriate certificate will be chosen automatically`)\n  }\n}"
  ]
}
