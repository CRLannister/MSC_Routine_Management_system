{
  "version": 3,
  "file": "yarn.js",
  "sourceRoot": "",
  "sources": [
    "../src/yarn.ts"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "import BluebirdPromise from \"bluebird-lst-c\"\nimport * as path from \"path\"\nimport { log } from \"./util/log\"\nimport { homedir } from \"os\"\nimport { spawn, asArray } from \"./util/util\"\nimport { BuildMetadata } from \"./metadata\"\nimport { exists } from \"./util/fs\"\n\nexport async function installOrRebuild(options: BuildMetadata, appDir: string, electronVersion: string, platform: string, arch: string, forceInstall: boolean = false) {\n  const args = asArray(options.npmArgs)\n  if (forceInstall || !(await exists(path.join(appDir, \"node_modules\")))) {\n    await installDependencies(appDir, electronVersion, platform, arch, args, !options.npmSkipBuildFromSource)\n  }\n  else {\n    await rebuild(appDir, electronVersion, platform, arch, args, !options.npmSkipBuildFromSource)\n  }\n}\n\nexport function getGypEnv(electronVersion: string, platform: string, arch: string, buildFromSource: boolean) {\n  const gypHome = path.join(homedir(), \".electron-gyp\")\n  return Object.assign({}, process.env, {\n    npm_config_disturl: \"https://atom.io/download/electron\",\n    npm_config_target: electronVersion,\n    npm_config_runtime: \"electron\",\n    npm_config_arch: arch,\n    npm_config_target_arch: arch,\n    npm_config_platform: platform,\n    npm_config_build_from_source: buildFromSource,\n    HOME: gypHome,\n    USERPROFILE: gypHome,\n  })\n}\n\nfunction installDependencies(appDir: string, electronVersion: string, platform: string = process.platform, arch: string = process.arch, additionalArgs: Array<string>, buildFromSource: boolean): Promise<any> {\n  log(`Installing app dependencies for arch ${arch} to ${appDir}`)\n  let execPath = process.env.npm_execpath || process.env.NPM_CLI_JS\n  const execArgs = [\"install\", \"--production\"]\n\n  const isYarn = isYarnPath(execPath)\n  if (!isYarn) {\n    if (process.env.NPM_NO_BIN_LINKS === \"true\") {\n      execArgs.push(\"--no-bin-links\")\n    }\n    execArgs.push(\"--cache-min\", \"999999999\")\n  }\n\n  if (execPath == null) {\n    execPath = getPackageToolPath()\n  }\n  else {\n    execArgs.unshift(execPath)\n    execPath = process.env.npm_node_execpath || process.env.NODE_EXE || \"node\"\n  }\n\n  execArgs.push(...additionalArgs)\n  return spawn(execPath, execArgs, {\n    cwd: appDir,\n    env: getGypEnv(electronVersion, platform, arch, buildFromSource),\n  })\n}\n\nlet readInstalled: any = null\nexport function dependencies(dir: string, extraneousOnly: boolean, result: Set<string>): Promise<Array<string>> {\n  if (readInstalled == null) {\n    readInstalled = BluebirdPromise.promisify(require(\"read-installed\"))\n  }\n  return readInstalled(dir)\n    .then((it: any) => flatDependencies(it, result, new Set(), extraneousOnly))\n}\n\nfunction flatDependencies(data: any, result: Set<string>, seen: Set<string>, extraneousOnly: boolean): void {\n  if (data.dependencies == null) {\n    return\n  }\n\n  const queue: Array<any> = [data.dependencies]\n  while (queue.length > 0) {\n    const deps = queue.pop()\n    for (const name of Object.keys(deps)) {\n      const dep = deps[name]\n      if (typeof dep !== \"object\" || (!extraneousOnly && dep.extraneous) || seen.has(dep)) {\n        continue\n      }\n\n      seen.add(dep)\n\n      if (extraneousOnly === dep.extraneous) {\n        result.add(dep.path)\n      }\n      else {\n        const childDeps = dep.dependencies\n        if (childDeps != null) {\n          queue.push(childDeps)\n        }\n      }\n    }\n  }\n}\n\nfunction getPackageToolPath() {\n  if (process.env.FORCE_YARN === \"true\") {\n    return process.platform === \"win32\" ? \"yarn.cmd\" : \"yarn\"\n  }\n  else {\n    return process.platform === \"win32\" ? \"npm.cmd\" : \"npm\"\n  }\n}\n\nfunction isYarnPath(execPath: string | null) {\n  return execPath != null && path.basename(execPath).startsWith(\"yarn\")\n}\n\nexport async function rebuild(appDir: string, electronVersion: string, platform: string = process.platform, arch: string = process.arch, additionalArgs: Array<string>, buildFromSource: boolean) {\n  const deps = new Set<string>()\n  await dependencies(appDir, false, deps)\n  const nativeDeps = await BluebirdPromise.filter(deps, it => exists(path.join(it, \"binding.gyp\")), {concurrency: 8})\n\n  if (nativeDeps.length === 0) {\n    log(`No native production dependencies`)\n    return\n  }\n\n  log(`Rebuilding native production dependencies for ${platform}:${arch}`)\n\n  let execPath = process.env.npm_execpath || process.env.NPM_CLI_JS\n  const isYarn = isYarnPath(execPath)\n  const execArgs: Array<string> = []\n  if (execPath == null) {\n    execPath = getPackageToolPath()\n  }\n  else {\n    execArgs.push(execPath)\n    execPath = process.env.npm_node_execpath || process.env.NODE_EXE || \"node\"\n  }\n\n  const env = getGypEnv(electronVersion, platform, arch, buildFromSource)\n  if (isYarn) {\n    execArgs.push(\"run\", \"install\", \"--\")\n    execArgs.push(...additionalArgs)\n    await BluebirdPromise.each(nativeDeps, it => spawn(execPath, execArgs, {cwd: it, env: env}))\n  }\n  else {\n    execArgs.push(\"rebuild\")\n    execArgs.push(...additionalArgs)\n    execArgs.push(...nativeDeps.map(it => path.basename(it)))\n    await spawn(execPath, execArgs, {cwd: appDir, env: env})\n  }\n}\n"
  ]
}
