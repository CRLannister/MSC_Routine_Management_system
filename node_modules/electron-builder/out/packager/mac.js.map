{
  "version": 3,
  "file": "mac.js",
  "sourceRoot": "",
  "sources": [
    "../../src/packager/mac.ts"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "import { rename, readFile, writeFile, unlink, utimes, copy } from \"fs-extra-p\"\nimport * as path from \"path\"\nimport { parse as parsePlist, build as buildPlist } from \"plist\"\nimport BluebirdPromise from \"bluebird-lst-c\"\nimport { use, asArray } from \"../util/util\"\nimport { normalizeExt, PlatformPackager } from \"../platformPackager\"\nimport { warn } from \"../util/log\"\nimport { unlinkIfExists, copyFile } from \"../util/fs\"\n\nfunction doRename (basePath: string, oldName: string, newName: string) {\n  return rename(path.join(basePath, oldName), path.join(basePath, newName))\n}\n\nfunction moveHelpers (frameworksPath: string, appName: string) {\n  return BluebirdPromise.map([\" Helper\", \" Helper EH\", \" Helper NP\"], suffix => {\n    const executableBasePath = path.join(frameworksPath, `Electron${suffix}.app`, \"Contents\", \"MacOS\")\n    return doRename(executableBasePath, `Electron${suffix}`, appName + suffix)\n      .then(() => doRename(frameworksPath, `Electron${suffix}.app`, `${appName}${suffix}.app`))\n  })\n}\n\nfunction filterCFBundleIdentifier(identifier: string) {\n  // Remove special characters and allow only alphanumeric (A-Z,a-z,0-9), hyphen (-), and period (.)\n  // Apple documentation: https://developer.apple.com/library/mac/documentation/General/Reference/InfoPlistKeyReference/Articles/CoreFoundationKeys.html#//apple_ref/doc/uid/20001431-102070\n  return identifier.replace(/ /g, \"-\").replace(/[^a-zA-Z0-9.-]/g, \"\")\n}\n\nexport async function createApp(packager: PlatformPackager<any>, appOutDir: string) {\n  const appInfo = packager.appInfo\n  const appFilename = appInfo.productFilename\n\n  const contentsPath = path.join(appOutDir, \"Electron.app\", \"Contents\")\n  const frameworksPath = path.join(contentsPath, \"Frameworks\")\n\n  const appPlistFilename = path.join(contentsPath, \"Info.plist\")\n  const helperPlistFilename = path.join(frameworksPath, \"Electron Helper.app\", \"Contents\", \"Info.plist\")\n  const helperEHPlistFilename = path.join(frameworksPath, \"Electron Helper EH.app\", \"Contents\", \"Info.plist\")\n  const helperNPPlistFilename = path.join(frameworksPath, \"Electron Helper NP.app\", \"Contents\", \"Info.plist\")\n\n  const buildMetadata = packager.config!\n  const fileContents: Array<string> = await BluebirdPromise.map([appPlistFilename, helperPlistFilename, helperEHPlistFilename, helperNPPlistFilename, (<any>buildMetadata)[\"extend-info\"]], it => it == null ? it : readFile(it, \"utf8\"))\n  const appPlist = parsePlist(fileContents[0])\n  const helperPlist = parsePlist(fileContents[1])\n  const helperEHPlist = parsePlist(fileContents[2])\n  const helperNPPlist = parsePlist(fileContents[3])\n\n  // If an extend-info file was supplied, copy its contents in first\n  if (fileContents[4] != null) {\n    Object.assign(appPlist, parsePlist(fileContents[4]))\n  }\n\n  const appBundleIdentifier = filterCFBundleIdentifier(appInfo.id)\n\n  const oldHelperBundleId = (<any>buildMetadata)[\"helper-bundle-id\"]\n  if (oldHelperBundleId != null) {\n    warn(\"build.helper-bundle-id is deprecated, please set as build.mac.helperBundleId\")\n  }\n  const helperBundleIdentifier = filterCFBundleIdentifier(packager.platformSpecificBuildOptions.helperBundleId || oldHelperBundleId || `${appBundleIdentifier}.helper`)\n\n  const icon = await packager.getIconPath()\n  const oldIcon = appPlist.CFBundleIconFile\n  if (icon != null) {\n    appPlist.CFBundleIconFile = `${appInfo.productFilename}.icns`\n  }\n\n  appPlist.CFBundleDisplayName = appInfo.productName\n  appPlist.CFBundleIdentifier = appBundleIdentifier\n  appPlist.CFBundleName = appInfo.productName\n  helperPlist.CFBundleDisplayName = `${appInfo.productName} Helper`\n  helperPlist.CFBundleIdentifier = helperBundleIdentifier\n  appPlist.CFBundleExecutable = appFilename\n  helperPlist.CFBundleName = appInfo.productName\n  helperPlist.CFBundleExecutable = `${appFilename} Helper`\n  helperEHPlist.CFBundleDisplayName = `${appFilename} Helper EH`\n  helperEHPlist.CFBundleIdentifier = `${helperBundleIdentifier}.EH`\n  helperEHPlist.CFBundleName = `${appInfo.productName} Helper EH`\n  helperEHPlist.CFBundleExecutable = `${appFilename} Helper EH`\n  helperNPPlist.CFBundleDisplayName = `${appInfo.productName} Helper NP`\n  helperNPPlist.CFBundleIdentifier = `${helperBundleIdentifier}.NP`\n  helperNPPlist.CFBundleName = `${appInfo.productName} Helper NP`\n  helperNPPlist.CFBundleExecutable = `${appFilename} Helper NP`\n\n  appPlist.CFBundleShortVersionString = appInfo.version\n  appPlist.CFBundleVersion = appInfo.buildVersion\n\n  const protocols = asArray(buildMetadata.protocols).concat(asArray(packager.platformSpecificBuildOptions.protocols))\n  if (protocols.length > 0) {\n    appPlist.CFBundleURLTypes = protocols.map(protocol => {\n      const schemes = asArray(protocol.schemes)\n      if (schemes.length === 0) {\n        throw new Error(`Protocol \"${protocol.name}\": must be at least one scheme specified`)\n      }\n      return {\n        CFBundleURLName: protocol.name,\n        CFBundleTypeRole: protocol.role || \"Editor\",\n        CFBundleURLSchemes: schemes.slice()\n      }\n    })\n  }\n\n  const resourcesPath = path.join(contentsPath, \"Resources\")\n\n  const fileAssociations = packager.getFileAssociations()\n  if (fileAssociations.length > 0) {\n    appPlist.CFBundleDocumentTypes = await BluebirdPromise.map(fileAssociations, async fileAssociation => {\n      const extensions = asArray(fileAssociation.ext).map(normalizeExt)\n      const customIcon = await packager.getResource(fileAssociation.icon, `${extensions[0]}.icns`)\n      let iconFile = appPlist.CFBundleIconFile\n      if (customIcon != null) {\n        iconFile = path.basename(customIcon)\n        await copyFile(customIcon, path.join(resourcesPath, iconFile))\n      }\n\n      const result = <any>{\n        CFBundleTypeExtensions: extensions,\n        CFBundleTypeName: fileAssociation.name,\n        CFBundleTypeRole: fileAssociation.role || \"Editor\",\n        CFBundleTypeIconFile: iconFile\n      }\n\n      if (fileAssociation.isPackage) {\n        result.LSTypeIsPackage = true\n      }\n      return result\n    })\n  }\n\n  use(packager.platformSpecificBuildOptions.category || (<any>buildMetadata).category, it => appPlist.LSApplicationCategoryType = it)\n  appPlist.NSHumanReadableCopyright = appInfo.copyright\n\n  const promises: Array<Promise<any | n>> = [\n    writeFile(appPlistFilename, buildPlist(appPlist)),\n    writeFile(helperPlistFilename, buildPlist(helperPlist)),\n    writeFile(helperEHPlistFilename, buildPlist(helperEHPlist)),\n    writeFile(helperNPPlistFilename, buildPlist(helperNPPlist)),\n    doRename(path.join(contentsPath, \"MacOS\"), \"Electron\", appPlist.CFBundleExecutable),\n    unlinkIfExists(path.join(appOutDir, \"LICENSE\")),\n    unlinkIfExists(path.join(appOutDir, \"LICENSES.chromium.html\")),\n  ]\n\n  if (icon != null) {\n    promises.push(unlink(path.join(resourcesPath, oldIcon)))\n    promises.push(copy(icon, path.join(resourcesPath, appPlist.CFBundleIconFile)))\n  }\n\n  await BluebirdPromise.all(promises)\n\n  await moveHelpers(frameworksPath, appFilename)\n  const appPath = path.join(appOutDir, `${appFilename}.app`)\n  await rename(path.dirname(contentsPath), appPath)\n  // https://github.com/electron-userland/electron-builder/issues/840\n  const now = Date.now() / 1000\n  await utimes(appPath, now, now)\n}"
  ]
}
