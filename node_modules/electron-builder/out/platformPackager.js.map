{
  "version": 3,
  "file": "platformPackager.js",
  "sourceRoot": "",
  "sources": [
    "../src/platformPackager.ts"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "import { AppMetadata, DevMetadata, Platform, PlatformSpecificBuildOptions, Arch, FileAssociation, BuildMetadata } from \"./metadata\"\nimport BluebirdPromise from \"bluebird-lst-c\"\nimport * as path from \"path\"\nimport { readdir, remove, rename } from \"fs-extra-p\"\nimport { use, isEmptyOrSpaces, asArray, debug, getDirectoriesConfig } from \"./util/util\"\nimport { Packager } from \"./packager\"\nimport { AsarOptions } from \"asar-electron-builder\"\nimport { Minimatch } from \"minimatch\"\nimport { checkFileInArchive, createAsarArchive } from \"./asarUtil\"\nimport { warn, log } from \"./util/log\"\nimport { AppInfo } from \"./appInfo\"\nimport { unpackElectron } from \"./packager/dirPackager\"\nimport { TmpDir } from \"./util/tmp\"\nimport { FileMatchOptions, FileMatcher, FilePattern, deprecatedUserIgnoreFilter } from \"./fileMatcher\"\nimport { BuildOptions } from \"./builder\"\nimport { PublishConfiguration, GithubOptions, BintrayOptions, GenericServerOptions } from \"electron-builder-http/out/publishOptions\"\nimport { getRepositoryInfo } from \"./repositoryInfo\"\nimport { dependencies } from \"./yarn\"\nimport { Target } from \"./targets/targetFactory\"\nimport { deepAssign } from \"./util/deepAssign\"\nimport { statOrNull, unlinkIfExists, copyDir } from \"./util/fs\"\nimport EventEmitter = NodeJS.EventEmitter\n\nexport interface PackagerOptions {\n  targets?: Map<Platform, Map<Arch, string[]>>\n\n  projectDir?: string | null\n\n  cscLink?: string | null\n  cscKeyPassword?: string | null\n\n  cscInstallerLink?: string | null\n  cscInstallerKeyPassword?: string | null\n\n  platformPackagerFactory?: ((packager: Packager, platform: Platform, cleanupTasks: Array<() => Promise<any>>) => PlatformPackager<any>) | null\n\n  /**\n   * The same as [development package.json](https://github.com/electron-userland/electron-builder/wiki/Options#development-packagejson).\n   *\n   * Development `package.json` will be still read, but options specified in this object will override.\n   */\n  readonly devMetadata?: DevMetadata\n\n  /*\n   See [.build](#BuildMetadata).\n   */\n  readonly config?: BuildMetadata\n\n  /**\n   * The same as [application package.json](https://github.com/electron-userland/electron-builder/wiki/Options#AppMetadata).\n   *\n   * Application `package.json` will be still read, but options specified in this object will override.\n   */\n  readonly appMetadata?: AppMetadata\n\n  readonly effectiveOptionComputed?: (options: any) => Promise<boolean>\n\n  readonly extraMetadata?: any\n\n  readonly prepackaged?: string\n}\n\nexport interface BuildInfo {\n  options: BuildOptions\n\n  metadata: AppMetadata\n\n  devMetadata: DevMetadata\n\n  config: BuildMetadata\n\n  projectDir: string\n  appDir: string\n  devPackageFile: string\n\n  electronVersion: string\n\n  eventEmitter: EventEmitter\n\n  isTwoPackageJsonProjectLayoutUsed: boolean\n\n  // computed final effective appId\n  appInfo: AppInfo\n\n  readonly tempDirManager: TmpDir\n}\n\nexport abstract class PlatformPackager<DC extends PlatformSpecificBuildOptions> {\n  readonly options: PackagerOptions\n\n  readonly projectDir: string\n  readonly buildResourcesDir: string\n\n  readonly config: BuildMetadata\n\n  readonly platformSpecificBuildOptions: DC\n\n  readonly resourceList: Promise<Array<string>>\n\n  abstract get platform(): Platform\n\n  readonly appInfo: AppInfo\n\n  constructor(readonly info: BuildInfo) {\n    this.config = info.config\n    this.platformSpecificBuildOptions = this.normalizePlatformSpecificBuildOptions((<any>this.config)[this.platform.buildConfigurationKey])\n    this.appInfo = this.prepareAppInfo(info.appInfo)\n    this.options = info.options\n    this.projectDir = info.projectDir\n\n    this.buildResourcesDir = path.resolve(this.projectDir, this.relativeBuildResourcesDirname)\n\n    this.resourceList = readdir(this.buildResourcesDir)\n      .catch(e => {\n        if (e.code !== \"ENOENT\") {\n          throw e\n        }\n        return []\n      })\n  }\n\n  abstract get defaultTarget(): Array<string>\n\n  protected prepareAppInfo(appInfo: AppInfo) {\n    return appInfo\n  }\n\n  normalizePlatformSpecificBuildOptions(options: DC | n): DC {\n    return options == null ? Object.create(null) : options\n  }\n\n  abstract createTargets(targets: Array<string>, mapper: (name: string, factory: (outDir: string) => Target) => void, cleanupTasks: Array<() => Promise<any>>): void\n\n  protected getCscPassword(): string {\n    const password = this.doGetCscPassword()\n    if (isEmptyOrSpaces(password)) {\n      log(\"CSC_KEY_PASSWORD is not defined, empty password will be used\")\n      return \"\"\n    }\n    else {\n      return password.trim()\n    }\n  }\n\n  protected doGetCscPassword() {\n    return this.options.cscKeyPassword || process.env.CSC_KEY_PASSWORD\n  }\n\n  get relativeBuildResourcesDirname() {\n    return use(getDirectoriesConfig(this.info.devMetadata), it => it!.buildResources) || \"build\"\n  }\n\n  protected computeAppOutDir(outDir: string, arch: Arch): string {\n    return path.join(outDir, `${this.platform.buildConfigurationKey}${getArchSuffix(arch)}${this.platform === Platform.MAC ? \"\" : \"-unpacked\"}`)\n  }\n\n  dispatchArtifactCreated(file: string, artifactName?: string) {\n    this.info.eventEmitter.emit(\"artifactCreated\", {\n      file: file,\n      artifactName: artifactName,\n      packager: this,\n    })\n  }\n\n  async pack(outDir: string, arch: Arch, targets: Array<Target>, postAsyncTasks: Array<Promise<any>>): Promise<any> {\n    const appOutDir = this.options.prepackaged || this.computeAppOutDir(outDir, arch)\n    await this.doPack(outDir, appOutDir, this.platform.nodeName, arch, this.platformSpecificBuildOptions)\n    this.packageInDistributableFormat(appOutDir, arch, targets, postAsyncTasks)\n  }\n\n  protected packageInDistributableFormat(appOutDir: string, arch: Arch, targets: Array<Target>, postAsyncTasks: Array<Promise<any>>): void {\n    postAsyncTasks.push(BluebirdPromise.map(targets, it => it.isAsyncSupported ? it.build(appOutDir, arch) : null)\n      .then(() => BluebirdPromise.each(targets, it => it.isAsyncSupported ? null : it.build(appOutDir, arch))))\n  }\n\n  private getExtraFileMatchers(isResources: boolean, appOutDir: string, fileMatchOptions: FileMatchOptions, customBuildOptions: DC): Array<FileMatcher> | null {\n    const base = isResources ? this.getResourcesDir(appOutDir) : (this.platform === Platform.MAC ? path.join(appOutDir, `${this.appInfo.productFilename}.app`, \"Contents\") : appOutDir)\n    return this.getFileMatchers(isResources ? \"extraResources\" : \"extraFiles\", this.projectDir, base, true, fileMatchOptions, customBuildOptions)\n  }\n\n  protected async doPack(outDir: string, appOutDir: string, platformName: string, arch: Arch, platformSpecificBuildOptions: DC) {\n    if (this.info.options.prepackaged != null) {\n      return\n    }\n\n    const asarOptions = this.computeAsarOptions(platformSpecificBuildOptions)\n    const fileMatchOptions: FileMatchOptions = {\n      arch: Arch[arch],\n      os: this.platform.buildConfigurationKey\n    }\n\n    const extraResourceMatchers = this.getExtraFileMatchers(true, appOutDir, fileMatchOptions, platformSpecificBuildOptions)\n    const extraFileMatchers = this.getExtraFileMatchers(false, appOutDir, fileMatchOptions, platformSpecificBuildOptions)\n\n    const resourcesPath = this.platform === Platform.MAC ? path.join(appOutDir, \"Electron.app\", \"Contents\", \"Resources\") : path.join(appOutDir, \"resources\")\n\n    log(`Packaging for ${platformName} ${Arch[arch]} using electron ${this.info.electronVersion} to ${path.relative(this.projectDir, appOutDir)}`)\n\n    const appDir = this.info.appDir\n    const ignoreFiles = new Set([path.resolve(appDir, outDir), path.resolve(appDir, this.buildResourcesDir)])\n    // prune dev or not listed dependencies\n    await BluebirdPromise.all([\n      dependencies(appDir, true, ignoreFiles),\n      unpackElectron(this, appOutDir, platformName, Arch[arch], this.info.electronVersion),\n    ])\n\n    if (debug.enabled) {\n      const nodeModulesDir = path.join(appDir, \"node_modules\")\n      debug(`Dev or extraneous dependencies: ${Array.from(ignoreFiles).slice(2).map(it => path.relative(nodeModulesDir, it)).join(\", \")}`)\n    }\n\n    const patterns = this.getFileMatchers(\"files\", appDir, path.join(resourcesPath, \"app\"), false, fileMatchOptions, platformSpecificBuildOptions)\n    const defaultMatcher = patterns == null ? new FileMatcher(appDir, path.join(resourcesPath, \"app\"), fileMatchOptions) : patterns[0]\n    if (defaultMatcher.isEmpty() || defaultMatcher.containsOnlyIgnore()) {\n      defaultMatcher.addAllPattern()\n    }\n    else {\n      defaultMatcher.addPattern(\"package.json\")\n    }\n    defaultMatcher.addPattern(\"!**/node_modules/*/{CHANGELOG.md,ChangeLog,changelog.md,README.md,README,readme.md,readme,test,__tests__,tests,powered-test,example,examples,*.d.ts}\")\n    defaultMatcher.addPattern(\"!**/node_modules/.bin\")\n    defaultMatcher.addPattern(\"!**/*.{o,hprof,orig,pyc,pyo,rbc,swp}\")\n    defaultMatcher.addPattern(\"!**/._*\")\n    defaultMatcher.addPattern(\"!*.iml\")\n    //noinspection SpellCheckingInspection\n    defaultMatcher.addPattern(\"!**/{.git,.hg,.svn,CVS,RCS,SCCS,\" +\n      \"__pycache__,.DS_Store,thumbs.db,.gitignore,.gitattributes,\" +\n      \".editorconfig,.flowconfig,.jshintrc,\" +\n      \".yarn-integrity,.yarn-metadata.json,yarn-error.log,yarn.lock,npm-debug.log,\" +\n      \".idea,\" +\n      \"appveyor.yml,.travis.yml,circle.yml,\" +\n      \".nyc_output}\")\n\n    let rawFilter: any = null\n    const deprecatedIgnore = (<any>this.config).ignore\n    if (deprecatedIgnore != null) {\n      if (typeof deprecatedIgnore === \"function\") {\n        warn(`\"ignore\" is specified as function, may be new \"files\" option will be suit your needs? Please see https://github.com/electron-userland/electron-builder/wiki/Options#BuildMetadata-files`)\n      }\n      else {\n        warn(`\"ignore\" is deprecated, please use \"files\", see https://github.com/electron-userland/electron-builder/wiki/Options#BuildMetadata-files`)\n      }\n      rawFilter = deprecatedUserIgnoreFilter(deprecatedIgnore, appDir)\n    }\n\n    let excludePatterns: Array<Minimatch> = []\n    if (extraResourceMatchers != null) {\n      for (let i = 0; i < extraResourceMatchers.length; i++) {\n        const patterns = extraResourceMatchers[i].getParsedPatterns(this.info.projectDir)\n        excludePatterns = excludePatterns.concat(patterns)\n      }\n    }\n    if (extraFileMatchers != null) {\n      for (let i = 0; i < extraFileMatchers.length; i++) {\n        const patterns = extraFileMatchers[i].getParsedPatterns(this.info.projectDir)\n        excludePatterns = excludePatterns.concat(patterns)\n      }\n    }\n\n    const filter = defaultMatcher.createFilter(ignoreFiles, rawFilter, excludePatterns.length ? excludePatterns : null)\n    let promise\n    if (asarOptions == null) {\n      promise = copyDir(appDir, path.join(resourcesPath, \"app\"), filter)\n    }\n    else {\n      const unpackPattern = this.getFileMatchers(\"asarUnpack\", appDir, path.join(resourcesPath, \"app\"), false, fileMatchOptions, platformSpecificBuildOptions)\n      const fileMatcher = unpackPattern == null ? null : unpackPattern[0]\n      promise = createAsarArchive(appDir, resourcesPath, asarOptions, filter, fileMatcher == null ? null : fileMatcher.createFilter())\n    }\n\n    //noinspection ES6MissingAwait\n    const promises = [promise, unlinkIfExists(path.join(resourcesPath, \"default_app.asar\")), unlinkIfExists(path.join(appOutDir, \"version\")), this.postInitApp(appOutDir)]\n    if (this.platform !== Platform.MAC) {\n      promises.push(rename(path.join(appOutDir, \"LICENSE\"), path.join(appOutDir, \"LICENSE.electron.txt\")).catch(() => {/* ignore */}))\n    }\n    if (this.info.electronVersion != null && this.info.electronVersion[0] === \"0\") {\n      // electron release >= 0.37.4 - the default_app/ folder is a default_app.asar file\n      promises.push(remove(path.join(resourcesPath, \"default_app\")))\n    }\n\n    await BluebirdPromise.all(promises)\n\n    if (platformName === \"darwin\" || platformName === \"mas\") {\n      await (<any>require(\"./packager/mac\")).createApp(this, appOutDir)\n    }\n\n    await this.doCopyExtraFiles(extraResourceMatchers)\n    await this.doCopyExtraFiles(extraFileMatchers)\n\n    const afterPack = this.config.afterPack\n    if (afterPack != null) {\n      await afterPack({\n        appOutDir: appOutDir,\n        options: this.config,\n        packager: this,\n      })\n    }\n\n    await this.sanityCheckPackage(appOutDir, asarOptions != null)\n  }\n\n  protected async postInitApp(executableFile: string): Promise<any> {\n  }\n\n  async getIconPath(): Promise<string | null> {\n    return null\n  }\n\n  private computeAsarOptions(customBuildOptions: DC): AsarOptions | null {\n    function errorMessage(name: string) {\n      return `${name} is deprecated is deprecated and not supported — please use build.asarUnpack`\n    }\n\n    const buildMetadata = <any>this.config\n    if (buildMetadata[\"asar-unpack\"] != null) {\n      throw new Error(errorMessage(\"asar-unpack\"))\n    }\n    if (buildMetadata[\"asar-unpack-dir\"] != null) {\n      throw new Error(errorMessage(\"asar-unpack-dir\"))\n    }\n\n    const platformSpecific = customBuildOptions.asar\n    const result = platformSpecific == null ? this.config.asar : platformSpecific\n    if (result === false) {\n      warn(\"Packaging using asar archive is disabled — it is strongly not recommended.\\n\" +\n        \"Please enable asar and use asarUnpack to unpack files that must be externally available.\")\n      return null\n    }\n\n    const defaultOptions = {\n      extraMetadata: this.options.extraMetadata,\n    }\n\n    if (result == null || result === true) {\n      return defaultOptions\n    }\n\n    for (const name of [\"unpackDir\", \"unpack\"]) {\n      if ((<any>result)[name] != null) {\n        throw new Error(errorMessage(`asar.${name}`))\n      }\n    }\n    return deepAssign({}, result, defaultOptions)\n  }\n\n  private doCopyExtraFiles(patterns: Array<FileMatcher> | null): Promise<any> {\n    if (patterns == null || patterns.length === 0) {\n      return BluebirdPromise.resolve()\n    }\n\n    return BluebirdPromise.map(patterns, pattern => {\n      if (pattern.isEmpty() || pattern.containsOnlyIgnore()) {\n        pattern.addAllPattern()\n      }\n      return copyDir(pattern.from, pattern.to, pattern.createFilter())\n    })\n  }\n\n  private getFileMatchers(name: \"files\" | \"extraFiles\" | \"extraResources\" | \"asarUnpack\", defaultSrc: string, defaultDest: string, allowAdvancedMatching: boolean, fileMatchOptions: FileMatchOptions, customBuildOptions: DC): Array<FileMatcher> | null {\n    const globalPatterns: Array<string | FilePattern> | string | n | FilePattern = (<any>this.config)[name]\n    const platformSpecificPatterns: Array<string | FilePattern> | string | n = (<any>customBuildOptions)[name]\n\n    const defaultMatcher = new FileMatcher(defaultSrc, defaultDest, fileMatchOptions)\n    const fileMatchers: Array<FileMatcher> = []\n\n    function addPatterns(patterns: Array<string | FilePattern> | string | n | FilePattern) {\n      if (patterns == null) {\n        return\n      }\n      else if (!Array.isArray(patterns)) {\n        if (typeof patterns === \"string\") {\n          defaultMatcher.addPattern(patterns)\n          return\n        }\n        patterns = [patterns]\n      }\n\n      for (let i = 0; i < patterns.length; i++) {\n        const pattern = patterns[i]\n        if (typeof pattern === \"string\") {\n          defaultMatcher.addPattern(pattern)\n        }\n        else if (allowAdvancedMatching) {\n          const from = pattern.from ? (path.isAbsolute(pattern.from) ? pattern.from : path.join(defaultSrc, pattern.from)) : defaultSrc\n          const to = pattern.to ? (path.isAbsolute(pattern.to) ? pattern.to : path.join(defaultDest, pattern.to)) : defaultDest\n          fileMatchers.push(new FileMatcher(from, to, fileMatchOptions, pattern.filter))\n        }\n        else {\n          throw new Error(`Advanced file copying not supported for \"${name}\"`)\n        }\n      }\n    }\n\n    addPatterns(globalPatterns)\n    addPatterns(platformSpecificPatterns)\n\n    if (!defaultMatcher.isEmpty()) {\n      // Default matcher should be first in the array\n      fileMatchers.unshift(defaultMatcher)\n    }\n\n    return fileMatchers.length === 0 ? null : fileMatchers\n  }\n\n  private getResourcesDir(appOutDir: string): string {\n    return this.platform === Platform.MAC ? this.getOSXResourcesDir(appOutDir) : path.join(appOutDir, \"resources\")\n  }\n\n  private getOSXResourcesDir(appOutDir: string): string {\n    return path.join(appOutDir, `${this.appInfo.productFilename}.app`, \"Contents\", \"Resources\")\n  }\n\n  private async checkFileInPackage(resourcesDir: string, file: string, messagePrefix: string, isAsar: boolean) {\n    const relativeFile = path.relative(this.info.appDir, path.resolve(this.info.appDir, file))\n    if (isAsar) {\n      await checkFileInArchive(path.join(resourcesDir, \"app.asar\"), relativeFile, messagePrefix)\n      return\n    }\n\n    const pathParsed = path.parse(file)\n    // Even when packaging to asar is disabled, it does not imply that the main file can not be inside an .asar archive.\n    // This may occur when the packaging is done manually before processing with electron-builder.\n    if (pathParsed.dir.includes(\".asar\")) {\n      // The path needs to be split to the part with an asar archive which acts like a directory and the part with\n      // the path to main file itself. (e.g. path/arch.asar/dir/index.js -> path/arch.asar, dir/index.js)\n      const pathSplit: Array<string> = pathParsed.dir.split(path.sep)\n      let partWithAsarIndex = 0\n      pathSplit.some((pathPart: string, index: number) => {\n        partWithAsarIndex = index\n        return pathPart.endsWith(\".asar\")\n      })\n      const asarPath = path.join.apply(path, pathSplit.slice(0, partWithAsarIndex + 1))\n      let mainPath = pathSplit.length > (partWithAsarIndex + 1) ? path.join.apply(pathSplit.slice(partWithAsarIndex + 1)) : \"\"\n      mainPath += path.join(mainPath, pathParsed.base)\n      await checkFileInArchive(path.join(resourcesDir, \"app\", asarPath), mainPath, messagePrefix)\n    }\n    else {\n      const outStat = await statOrNull(path.join(resourcesDir, \"app\", relativeFile))\n      if (outStat == null) {\n        throw new Error(`${messagePrefix} \"${relativeFile}\" does not exist. Seems like a wrong configuration.`)\n      }\n      else if (!outStat.isFile()) {\n        throw new Error(`${messagePrefix} \"${relativeFile}\" is not a file. Seems like a wrong configuration.`)\n      }\n    }\n  }\n\n  private async sanityCheckPackage(appOutDir: string, isAsar: boolean): Promise<any> {\n    const outStat = await statOrNull(appOutDir)\n    if (outStat == null) {\n      throw new Error(`Output directory \"${appOutDir}\" does not exist. Seems like a wrong configuration.`)\n    }\n    else if (!outStat.isDirectory()) {\n      throw new Error(`Output directory \"${appOutDir}\" is not a directory. Seems like a wrong configuration.`)\n    }\n\n    const resourcesDir = this.getResourcesDir(appOutDir)\n    await this.checkFileInPackage(resourcesDir, this.appInfo.metadata.main || \"index.js\", \"Application entry file\", isAsar)\n    await this.checkFileInPackage(resourcesDir, \"package.json\", \"Application\", isAsar)\n  }\n\n  generateName(ext: string | null, arch: Arch, deployment: boolean, classifier: string | null = null): string {\n    let c: string | null = null\n    if (arch === Arch.x64) {\n      if (ext === \"AppImage\") {\n        c = \"x86_64\"\n      }\n      else if (ext === \"deb\") {\n        c = \"amd64\"\n      }\n    }\n    else if (arch === Arch.ia32 && ext === \"deb\") {\n      c = \"i386\"\n    }\n    else {\n      c = Arch[arch]\n    }\n\n    if (c == null) {\n      c = classifier\n    }\n    else if (classifier != null) {\n      c += `-${classifier}`\n    }\n    return this.generateName2(ext, c, deployment)\n  }\n\n  generateName2(ext: string | null, classifier: string | n, deployment: boolean): string {\n    const dotExt = ext == null ? \"\" : `.${ext}`\n    const separator = ext === \"deb\" ? \"_\" : \"-\"\n    return `${deployment ? this.appInfo.name : this.appInfo.productFilename}${separator}${this.appInfo.version}${classifier == null ? \"\" : `${separator}${classifier}`}${dotExt}`\n  }\n\n  async getDefaultIcon(ext: string) {\n    const resourceList = await this.resourceList\n    const name = `icon.${ext}`\n    if (resourceList.includes(name)) {\n      return path.join(this.buildResourcesDir, name)\n    }\n    else {\n      warn(\"Application icon is not set, default Electron icon will be used\")\n      return null\n    }\n  }\n\n  getTempFile(suffix: string): Promise<string> {\n    return this.info.tempDirManager.getTempFile(suffix)\n  }\n\n  getFileAssociations(): Array<FileAssociation> {\n    return asArray(this.config.fileAssociations).concat(asArray(this.platformSpecificBuildOptions.fileAssociations))\n  }\n\n  async getResource(custom: string | n, ...names: Array<string>): Promise<string | null> {\n    if (custom === undefined) {\n      const resourceList = await this.resourceList\n      for (const name of names) {\n        if (resourceList.includes(name)) {\n          return path.join(this.buildResourcesDir, name)\n        }\n      }\n    }\n    else if (!isEmptyOrSpaces(custom)) {\n      return path.resolve(this.projectDir, custom)\n    }\n    return null\n  }\n}\n\nexport function getArchSuffix(arch: Arch): string {\n  return arch === Arch.x64 ? \"\" : `-${Arch[arch]}`\n}\n\nexport interface ArtifactCreated {\n  readonly packager: PlatformPackager<any>\n\n  readonly file?: string\n  readonly data?: Buffer\n\n  readonly artifactName?: string\n\n  readonly publishConfig?: PublishConfiguration\n}\n\n// fpm bug - rpm build --description is not escaped, well... decided to replace quite to smart quote\n// http://leancrew.com/all-this/2010/11/smart-quotes-in-javascript/\nexport function smarten(s: string): string {\n  // opening singles\n  s = s.replace(/(^|[-\\u2014\\s(\\[\"])'/g, \"$1\\u2018\")\n  // closing singles & apostrophes\n  s = s.replace(/'/g, \"\\u2019\")\n  // opening doubles\n  s = s.replace(/(^|[-\\u2014/\\[(\\u2018\\s])\"/g, \"$1\\u201c\")\n  // closing doubles\n  s = s.replace(/\"/g, \"\\u201d\")\n  return s\n}\n\n// remove leading dot\nexport function normalizeExt(ext: string) {\n  return ext.startsWith(\".\") ? ext.substring(1) : ext\n}\n\nexport function getPublishConfigs(packager: PlatformPackager<any>, platformSpecificBuildOptions: PlatformSpecificBuildOptions): Array<PublishConfiguration> | null {\n  // check build.nsis (target)\n  let publishers = platformSpecificBuildOptions.publish\n  // if explicitly set to null - do not publish\n  if (publishers === null) {\n    return null\n  }\n\n  // check build.win (platform)\n  if (packager.platformSpecificBuildOptions !== platformSpecificBuildOptions) {\n    publishers = packager.platformSpecificBuildOptions.publish\n    if (publishers === null) {\n      return null\n    }\n  }\n\n  if (publishers == null) {\n    publishers = packager.config.publish\n    if (publishers === null) {\n      return null\n    }\n\n    if (publishers == null && !isEmptyOrSpaces(process.env.GH_TOKEN)) {\n      publishers = [{provider: \"github\"}]\n    }\n    // if both tokens are set — still publish to github (because default publisher is github)\n    if (publishers == null && !isEmptyOrSpaces(process.env.BT_TOKEN)) {\n      publishers = [{provider: \"bintray\"}]\n    }\n  }\n\n  return asArray<PublishConfiguration | string>(publishers)\n    .map(it => typeof it === \"string\" ? {provider: <any>it} : it)\n}\n\nexport async function getResolvedPublishConfig(packager: BuildInfo, publishConfig: PublishConfiguration | GithubOptions | BintrayOptions | GenericServerOptions, errorIfCannot: boolean): Promise<PublishConfiguration | null> {\n  if (publishConfig.provider === \"generic\") {\n    if ((<GenericServerOptions>publishConfig).url == null) {\n      throw new Error(`Please specify \"url\" for \"generic\" update server`)\n    }\n    return publishConfig\n  }\n\n  async function getInfo() {\n    const info = await getRepositoryInfo(packager.metadata, packager.devMetadata)\n    if (info != null) {\n      return info\n    }\n\n    if (!errorIfCannot) {\n      return null\n    }\n\n    warn(\"Cannot detect repository by .git/config\")\n    throw new Error(`Please specify \"repository\" in the dev package.json ('${packager.devPackageFile}').\\nPlease see https://github.com/electron-userland/electron-builder/wiki/Publishing-Artifacts`)\n  }\n\n  let owner = publishConfig.owner\n  let project = publishConfig.provider === \"github\" ? (<GithubOptions>publishConfig).repo : (<BintrayOptions>publishConfig).package\n  if (!owner || !project) {\n    const info = await getInfo()\n    if (info == null) {\n      return null\n    }\n\n    if (!owner) {\n      owner = info.user\n    }\n    if (!project) {\n      project = info.project\n    }\n  }\n\n  const copy: PublishConfiguration = Object.assign({}, publishConfig)\n  if (copy.owner == null) {\n    copy.owner = owner\n  }\n\n  if (publishConfig.provider === \"github\") {\n    const options = <GithubOptions>copy\n    if (options.repo == null) {\n      options.repo = project\n    }\n    return options\n  }\n  else if (publishConfig.provider === \"bintray\") {\n    const options = <BintrayOptions>copy\n    if (options.package == null) {\n      options.package = project\n    }\n    return options\n  }\n  else {\n    return null\n  }\n}\n\nexport function toDebArch(arch: Arch) {\n  return arch === Arch.ia32 ? \"i386\" : \"amd64\"\n}"
  ]
}
