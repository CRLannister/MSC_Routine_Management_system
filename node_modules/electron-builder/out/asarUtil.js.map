{
  "version": 3,
  "file": "asarUtil.js",
  "sourceRoot": "",
  "sources": [
    "../src/asarUtil.ts"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "import { AsarFileInfo, listPackage, statFile, AsarOptions } from \"asar-electron-builder\"\nimport { debug } from \"./util/util\"\nimport { readFile, Stats, createWriteStream, ensureDir, createReadStream, readJson, writeFile, realpath } from \"fs-extra-p\"\nimport BluebirdPromise from \"bluebird-lst-c\"\nimport * as path from \"path\"\nimport { log } from \"./util/log\"\nimport { deepAssign } from \"./util/deepAssign\"\nimport { walk, statOrNull, CONCURRENCY, MAX_FILE_REQUESTS, Filter, FileCopier } from \"./util/fs\"\n\nconst isBinaryFile: any = BluebirdPromise.promisify(require(\"isbinaryfile\"))\nconst pickle = require (\"chromium-pickle-js\")\nconst Filesystem = require(\"asar-electron-builder/lib/filesystem\")\nconst UINT64 = require(\"cuint\").UINT64\n\nconst NODE_MODULES_PATTERN = path.sep + \"node_modules\" + path.sep\n\nexport async function createAsarArchive(src: string, resourcesPath: string, options: AsarOptions, filter: Filter, unpackPattern: Filter | null): Promise<any> {\n  // sort files to minimize file change (i.e. asar file is not changed dramatically on small change)\n  await new AsarPackager(src, resourcesPath, options, unpackPattern).pack(filter)\n}\n\nfunction addValue(map: Map<string, Array<string>>, key: string, value: string) {\n  let list = map.get(key)\n  if (list == null) {\n    list = [value]\n    map.set(key, list)\n  }\n  else {\n    list.push(value)\n  }\n}\n\ninterface UnpackedFileTask {\n  stats: Stats\n  src?: string\n  data?: string\n  destination: string\n}\n\nfunction writeUnpackedFiles(filesToUnpack: Array<UnpackedFileTask>, fileCopier: FileCopier): Promise<any> {\n  return BluebirdPromise.map(filesToUnpack, it => {\n    if (it.data == null) {\n      return fileCopier.copy(it.src!, it.destination, it.stats)\n    }\n    else {\n      return writeFile(it.destination, it.data)\n    }\n  })\n}\n\nclass AsarPackager {\n  private readonly toPack: Array<string> = []\n  private readonly fs = new Filesystem(this.src)\n  private readonly changedFiles = new Map<string, string>()\n  private readonly outFile: string\n\n  private srcRealPath: Promise<string>\n\n  constructor(private readonly src: string, destination: string, private readonly options: AsarOptions, private readonly unpackPattern: Filter | null) {\n    this.outFile = path.join(destination, \"app.asar\")\n  }\n\n  async pack(filter: Filter) {\n    const metadata = new Map<string, Stats>()\n    const files = await walk(this.src, filter, (it, stat) => metadata.set(it, stat))\n    await this.createPackageFromFiles(this.options.ordering == null ? files : await this.order(files), metadata)\n    await this.writeAsarFile()\n  }\n\n  getSrcRealPath(): Promise<string> {\n    if (this.srcRealPath == null) {\n      this.srcRealPath = realpath(this.src)\n    }\n    return this.srcRealPath\n  }\n\n  async detectUnpackedDirs(files: Array<string>, metadata: Map<string, Stats>, autoUnpackDirs: Set<string>, unpackedDest: string, fileIndexToModulePackageData: Map<number, BluebirdPromise<string>>) {\n    const packageJsonStringLength = \"package.json\".length\n    const dirToCreate = new Map<string, Array<string>>()\n\n    /* tslint:disable:rule1 prefer-const */\n    for (let i = 0, n = files.length; i < n; i++) {\n      const file = files[i]\n      const index = file.lastIndexOf(NODE_MODULES_PATTERN)\n      if (index < 0) {\n        continue\n      }\n\n      const nextSlashIndex = file.indexOf(path.sep, index + NODE_MODULES_PATTERN.length + 1)\n      if (nextSlashIndex < 0) {\n        continue\n      }\n\n      if (!metadata.get(file)!.isFile()) {\n        continue\n      }\n\n      const nodeModuleDir = file.substring(0, nextSlashIndex)\n\n      if (file.length === (nodeModuleDir.length + 1 + packageJsonStringLength) && file.endsWith(\"package.json\")) {\n        fileIndexToModulePackageData.set(i, <BluebirdPromise<string>>readJson(file).then(it => cleanupPackageJson(it)))\n      }\n\n      if (autoUnpackDirs.has(nodeModuleDir)) {\n        const fileParent = path.dirname(file)\n        if (fileParent !== nodeModuleDir && !autoUnpackDirs.has(fileParent)) {\n          autoUnpackDirs.add(fileParent)\n          addValue(dirToCreate, path.relative(this.src, nodeModuleDir), path.relative(nodeModuleDir, fileParent))\n        }\n        continue\n      }\n\n      const ext = path.extname(file)\n      let shouldUnpack = false\n      if (ext === \".dll\" || ext === \".exe\") {\n        shouldUnpack = true\n      }\n      else if (ext === \"\") {\n        shouldUnpack = await isBinaryFile(file)\n      }\n\n      if (!shouldUnpack) {\n        continue\n      }\n\n      debug(`${path.relative(this.src, nodeModuleDir)} is not packed into asar archive - contains executable code`)\n\n      let fileParent = path.dirname(file)\n\n      // create parent dir to be able to copy file later without directory existence check\n      addValue(dirToCreate, path.relative(this.src, nodeModuleDir), path.relative(nodeModuleDir, fileParent))\n\n      while (fileParent !== nodeModuleDir) {\n        autoUnpackDirs.add(fileParent)\n        fileParent = path.dirname(fileParent)\n      }\n      autoUnpackDirs.add(nodeModuleDir)\n    }\n\n    if (fileIndexToModulePackageData.size > 0) {\n      await BluebirdPromise.all(<any>fileIndexToModulePackageData.values())\n    }\n\n    if (dirToCreate.size > 0) {\n      // child directories should be not created asynchronously - parent directories should be created first\n      await BluebirdPromise.map(dirToCreate.keys(), async (it) => {\n        const base = path.join(unpackedDest, it)\n        await ensureDir(base)\n        await BluebirdPromise.each(dirToCreate.get(it)!, it => ensureDir(path.join(base, it)))\n      }, CONCURRENCY)\n    }\n  }\n\n  async createPackageFromFiles(files: Array<string>, metadata: Map<string, Stats>) {\n    // search auto unpacked dir\n    const unpackedDirs = new Set<string>()\n    const unpackedDest = `${this.outFile}.unpacked`\n    const fileIndexToModulePackageData = new Map<number, BluebirdPromise<string>>()\n    await ensureDir(path.dirname(this.outFile))\n\n    if (this.options.smartUnpack !== false) {\n      await this.detectUnpackedDirs(files, metadata, unpackedDirs, unpackedDest, fileIndexToModulePackageData)\n    }\n\n    const dirToCreateForUnpackedFiles = new Set<string>(unpackedDirs)\n\n    const filesToUnpack: Array<UnpackedFileTask> = []\n    const mainPackageJson = path.join(this.src, \"package.json\")\n    const fileCopier = new FileCopier()\n    /* tslint:disable:rule1 prefer-const */\n    for (let i = 0, n = files.length; i < n; i++) {\n      const file = files[i]\n      const stat = metadata.get(file)!\n      if (stat.isFile()) {\n        const fileParent = path.dirname(file)\n        const dirNode = this.fs.searchNodeFromPath(fileParent)\n        const packageDataPromise = fileIndexToModulePackageData.get(i)\n        let newData: any | null = null\n        if (packageDataPromise == null) {\n          if (this.options.extraMetadata != null && file === mainPackageJson) {\n            newData = JSON.stringify(deepAssign(await readJson(file), this.options.extraMetadata), null, 2)\n          }\n        }\n        else {\n          newData = packageDataPromise.value()\n        }\n\n        const fileSize = newData == null ? stat.size : Buffer.byteLength(newData)\n        const node = this.fs.searchNodeFromPath(file)\n        node.size = fileSize\n        if (dirNode.unpacked || (this.unpackPattern != null && this.unpackPattern(file, stat))) {\n          node.unpacked = true\n\n          if (!dirNode.unpacked && !dirToCreateForUnpackedFiles.has(fileParent)) {\n            dirToCreateForUnpackedFiles.add(fileParent)\n            await ensureDir(fileParent.replace(this.src, unpackedDest))\n          }\n\n          const unpackedFile = file.replace(this.src, unpackedDest)\n          filesToUnpack.push(newData == null ? {src: file, destination: unpackedFile, stats: stat} : {destination: unpackedFile, data: newData, stats: stat})\n          if (filesToUnpack.length > MAX_FILE_REQUESTS) {\n            await writeUnpackedFiles(filesToUnpack, fileCopier)\n            filesToUnpack.length = 0\n          }\n        }\n        else {\n          if (newData != null) {\n            this.changedFiles.set(file, newData)\n          }\n\n          if (fileSize > 4294967295) {\n            throw new Error(`${file}: file size can not be larger than 4.2GB`)\n          }\n\n          node.offset = this.fs.offset.toString()\n          //noinspection JSBitwiseOperatorUsage\n          if (process.platform !== \"win32\" && stat.mode & 0x40) {\n            node.executable = true\n          }\n          this.toPack.push(file)\n          this.fs.offset.add(UINT64(fileSize))\n        }\n      }\n      else if (stat.isDirectory()) {\n        let unpacked = false\n        if (unpackedDirs.has(file)) {\n          unpacked = true\n        }\n        else {\n          for (const dir of unpackedDirs) {\n            if (file.length > (dir.length + 2) && file[dir.length] === path.sep && file.startsWith(dir)) {\n              unpacked = true\n              unpackedDirs.add(file)\n              // not all dirs marked as unpacked after first iteration - because node module dir can be marked as unpacked after processing node module dir content\n              // e.g. node-notifier/example/advanced.js processed, but only on process vendor/terminal-notifier.app module will be marked as unpacked\n              await ensureDir(file.replace(this.src, unpackedDest))\n              break\n            }\n          }\n        }\n        this.fs.insertDirectory(file, unpacked)\n      }\n      else if (stat.isSymbolicLink()) {\n        await this.addLink(file)\n      }\n    }\n\n    if (filesToUnpack.length > 0) {\n      await writeUnpackedFiles(filesToUnpack, fileCopier)\n    }\n  }\n\n  private async addLink(file: string) {\n    const realFile = await realpath(file)\n    const link = path.relative(await this.getSrcRealPath(), realFile)\n    if (link.startsWith(\"..\")) {\n      throw new Error(realFile + \": file links out of the package\")\n    }\n    else {\n      this.fs.searchNodeFromPath(file).link = link\n    }\n  }\n\n  private writeAsarFile(): Promise<any> {\n    const headerPickle = pickle.createEmpty()\n    headerPickle.writeString(JSON.stringify(this.fs.header))\n    const headerBuf = headerPickle.toBuffer()\n\n    const sizePickle = pickle.createEmpty()\n    sizePickle.writeUInt32(headerBuf.length)\n    const sizeBuf = sizePickle.toBuffer()\n\n    const writeStream = createWriteStream(this.outFile)\n    return new BluebirdPromise((resolve, reject) => {\n      writeStream.on(\"error\", reject)\n      writeStream.once(\"finish\", resolve)\n      writeStream.write(sizeBuf)\n\n      let w: (list: Array<any>, index: number) => void\n      w = (list: Array<any>, index: number) => {\n        if (list.length === index) {\n          writeStream.end()\n          return\n        }\n\n        const file = list[index]\n\n        const data = this.changedFiles.get(file)\n        if (data != null) {\n          writeStream.write(data, () => w(list, index + 1))\n          return\n        }\n\n        const readStream = createReadStream(file)\n        readStream.on(\"error\", reject)\n        readStream.once(\"end\", () => w(list, index + 1))\n        readStream.pipe(writeStream, {\n          end: false\n        })\n      }\n\n      writeStream.write(headerBuf, () => w(this.toPack, 0))\n    })\n  }\n\n  private async order(filenames: Array<string>) {\n    const orderingFiles = (await readFile(this.options.ordering!, \"utf8\")).split(\"\\n\").map(line => {\n      if (line.indexOf(\":\") !== -1) {\n        line = line.split(\":\").pop()!\n      }\n      line = line.trim()\n      if (line[0] === \"/\") {\n        line = line.slice(1)\n      }\n      return line\n    })\n\n    const ordering: Array<string> = []\n    for (const file of orderingFiles) {\n      const pathComponents = file.split(path.sep)\n      let str = this.src\n      for (const pathComponent of pathComponents) {\n        str = path.join(str, pathComponent)\n        ordering.push(str)\n      }\n    }\n\n    const filenamesSorted: Array<string> = []\n    let missing = 0\n    const total = filenames.length\n    for (const file of ordering) {\n      if (!filenamesSorted.includes(file) && filenames.includes(file)) {\n        filenamesSorted.push(file)\n      }\n    }\n    for (const file of filenames) {\n      if (!filenamesSorted.includes(file)) {\n        filenamesSorted.push(file)\n        missing += 1\n      }\n    }\n    log(`Ordering file has ${((total - missing) / total * 100)}% coverage.`)\n    return filenamesSorted\n  }\n}\n\nfunction cleanupPackageJson(data: any): any {\n  try {\n    let changed = false\n    for (const prop of Object.getOwnPropertyNames(data)) {\n      if (prop[0] === \"_\" || prop === \"dist\" || prop === \"gitHead\" || prop === \"keywords\") {\n        delete data[prop]\n        changed = true\n      }\n    }\n\n    if (changed) {\n      return JSON.stringify(data, null, 2)\n    }\n  }\n  catch (e) {\n    debug(e)\n  }\n\n  return null\n}\n\nexport async function checkFileInArchive(asarFile: string, relativeFile: string, messagePrefix: string) {\n  function error(text: string) {\n    return new Error(`${messagePrefix} \"${relativeFile}\" in the \"${asarFile}\" ${text}`)\n  }\n\n  let stat: AsarFileInfo | null\n  try {\n    stat = statFile(asarFile, relativeFile)\n  }\n  catch (e) {\n    const fileStat = await statOrNull(asarFile)\n    if (fileStat == null) {\n      throw error(`does not exist. Seems like a wrong configuration.`)\n    }\n\n    try {\n      listPackage(asarFile)\n    }\n    catch (e) {\n      throw error(`is corrupted: ${e}`)\n    }\n\n    // asar throws error on access to undefined object (info.link)\n    stat = null\n  }\n\n  if (stat == null) {\n    throw error(`does not exist. Seems like a wrong configuration.`)\n  }\n  if (stat.size === 0) {\n    throw error(`is corrupted: size 0`)\n  }\n}\n"
  ]
}
