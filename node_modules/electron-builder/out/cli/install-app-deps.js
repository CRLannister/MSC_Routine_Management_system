#! /usr/bin/env node
"use strict";

var _bluebirdLstC;

function _load_bluebirdLstC() {
    return _bluebirdLstC = require("bluebird-lst-c");
}

var _bluebirdLstC2;

function _load_bluebirdLstC2() {
    return _bluebirdLstC2 = _interopRequireDefault(require("bluebird-lst-c"));
}

let main = (() => {
    var _ref = (0, (_bluebirdLstC || _load_bluebirdLstC()).coroutine)(function* () {
        const args = (_yargs || _load_yargs()).default.option("platform", {
            choices: ["linux", "darwin", "win32"],
            default: process.platform
        }).option("arch", {
            choices: ["ia32", "x64", "all"],
            default: process.arch
        }).argv;
        const projectDir = process.cwd();
        const devPackageFile = _path.join(projectDir, "package.json");
        const devMetadata = yield (0, (_readPackageJson || _load_readPackageJson()).readPackageJson)(devPackageFile);
        const results = yield (_bluebirdLstC2 || _load_bluebirdLstC2()).default.all([(0, (_util || _load_util()).computeDefaultAppDirectory)(projectDir, (0, (_util || _load_util()).use)((0, (_util || _load_util()).getDirectoriesConfig)(devMetadata), function (it) {
            return it.app;
        })), (0, (_util || _load_util()).getElectronVersion)(devMetadata, devPackageFile)]);
        // if two package.json â€” force full install (user wants to install/update app deps in addition to dev)
        yield (0, (_yarn || _load_yarn()).installOrRebuild)(devMetadata.build, results[0], results[1], args.platform, args.arch, results[0] !== projectDir);
    });

    return function main() {
        return _ref.apply(this, arguments);
    };
})();

var _util;

function _load_util() {
    return _util = require("../util/util");
}

var _promise;

function _load_promise() {
    return _promise = require("../util/promise");
}

var _path = _interopRequireWildcard(require("path"));

var _yargs;

function _load_yargs() {
    return _yargs = _interopRequireDefault(require("yargs"));
}

var _readPackageJson;

function _load_readPackageJson() {
    return _readPackageJson = require("../util/readPackageJson");
}

var _yarn;

function _load_yarn() {
    return _yarn = require("../yarn");
}

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

main().catch((_promise || _load_promise()).printErrorAndExit);
//# sourceMappingURL=install-app-deps.js.map