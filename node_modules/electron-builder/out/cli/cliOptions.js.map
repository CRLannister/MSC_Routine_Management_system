{
  "version": 3,
  "file": "cliOptions.js",
  "sourceRoot": "",
  "sources": [
    "../../src/cli/cliOptions.ts"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "import { underline } from \"chalk\"\nimport yargs from \"yargs\"\n\nconst publishGroup = \"Publishing:\"\nconst buildGroup = \"Building:\"\nconst deprecated = \"Deprecated:\"\n\nexport function createYargs(): any {\n  //noinspection ReservedWordAsName\n  return yargs\n    .example(\"build -mwl\", \"build for macOS, Windows and Linux\")\n    .example(\"build --linux deb tar.xz\", \"build deb and tar.xz for Linux\")\n    .example(\"build --win --ia32\", \"build for Windows ia32\")\n    .example(\"build --em.foo=bar\", \"set package.json property `foo` to `bar`\")\n    .option(\"mac\", {\n      group: buildGroup,\n      alias: [\"m\", \"o\", \"macos\"],\n      describe: `Build for macOS, accepts target list (see ${underline(\"https://goo.gl/HAnnq8\")}).`,\n      type: \"array\",\n    })\n    .option(\"linux\", {\n      group: buildGroup,\n      alias: \"l\",\n      describe: `Build for Linux, accepts target list (see ${underline(\"https://goo.gl/O80IL2\")})`,\n      type: \"array\",\n    })\n    .option(\"win\", {\n      group: buildGroup,\n      alias: [\"w\", \"windows\"],\n      describe: `Build for Windows, accepts target list (see ${underline(\"https://goo.gl/dL4i8i\")})`,\n      type: \"array\",\n    })\n    .option(\"x64\", {\n      group: buildGroup,\n      describe: \"Build for x64\",\n      type: \"boolean\",\n    })\n    .option(\"ia32\", {\n      group: buildGroup,\n      describe: \"Build for ia32\",\n      type: \"boolean\",\n    })\n    .option(\"armv7l\", {\n      group: buildGroup,\n      describe: \"Build for armv7l\",\n      type: \"boolean\",\n    })\n    .option(\"dir\", {\n      group: buildGroup,\n      describe: \"Build unpacked dir. Useful to test.\",\n      type: \"boolean\",\n    })\n    .option(\"publish\", {\n      group: publishGroup,\n      alias: \"p\",\n      describe: `Publish artifacts (to GitHub Releases), see ${underline(\"https://goo.gl/WMlr4n\")}`,\n      choices: [\"onTag\", \"onTagOrDraft\", \"always\", \"never\"],\n    })\n    .option(\"draft\", {\n      group: publishGroup,\n      describe: \"Create a draft (unpublished) release\",\n      type: \"boolean\",\n      default: undefined,\n    })\n    .option(\"prerelease\", {\n      group: publishGroup,\n      describe: \"Identify the release as a prerelease\",\n      type: \"boolean\",\n      default: undefined,\n    })\n    .option(\"platform\", {\n      group: deprecated,\n      describe: \"The target platform (preferred to use --mac, --win or --linux)\",\n      choices: [\"mac\", \"win\", \"linux\", \"darwin\", \"win32\", \"all\"],\n    })\n    .option(\"arch\", {\n      group: deprecated,\n      describe: \"The target arch (preferred to use --x64 or --ia32)\",\n      choices: [\"ia32\", \"x64\", \"all\"],\n    })\n    .option(\"extraMetadata\", {\n      alias: [\"em\"],\n      group: buildGroup,\n      describe: \"Inject properties to package.json (asar only)\",\n    })\n    .option(\"prepackaged\", {\n      alias: [\"pd\"],\n      group: buildGroup,\n      describe: \"The path to prepackaged app (to pack in a distributable format)\",\n    })\n    .option(\"project\", {\n      group: buildGroup,\n      describe: \"The path to project directory. Defaults to current working directory.\",\n    })\n    .strict()\n    .group([\"help\", \"version\"], \"Other:\")\n    .help()\n    .version()\n    .epilog(`See the Wiki (${underline(\"https://github.com/electron-userland/electron-builder/wiki\")}) for more documentation.`)\n}\n"
  ]
}
