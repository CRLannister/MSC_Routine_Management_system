{
  "version": 3,
  "file": "install-app-deps.js",
  "sourceRoot": "",
  "sources": [
    "../../src/cli/install-app-deps.ts"
  ],
  "names": [],
  "mappings": ";;;;;;;;;;;;;;;sEAUA,AAAK;AACH,cAAM,AAAI,yCACP,AAAM,OAAC,AAAU;AAChB,AAAO,qBAAE,CAAC,AAAO,SAAE,AAAQ,UAAE,AAAO,AAAC;AACrC,AAAO,qBAAE,AAAO,QAAC,AAAQ,AAC1B,AAAC;AAHkB,SADJ,AAAK,EAKpB,AAAM,OAAC,AAAM;AACZ,AAAO,qBAAE,CAAC,AAAM,QAAE,AAAK,OAAE,AAAK,AAAC;AAC/B,AAAO,qBAAE,AAAO,QAAC,AAAI,AACtB,AAAC;AAHc,WAIf,AAAI;AAEP,cAAM,AAAU,aAAG,AAAO,QAAC,AAAG,AAAE;AAChC,cAAM,AAAc,iBAAG,AAAI,MAAC,AAAI,KAAC,AAAU,YAAE,AAAc,AAAC;AAE5D,cAAM,AAAW,cAAgB,MAAM,AAAe,mEAAC,AAAc,AAAC;AACtE,cAAM,AAAO,UAAkB,MAAM,AAAe,kDAAC,AAAG,6DAC3B,AAAU,6CAAM,AAAoB,kDAAC,AAAW,AAAC;AAAE,AAAE,mBAAI,AAAG,GAAC,AAAG,AAAC,AAAC;SAAtD,AAAG,CAA1C,AAA0B,CAD6B,EAEvD,AAAkB,gDAAC,AAAW,aAAE,AAAc,AAAC,AAChD,AAAC;AAEF,AAAsG;AACtG,cAAM,AAAgB,8CAAC,AAAW,YAAC,AAAK,OAAE,AAAO,QAAC,AAAC,AAAC,IAAE,AAAO,QAAC,AAAC,AAAC,IAAE,AAAI,KAAC,AAAQ,UAAE,AAAI,KAAC,AAAI,MAAE,AAAO,QAAC,AAAC,AAAC,OAAK,AAAU,AAAC,AACxH;AAAC;;;;;;;;;AAhCD,AAAO,AAAE,AAA0B,AAAE,AAAkB,AAAE,AAAG,AAAE,AAAoB,AAAE,AAAM,AAAc;;;;;;AACxG,AAAO,AAAE,AAAiB,AAAE,AAAM,AAAiB;;;;AACnD,AAAO,AAAK,AAAI,AAAM,AAAM,AAC5B,AAAO,AAAe,AAAM,AAAgB;;;;AAE5C,AAAO,AAAK,AAAM,AAAO;;;;;;AACzB,AAAO,AAAE,AAAe,AAAE,AAAM,AAAyB;;;;;;AACzD,AAAO,AAAE,AAAgB,AAAE,AAAM,AAAS;;;;;;;;AA2B1C,AAAI,AAAE,OACH,AAAK,AAAC,AAAiB,AAAC",
  "sourcesContent": [
    "#! /usr/bin/env node\nimport { computeDefaultAppDirectory, getElectronVersion, use, getDirectoriesConfig } from \"../util/util\"\nimport { printErrorAndExit } from \"../util/promise\"\nimport * as path from \"path\"\nimport BluebirdPromise from \"bluebird-lst-c\"\nimport { DevMetadata } from \"../metadata\"\nimport yargs from \"yargs\"\nimport { readPackageJson } from \"../util/readPackageJson\"\nimport { installOrRebuild } from \"../yarn\"\n\nasync function main() {\n  const args: any = yargs\n    .option(\"platform\", {\n      choices: [\"linux\", \"darwin\", \"win32\"],\n      default: process.platform,\n    })\n    .option(\"arch\", {\n      choices: [\"ia32\", \"x64\", \"all\"],\n      default: process.arch,\n    })\n    .argv\n\n  const projectDir = process.cwd()\n  const devPackageFile = path.join(projectDir, \"package.json\")\n\n  const devMetadata: DevMetadata = await readPackageJson(devPackageFile)\n  const results: Array<string> = await BluebirdPromise.all([\n    computeDefaultAppDirectory(projectDir, use(getDirectoriesConfig(devMetadata), it => it!.app)),\n    getElectronVersion(devMetadata, devPackageFile)\n  ])\n\n  // if two package.json â€” force full install (user wants to install/update app deps in addition to dev)\n  await installOrRebuild(devMetadata.build, results[0], results[1], args.platform, args.arch, results[0] !== projectDir)\n}\n\nmain()\n  .catch(printErrorAndExit)"
  ]
}
