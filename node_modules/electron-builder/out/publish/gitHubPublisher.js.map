{
  "version": 3,
  "file": "gitHubPublisher.js",
  "sourceRoot": "",
  "sources": [
    "../../src/publish/gitHubPublisher.ts"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "import { isEmptyOrSpaces } from \"../util/util\"\nimport { log, warn } from \"../util/log\"\nimport { debug } from \"../util/util\"\nimport { parse as parseUrl } from \"url\"\nimport mime from \"mime\"\nimport BluebirdPromise from \"bluebird-lst-c\"\nimport { PublishPolicy, PublishOptions, Publisher } from \"./publisher\"\nimport { GithubOptions } from \"electron-builder-http/out/publishOptions\"\nimport { ClientRequest } from \"http\"\nimport { HttpError, githubRequest } from \"electron-builder-http\"\nimport { NodeHttpExecutor } from \"../util/nodeHttpExecutor\"\n\nexport interface Release {\n  id: number\n  tag_name: string\n\n  draft: boolean\n\n  upload_url: string\n}\n\ninterface Asset {\n  id: number\n  name: string\n}\n\nexport class GitHubPublisher extends Publisher {\n  private tag: string\n  private _releasePromise: Promise<Release>\n  private readonly httpExecutor: NodeHttpExecutor = new NodeHttpExecutor()\n\n  private readonly token: string\n  private readonly policy: PublishPolicy\n\n  get releasePromise(): Promise<Release | null> {\n    return this._releasePromise\n  }\n\n  constructor(private readonly info: GithubOptions, private readonly version: string, private readonly options: PublishOptions = {}, private readonly isPublishOptionGuessed: boolean = false) {\n    super()\n\n    let token = info.token\n    if (isEmptyOrSpaces(token)) {\n      token = process.env.GH_TOKEN\n      if (isEmptyOrSpaces(token)) {\n        throw new Error(`GitHub Personal Access Token is not set, neither programmatically, nor using env \"GH_TOKEN\"`)\n      }\n    }\n\n    this.token = token!\n    this.options = options || {}\n    this.policy = this.options.publish || \"always\"\n\n    if (version.startsWith(\"v\")) {\n      throw new Error(`Version must not starts with \"v\": ${version}`)\n    }\n\n    this.tag = info.vPrefixedTagName === false ? version : `v${version}`\n    this._releasePromise = this.token === \"__test__\" ? BluebirdPromise.resolve(<any>null) : this.init()\n  }\n\n  private async init(): Promise<Release | null> {\n    const createReleaseIfNotExists = this.policy !== \"onTagOrDraft\"\n    // we don't use \"Get a release by tag name\" because \"tag name\" means existing git tag, but we draft release and don't create git tag\n\n    const releases = await githubRequest<Array<Release>>(`/repos/${this.info.owner}/${this.info.repo}/releases`, this.token)\n    for (const release of releases) {\n      if (release.tag_name === this.tag || release.tag_name === this.version) {\n        if (release.draft) {\n          return release\n        }\n\n        if (!this.isPublishOptionGuessed && this.policy === \"onTag\") {\n          throw new Error(`Release with tag ${this.tag} must be a draft`)\n        }\n\n        const message = `Release with tag ${this.tag} is not a draft, artifacts will be not published`\n        if (this.isPublishOptionGuessed || this.policy === \"onTagOrDraft\") {\n          log(message)\n        }\n        else {\n          warn(message)\n        }\n        return null\n      }\n    }\n\n    if (createReleaseIfNotExists) {\n      log(`Release with tag ${this.tag} doesn't exist, creating one`)\n      return this.createRelease()\n    }\n    else {\n      log(`Release with tag ${this.tag} doesn't exist, artifacts will be not published`)\n      return null\n    }\n  }\n\n  protected async doUpload(fileName: string, dataLength: number, requestProcessor: (request: ClientRequest, reject: (error: Error) => void) => void): Promise<void> {\n    const release = await this.releasePromise\n    if (release == null) {\n      debug(`Release with tag ${this.tag} doesn't exist and is not created, artifact ${fileName} is not published`)\n      return\n    }\n\n    const parsedUrl = parseUrl(release.upload_url.substring(0, release.upload_url.indexOf(\"{\")) + \"?name=\" + fileName)\n    let badGatewayCount = 0\n    uploadAttempt: for (let i = 0; i < 3; i++) {\n      try {\n        return await this.httpExecutor.doApiRequest<any>({\n          hostname: parsedUrl.hostname,\n          path: parsedUrl.path,\n          method: \"POST\",\n          headers: {\n            Accept: \"application/vnd.github.v3+json\",\n            \"User-Agent\": \"electron-builder\",\n            \"Content-Type\": mime.lookup(fileName),\n            \"Content-Length\": dataLength\n          }\n        }, this.token, requestProcessor)\n      }\n      catch (e) {\n        if (e instanceof HttpError) {\n          if (e.response.statusCode === 422 && e.description != null && e.description.errors != null && e.description.errors[0].code === \"already_exists\") {\n            // delete old artifact and re-upload\n            log(`Artifact ${fileName} already exists, overwrite one`)\n\n            const assets = await githubRequest<Array<Asset>>(`/repos/${this.info.owner}/${this.info.repo}/releases/${release.id}/assets`, this.token, null)\n            for (const asset of assets) {\n              if (asset!.name === fileName) {\n                await githubRequest<void>(`/repos/${this.info.owner}/${this.info.repo}/releases/assets/${asset!.id}`, this.token, null, \"DELETE\")\n                continue uploadAttempt\n              }\n            }\n\n            log(`Artifact ${fileName} not found, trying to upload again`)\n            continue\n          }\n          else if (e.response.statusCode === 502 && badGatewayCount++ < 3) {\n            continue\n          }\n        }\n\n        throw e\n      }\n    }\n  }\n\n  private createRelease() {\n    return githubRequest<Release>(`/repos/${this.info.owner}/${this.info.repo}/releases`, this.token, {\n      tag_name: this.tag,\n      name: this.version,\n      draft: this.options.draft == null || this.options.draft,\n      prerelease: this.options.prerelease != null && this.options.prerelease,\n    })\n  }\n\n  // test only\n  //noinspection JSUnusedGlobalSymbols\n  async getRelease(): Promise<any> {\n    return githubRequest<Release>(`/repos/${this.info.owner}/${this.info.repo}/releases/${(await this._releasePromise).id}`, this.token)\n  }\n\n  //noinspection JSUnusedGlobalSymbols\n  async deleteRelease(): Promise<any> {\n    const release = await this._releasePromise\n    if (release == null) {\n      return\n    }\n\n    for (let i = 0; i < 3; i++) {\n      try {\n        return await githubRequest(`/repos/${this.info.owner}/${this.info.repo}/releases/${release.id}`, this.token, null, \"DELETE\")\n      }\n      catch (e) {\n        if (e instanceof HttpError) {\n          if (e.response.statusCode === 404) {\n            warn(`Cannot delete release ${release.id} — doesn't exist`)\n            return\n          }\n          else if (e.response.statusCode === 405 || e.response.statusCode === 502) {\n            continue\n          }\n        }\n\n        throw e\n      }\n    }\n\n    warn(`Cannot delete release ${release.id}`)\n  }\n\n  // async deleteOldReleases() {\n  //   const releases = await githubRequest<Array<Release>>(`/repos/${this.owner}/${this.repo}/releases`, this.token)\n  //   for (const release of releases) {\n  //     await githubRequest(`/repos/${this.owner}/${this.repo}/releases/${release.id}`, this.token, null, \"DELETE\")\n  //   }\n  // }\n}"
  ]
}
