{
  "version": 3,
  "file": "publisher.js",
  "sourceRoot": "",
  "sources": [
    "../../src/publish/publisher.ts"
  ],
  "names": [],
  "mappings": ";;;;;;;;;;;;;;;AACA,AAAO,AAAE,AAAU,AAAE,AAAM,AAAY;;;;;;AACvC,AAAO,AAAE,AAAI,AAAE,AAAM,AAAY;;;;AACjC,AAAO,AAAE,AAAQ,AAAE,AAAM,AAAM,AAW/B,AAAM;;;AACE,AAAM,UAAZ,AAAK,CAAQ,AAAY,MAAE,AAAqB;;;;AAC9C,kBAAM,AAAQ,WAAG,AAAY,gBAAI,AAAQ,oBAAC,AAAI,AAAC;AAC/C,kBAAM,AAAQ,WAAG,MAAM,AAAI,0CAAC,AAAI,AAAC;AACjC,kBAAM,AAAI,MAAC,AAAQ,SAAC,AAAQ,UAAE,AAAQ,SAAC,AAAI,MAAE,AAAU,2CAAC,AAAI,AAAC,AAAI,YAAE,AAAI,MAAE,AAAQ,UAAE,AAAQ,AAAC,AAAC,AAC/F;;AAAC;AAED,AAAU,eAAC,AAAY,MAAE,AAAgB;AACvC,AAAE,AAAC,YAAC,AAAI,QAAI,AAAI,QAAI,AAAQ,YAAI,AAAI,AAAC,MAAC,AAAC;AACrC,kBAAM,IAAI,AAAK,MAAC,AAA0B,AAAC,AAC7C;AAAC;AACD,AAAM,eAAC,AAAI,KAAC,AAAQ,SAAC,AAAQ,UAAE,AAAI,KAAC,AAAM,QAAE,AAAE,MAAI,AAAE,GAAC,AAAG,IAAC,AAAI,AAAC,AAAC,AACjE;AAAC,AAGF",
  "sourcesContent": [
    "import { ClientRequest } from \"http\"\nimport { uploadFile } from \"./uploader\"\nimport { stat } from \"fs-extra-p\"\nimport { basename } from \"path\"\n\nexport type PublishPolicy = \"onTag\" | \"onTagOrDraft\" | \"always\" | \"never\"\n\nexport interface PublishOptions {\n  publish?: PublishPolicy | null\n\n  draft?: boolean\n  prerelease?: boolean\n}\n\nexport abstract class Publisher {\n  async upload(file: string, artifactName?: string): Promise<any> {\n    const fileName = artifactName || basename(file)\n    const fileStat = await stat(file)\n    await this.doUpload(fileName, fileStat.size, uploadFile.bind(this, file, fileStat, fileName))\n  }\n\n  uploadData(data: Buffer, fileName: string): Promise<any> {\n    if (data == null || fileName == null) {\n      throw new Error(\"data or fileName is null\")\n    }\n    return this.doUpload(fileName, data.length, it => it.end(data))\n  }\n\n  protected abstract doUpload(fileName: string, dataLength: number, requestProcessor: (request: ClientRequest, reject: (error: Error) => void) => void): Promise<any>\n}"
  ]
}
