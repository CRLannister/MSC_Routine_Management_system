{
  "version": 3,
  "file": "tmp.js",
  "sourceRoot": "",
  "sources": [
    "../../src/util/tmp.ts"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "import { tmpdir } from \"os\"\nimport { remove, mkdirs, removeSync, mkdtemp } from \"fs-extra-p\"\nimport * as path from \"path\"\nimport { getTempName } from \"./util\"\nimport BluebirdPromise from \"bluebird-lst-c\"\nimport { warn } from \"./log\"\nimport { all } from \"./promise\"\n\nprocess.setMaxListeners(30)\n\nlet tempDirPromise: Promise<string> | null\nlet tempDir: string | null\n\nfunction getTempDir() {\n  if (tempDirPromise == null) {\n    let promise: Promise<string>\n    const systemTmpDir = process.env.TEST_DIR || tmpdir()\n    if (mkdtemp == null) {\n      const dir = path.join(systemTmpDir, getTempName(\"electron-builder\"))\n      promise = mkdirs(dir, {mode: 448}).then(() => dir)\n    }\n    else {\n      promise = mkdtemp(`${path.join(systemTmpDir, \"electron-builder\")}-`)\n    }\n\n    tempDirPromise = promise\n      .then(dir => {\n        tempDir = dir\n        const cleanup = () => {\n          if (tempDir == null) {\n            return\n          }\n\n          tempDir = null\n          try {\n            removeSync(dir)\n          }\n          catch (e) {\n            if (e.code !== \"EPERM\") {\n              warn(`Cannot delete temporary dir \"${dir}\": ${(e.stack || e).toString()}`)\n            }\n          }\n        }\n        process.on(\"exit\", cleanup)\n        process.on(\"uncaughtException\", cleanup)\n        process.on(\"SIGINT\", cleanup)\n        return dir\n      })\n  }\n\n  return tempDirPromise\n}\n\nlet tmpFileCounter = 0\n\nexport class TmpDir {\n  private tempPrefixPromise: Promise<string> | null\n  private tempFiles: Array<string> = []\n\n  getTempFile(suffix: string): Promise<string> {\n    if (this.tempPrefixPromise == null) {\n      this.tempPrefixPromise = getTempDir().then(it => path.join(it, (tmpFileCounter++).toString(16)))\n    }\n\n    return this.tempPrefixPromise\n      .then(it => {\n        const result = `${it}-${(tmpFileCounter++).toString(16)}${suffix.length === 0 || suffix.startsWith(\".\") ? suffix : `-${suffix}`}`\n        this.tempFiles.push(result)\n        return result\n      })\n  }\n\n  cleanup(): Promise<any> {\n    const tempFiles = this.tempFiles\n    if (tempFiles.length === 0) {\n      return BluebirdPromise.resolve()\n    }\n\n    this.tempFiles = []\n    this.tempPrefixPromise = null\n\n    return all(tempFiles.map(it => remove(it)\n      .catch(e => {\n        if (e.code !== \"EPERM\") {\n          warn(`Cannot delete temporary dir \"${it}\": ${(e.stack || e).toString()}`)\n        }\n      })\n    ))\n  }\n}\n"
  ]
}
