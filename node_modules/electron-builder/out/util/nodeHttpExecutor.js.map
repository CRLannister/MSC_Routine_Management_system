{
  "version": 3,
  "file": "nodeHttpExecutor.js",
  "sourceRoot": "",
  "sources": [
    "../../src/util/nodeHttpExecutor.ts"
  ],
  "names": [],
  "mappings": ";;;;;;;;;;;;;;;;;;;AAgKA,AAAmB;;sEACnB,AAAK;AACH,YAAI,AAAI,OAAG,AAAE;AACb,YAAI,AAAC;AACH,AAAI,mBAAG,MAAM,AAAQ,8CAAC,AAAI,MAAC,AAAI,KAAC,AAAO,AAAE,oCAAE,AAAQ,AAAC,WAAE,AAAO,AAAC,AAChE;AACA,UAAA,AAAK,AAAC,OAAC,AAAO,AAAC,SAAC,AAAC;AACf,AAAM,mBAAC,AAAI,AACb;AAAC;AAED,AAAE,AAAC,YAAC,CAAC,AAAI,AAAC,MAAC,AAAC;AACV,AAAM,mBAAC,AAAI,AACb;AAAC;AAED,YAAI,AAAC;AACH,kBAAM,AAAM,SAAG,AAAQ,iCAAC,AAAI,AAAC;AAC7B,AAAM,mBAAC,AAAM,OAAC,AAAa,AAAC,kBAAI,AAAM,OAAC,AAAK,AAC9C;AACA,UAAA,AAAK,AAAC,OAAC,AAAC,AAAC,GAAC,AAAC;AACT,AAAwD;AACxD,AAAO,oBAAC,AAAI,KAAC,AAAC,AAAC;AACf,AAAM,mBAAC,AAAI,AACb;AAAC,AACH;AAAC;;;;;;AAED,AAAiB;;;;uEACjB,AAAK;AACH,YAAI,AAAW,cACb,AAAO,QAAC,AAAG,IAAC,AAAsB,0BAClC,AAAO,QAAC,AAAG,IAAC,AAAW,eAAI,AAAO,QAAC,AAAG,IAAC,AAAW,eAClD,AAAO,QAAC,AAAG,IAAC,AAAgB;AAE9B,AAAE,AAAC,YAAC,CAAC,AAAW,AAAC,aAAC,AAAC;AACjB,AAAW,0BAAG,MAAM,AAAY,AAAE;AAClC,AAAE,AAAC,gBAAC,CAAC,AAAW,AAAC,aAAC,AAAC;AACjB,AAAM,uBAAC,AAAI,AACb;AAAC,AACH;AAAC;AAED,cAAM,AAAK,QAAG,AAAQ,iCAAC,AAAW,AAAC;AAEnC,cAAM,AAAa,gBAAG,AAAK,MAAC,AAAQ,aAAK,AAAQ,WAAG,AAAO,UAAG,AAAM;AACpE,AAAM,uBAAS,AAAc,AAAC,AAAC,6BAAY,AAAa,aAAE,AAAC;AACzD,AAAK;AACH,AAAI,sBAAE,AAAK,MAAC,AAAI,AAAI,SAAC,AAAa,kBAAK,AAAO,UAAG,AAAG,MAAG,AAAE,AAAC;AAC1D,AAAI,sBAAE,AAAK,MAAC,AAAQ;AACpB,AAAS,2BAAE,AAAK,MAAC,AAAI,AACtB,AACF,AAAC,AACJ;AANW;AADmD,SAArD,AAAO;AAOf;;;;;;;;;;;AA/MD,AAAO,AAAK,AAAK,AAAM,AAAO;;;;;;AAC9B,AAAO,AAAE,AAAS,AAAE,AAAQ,AAAE,AAAM,AAAY,AAChD,AAAO,AAAe,AAAM,AAAgB;;;;AAC5C,AAAO,AAAK,AAAI,AAAM,AAAM;;;;AAC5B,AAAO,AAAE,AAAO,AAAE,AAAM,AAAI;;;;;;AAC5B,AAAO,AAAE,AAAK,AAAI,AAAQ,AAAE,AAAM,AAAK;;;;;;AACvC,AAAO,AAAE,AAAY,AAAmB,AAAS,AAAE,AAAc,AAAG,AAAY,AAAE,AAAM,AAAuB;;;;;;AAE/G,AAAO,AAAE,AAAQ,AAAE,AAAM,AAAS;;;;;;AAClC,AAAO,AAAE,AAAK,AAAI,AAAQ,AAAE,AAAM,AAAK;;;;;;AACvC,AAAO,AAAE,AAAK,AAAE,AAAM,AAAQ,AAE9B,AAAM;;;;;;;;MAAwB,AAAQ,AAA2C;AAGzE,AAAQ,YAAd,AAAK,CAAU,AAAW,KAAE,AAAmB,aAAE,AAAgC;;;;AAC/E,AAAE,AAAC,gBAAC,AAAO,WAAI,AAAI,QAAI,CAAC,AAAO,QAAC,AAAe,AAAC,iBAAC,AAAC;AAChD,sBAAM,AAAS,+CAAC,AAAI,MAAC,AAAO,QAAC,AAAW,AAAC,AAAC,AAC5C;AAAC;AAED,AAAE,AAAC,gBAAC,AAAI,MAAC,AAAiB,qBAAI,AAAI,AAAC,MAAC,AAAC;AACnC,AAAI,sBAAC,AAAiB,oBAAG,AAAW,AAAE,AACxC;AAAC;AAED,kBAAM,AAAK,QAAG,MAAM,AAAI,MAAC,AAAiB;AAC1C,AAAM,mBAAC,4DAAkC,UAAC,AAAO,SAAE,AAAM;AACvD,AAAI,sBAAC,AAAU,WAAC,AAAG,KAAE,AAAW,aAAE,AAAC,GAAE,AAAO,WAAI,AAAE,IAAE,AAAK,OAAE,UAAC,AAAY;AACtE,AAAE,AAAC,wBAAC,AAAK,SAAI,AAAI,AAAC,MAAC,AAAC;AAClB,AAAO,gCAAC,AAAW,AAAC,AACtB;AAAC,AACD,AAAI,2BAAC,AAAC;AACJ,AAAM,+BAAC,AAAK,AAAC,AACf;AAAC,AACH;AAAC,AAAC,AACJ;AAAC,AAAC,AACJ,aAVe,AAAI,AAAe;;AAUjC;AAEO,AAAiB,sBAAC,AAAsB,SAAE,AAAgC;AAChF,AAAO,gBAAC,AAAE,GAAC,AAAQ,UAAE,UAAU,AAAc;AAC3C,AAAM,mBAAC,AAAU,WAAC,AAAE,KAAG,AAAI,MAAE;AAC3B,AAAQ,yBAAC,IAAI,AAAK,MAAC,AAAmB,AAAC,AAAC;AACxC,AAAO,wBAAC,AAAK,AAAE,AACjB;AAAC,AAAC,AACJ;AAAC,AAAC,AACJ;AAAC;AAEO,AAAU,eAAC,AAAW,KAAE,AAAmB,aAAE,AAAqB,eAAE,AAAwB,SAAE,AAAY,OAAE,AAAuC;AACzJ,cAAM,AAAS,YAAG,AAAQ,iCAAC,AAAG,AAAC;AAC/B,AAAgF;AAChF,cAAM,AAAO,oCAAS,AAAO;AAC3B,AAAQ,sBAAE,AAAS,UAAC,AAAQ;AAC5B,AAAI,kBAAE,AAAS,UAAC,AAAI;AACpB,AAAO;AACL,AAAY,8BAAE,AAAkB,AACjC;AAFQ;AAGT,AAAK,mBAAE,AAAK,AACb;AAP6B,SAAd,AAAK,EAOjB,AAAyB,QAA1B;AACD,AAAE,AAAC,gBAAC,AAAQ,SAAC,AAAU,cAAI,AAAG,AAAC,KAAC,AAAC;AAC/B,AAAQ,yBAAC,IAAI,AAAK,AAAC,2BAAoB,AAAG,kBAAa,AAAQ,SAAC,AAAU,iBAAK,AAAQ,SAAC,AAAa,aAAE,AAAC,AAAC;AACzG,AAAM,AACR;AAAC;AAED,kBAAM,AAAW,cAAG,AAAQ,SAAC,AAAO,QAAC,AAAQ;AAC7C,AAAE,AAAC,gBAAC,AAAW,eAAI,AAAI,AAAC,MAAC,AAAC;AACxB,AAAE,AAAC,oBAAC,AAAa,AAAG,AAAY,AAAC,oFAAC,AAAC;AACjC,AAAI,yBAAC,AAAU,WAAC,AAAW,aAAE,AAAW,aAAE,AAAa,AAAE,iBAAE,AAAO,SAAE,AAAK,OAAE,AAAQ,AAAC,AACtF;AAAC,AACD,AAAI,uBAAC,AAAC;AACJ,AAAQ,6BAAC,IAAI,AAAK,MAA0B,AAAY,0BAArC,kEAAwC,AAAC,AAAC,AAC/D;AAAC;AACD,AAAM,AACR;AAAC;AAED,AAAc,sFAAC,AAAO,SAAE,AAAQ,UAAE,AAAW,aAAE,AAAQ,AAAC,AAC1D;AAAC,AAAC;AACF,AAAI,aAAC,AAAiB,kBAAC,AAAO,SAAE,AAAQ,AAAC;AACzC,AAAO,gBAAC,AAAE,GAAC,AAAO,SAAE,AAAQ,AAAC;AAC7B,AAAO,gBAAC,AAAG,AAAE,AACf;AAAC;AAGD,AAAY,iBAAI,AAAuB,SAAE,AAAoB,OAAE,AAAkF;YAAE,oFAAwB,AAAC;;AAC1K,AAAK,AAAC,8DAAkB,AAAI,KAAC,AAAS,UAAC,AAAO,SAAE,AAAI,MAAE,AAAC,AAAC,EAAE,AAAC;AAE3D,AAAE,AAAC,YAAC,AAAK,SAAI,AAAI,AAAC,MAAC,AAAC;AACZ,AAAO,oBAAC,AAAQ,QAAC,AAAa,gBAAG,AAAK,MAAC,AAAU,WAAC,AAAO,AAAC,WAAG,AAAK,AAAG,kBAAS,AAAK,KAAE,AAC7F;AAAC;AAED,AAAM,qEAAwB,CAAC,AAAO,SAAE,AAAM,QAAE,AAAQ;AACtD,kBAAM,AAAO,oCAAS,AAAO,QAAC,AAAO,SAAG,AAAyB,QAA1B;AACrC,oBAAI,AAAC;AACH,AAAE,AAAC,wBAAC,AAAQ,SAAC,AAAU,eAAK,AAAG,AAAC,KAAC,AAAC;AAChC,AAAmE;AACnE,AAAM,mGAAe,AAAQ,AAAE,sBAAW,AAAO,QAAC,AAAM,yBAAiB,AAAO,QAAC,AAAQ,aAAG,AAAO,QAAC,AAAI,IAGnH,AAAC,AAAC,AACO;;;CAJS,AAAI,AAAS;AAIrB,AACD,AAAI,2BAAC,AAAE,AAAC,IAAC,AAAQ,SAAC,AAAU,eAAK,AAAG,AAAC,KAAC,AAAC;AACrC,AAAoB;AACpB,AAAO,AAAE;AACT,AAAM,AACR;AAAC;AAED,0BAAM,AAAW,cAAG,AAAQ,SAAC,AAAO,QAAC,AAAQ;AAC7C,AAAE,AAAC,wBAAC,AAAW,eAAI,AAAI,AAAC,MAAC,AAAC;AACxB,AAAE,AAAC,4BAAC,AAAa,gBAAG,AAAE,AAAC,IAAC,AAAC;AACvB,AAAM,mCAAC,IAAI,AAAK,MAAC,AAA2B,AAAC,AAAC;AAC9C,AAAM,AACR;AAAC;AAED,AAAI,6BAAC,AAAY,aAAC,AAAM,OAAC,AAAM,OAAC,AAAE,IAAE,AAAO,SAAE,AAAQ,iCAAC,AAAW,AAAC,AAAC,eAAE,AAAK,OAAE,AAAgB,AAAC,kBAC1F,AAAI,KAAM,AAAO,AAAC,SAClB,AAAK,MAAC,AAAM,AAAC;AAEhB,AAAM,AACR;AAAC;AAED,wBAAI,AAAI,OAAG,AAAE;AACb,AAAQ,6BAAC,AAAW,YAAC,AAAM,AAAC;AAC5B,AAAQ,6BAAC,AAAE,GAAC,AAAM,QAAG,AAAa,KAAd;AAClB,AAAI,gCAAI,AAAK,AACf;AAAC,AAAC;AAEF,AAAQ,6BAAC,AAAE,GAAC,AAAK,OAAE;AACjB,4BAAI,AAAC;AACH,kCAAM,AAAW,cAAG,AAAQ,SAAC,AAAO,QAAC,AAAc,AAAC;AACpD,kCAAM,AAAM,SAAG,AAAW,eAAI,AAAI,QAAI,AAAW,YAAC,AAAQ,QAAC,AAAM,AAAC;AAClE,kCAAM,AAAM,SAAG,AAAO,QAAC,AAAK,KAAC,AAAQ,QAAC,AAAM,AAAC;AAC7C,AAAE,AAAC,gCAAC,AAAQ,SAAC,AAAU,cAAI,AAAG,AAAC,KAAC,AAAC;AAC/B,AAAE,AAAC,oCAAC,AAAM,AAAC,QAAC,AAAC;AACX,AAAM,2CAAC,AAAI,AAAS,oEAAC,AAAQ,UAAE,AAAI,KAAC,AAAK,MAAC,AAAI,AAAC,AAAC,AAAC,AACnD;AAAC,AACD,AAAI,uCAAC,AAAC;AACJ,AAAM,2CAAC,AAAI,AAAS,oEAAC,AAAQ,AAAC,AAAC,AACjC;AAAC,AACH;AAAC,AACD,AAAI,mCAAC,AAAC;AACJ,AAAO,wCAAC,AAAI,KAAC,AAAM,WAAK,AAAC,IAAG,AAAI,AAAG,OAAC,AAAM,SAAG,AAAI,KAAC,AAAK,MAAC,AAAI,AAAC,QAAG,AAAM,SAAG,AAAQ,0CAAC,AAAI,AAAC,QAAG,AAAI,AAAC,AAAC,AAClG;AAAC,AACH;AACA,0BAAA,AAAK,AAAC,OAAC,AAAC,AAAC,GAAC,AAAC;AACT,AAAM,mCAAC,AAAC,AAAC,AACX;AAAC,AACH;AAAC,AAAC,AACJ;AACA,kBAAA,AAAK,AAAC,OAAC,AAAC,AAAC,GAAC,AAAC;AACT,AAAM,2BAAC,AAAC,AAAC,AACX;AAAC,AACH;AAAC,AAAC,aA5Dc,AAAK;AA6DrB,AAAI,iBAAC,AAAiB,kBAAC,AAAO,SAAE,AAAM,AAAC;AACvC,AAAO,oBAAC,AAAE,GAAC,AAAO,SAAE,AAAM,AAAC;AAC3B,AAAgB,6BAAC,AAAO,SAAE,AAAM,AAAC;AACjC,AAAS,qBAAC,MAAM,AAAO,QAAC,AAAK,AAAE,AAAC,AAClC;AAAC,AAAC,AACJ,SAnES,AAAI,AAAe;AAmE3B,AACF",
  "sourcesContent": [
    "import { Socket } from \"net\"\nimport { IncomingMessage, ClientRequest, Agent } from \"http\"\nimport * as https from \"https\"\nimport { ensureDir, readFile } from \"fs-extra-p\"\nimport BluebirdPromise from \"bluebird-lst-c\"\nimport * as path from \"path\"\nimport { homedir } from \"os\"\nimport { parse as parseIni } from \"ini\"\nimport { HttpExecutor, DownloadOptions, HttpError, configurePipes,  maxRedirects } from \"electron-builder-http\"\nimport { RequestOptions } from \"https\"\nimport { safeLoad } from \"js-yaml\"\nimport { parse as parseUrl } from \"url\"\nimport { debug } from \"./util\"\n\nexport class NodeHttpExecutor extends HttpExecutor<RequestOptions, ClientRequest> {\n  private httpsAgentPromise: Promise<Agent> | null\n\n  async download(url: string, destination: string, options?: DownloadOptions | null): Promise<string> {\n    if (options == null || !options.skipDirCreation) {\n      await ensureDir(path.dirname(destination))\n    }\n\n    if (this.httpsAgentPromise == null) {\n      this.httpsAgentPromise = createAgent()\n    }\n\n    const agent = await this.httpsAgentPromise\n    return await new BluebirdPromise<string>((resolve, reject) => {\n      this.doDownload(url, destination, 0, options || {}, agent, (error: Error) => {\n        if (error == null) {\n          resolve(destination)\n        }\n        else {\n          reject(error)\n        }\n      })\n    })\n  }\n\n  private addTimeOutHandler(request: ClientRequest, callback: (error: Error) => void) {\n    request.on(\"socket\", function (socket: Socket) {\n      socket.setTimeout(60 * 1000, () => {\n        callback(new Error(\"Request timed out\"))\n        request.abort()\n      })\n    })\n  }\n\n  private doDownload(url: string, destination: string, redirectCount: number, options: DownloadOptions, agent: Agent, callback: (error: Error | null) => void) {\n    const parsedUrl = parseUrl(url)\n    // user-agent must be specified, otherwise some host can return 401 unauthorised\n    const request = https.request({\n      hostname: parsedUrl.hostname,\n      path: parsedUrl.path,\n      headers: {\n        \"User-Agent\": \"electron-builder\"\n      },\n      agent: agent,\n    }, (response: IncomingMessage) => {\n      if (response.statusCode >= 400) {\n        callback(new Error(`Cannot download \"${url}\", status ${response.statusCode}: ${response.statusMessage}`))\n        return\n      }\n\n      const redirectUrl = response.headers.location\n      if (redirectUrl != null) {\n        if (redirectCount < maxRedirects) {\n          this.doDownload(redirectUrl, destination, redirectCount++, options, agent, callback)\n        }\n        else {\n          callback(new Error(`Too many redirects (> ${maxRedirects})`))\n        }\n        return\n      }\n\n      configurePipes(options, response, destination, callback)\n    })\n    this.addTimeOutHandler(request, callback)\n    request.on(\"error\", callback)\n    request.end()\n  }\n\n\n  doApiRequest<T>(options: RequestOptions, token: string | null, requestProcessor: (request: ClientRequest, reject: (error: Error) => void) => void, redirectCount: number = 0): Promise<T> {\n    debug(`HTTPS request: ${JSON.stringify(options, null, 2)}`)\n\n    if (token != null) {\n      (<any>options.headers).authorization = token.startsWith(\"Basic\") ? token : `token ${token}`\n    }\n\n    return new BluebirdPromise<T>((resolve, reject, onCancel) => {\n      const request = https.request(options, (response: IncomingMessage) => {\n        try {\n          if (response.statusCode === 404) {\n            // error is clear, we don't need to read detailed error description\n            reject(new HttpError(response, `method: ${options.method} url: https://${options.hostname}${options.path}\n\nPlease double check that your authentication token is correct. Due to security reasons actual status maybe not reported, but 404.\n`))\n          }\n          else if (response.statusCode === 204) {\n            // on DELETE request\n            resolve()\n            return\n          }\n\n          const redirectUrl = response.headers.location\n          if (redirectUrl != null) {\n            if (redirectCount > 10) {\n              reject(new Error(\"Too many redirects (> 10)\"))\n              return\n            }\n\n            this.doApiRequest(Object.assign({}, options, parseUrl(redirectUrl)), token, requestProcessor)\n              .then(<any>resolve)\n              .catch(reject)\n\n            return\n          }\n\n          let data = \"\"\n          response.setEncoding(\"utf8\")\n          response.on(\"data\", (chunk: string) => {\n            data += chunk\n          })\n\n          response.on(\"end\", () => {\n            try {\n              const contentType = response.headers[\"content-type\"]\n              const isJson = contentType != null && contentType.includes(\"json\")\n              const isYaml = options.path!.includes(\".yml\")\n              if (response.statusCode >= 400) {\n                if (isJson) {\n                  reject(new HttpError(response, JSON.parse(data)))\n                }\n                else {\n                  reject(new HttpError(response))\n                }\n              }\n              else {\n                resolve(data.length === 0 ? null : (isJson ? JSON.parse(data) : isYaml ? safeLoad(data) : data))\n              }\n            }\n            catch (e) {\n              reject(e)\n            }\n          })\n        }\n        catch (e) {\n          reject(e)\n        }\n      })\n      this.addTimeOutHandler(request, reject)\n      request.on(\"error\", reject)\n      requestProcessor(request, reject)\n      onCancel!(() => request.abort())\n    })\n  }\n}\n\n// only https proxy\nasync function proxyFromNpm() {\n  let data = \"\"\n  try {\n    data = await readFile(path.join(homedir(), \".npmrc\"), \"utf-8\")\n  }\n  catch (ignored) {\n    return null\n  }\n\n  if (!data) {\n    return null\n  }\n\n  try {\n    const config = parseIni(data)\n    return config[\"https-proxy\"] || config.proxy\n  }\n  catch (e) {\n    // used in nsis auto-updater, do not use .util.warn here\n    console.warn(e)\n    return null\n  }\n}\n\n// only https url\nasync function createAgent() {\n  let proxyString: string =\n    process.env.npm_config_https_proxy ||\n    process.env.HTTPS_PROXY || process.env.https_proxy ||\n    process.env.npm_config_proxy\n\n  if (!proxyString) {\n    proxyString = await proxyFromNpm()\n    if (!proxyString) {\n      return null\n    }\n  }\n\n  const proxy = parseUrl(proxyString)\n\n  const proxyProtocol = proxy.protocol === \"https:\" ? \"Https\" : \"Http\"\n  return require(\"tunnel-agent\")[`httpsOver${proxyProtocol}`]({\n    proxy: {\n      port: proxy.port || (proxyProtocol === \"Https\" ? 443 : 80),\n      host: proxy.hostname,\n      proxyAuth: proxy.auth\n    }\n  })\n}\n\n"
  ]
}
