{
  "version": 3,
  "file": "fs.js",
  "sourceRoot": "",
  "sources": [
    "../../src/util/fs.ts"
  ],
  "names": [],
  "mappings": ";;;;;;;;;;;;;;;;;;;;sEAiBO,AAAK,WAAqB,AAAY;AAC3C,YAAI,AAAC;AACH,AAAM,mBAAC,MAAM,AAAI,0CAAC,AAAI,AAAC,AACzB;AACA,UAAA,AAAK,AAAC,OAAC,AAAC,AAAC,GAAC,AAAC;AACT,AAAE,AAAC,gBAAC,AAAC,EAAC,AAAI,SAAK,AAAQ,AAAC,UAAC,AAAC;AACxB,AAAM,uBAAC,AAAI,AACb;AAAC,AACD,AAAI,mBAAC,AAAC;AACJ,sBAAM,AAAC,AACT;AAAC,AACH;AAAC,AACH;AAAC,AAED,AAAM;;;;;;;;uEAAC,AAAK,WAAiB,AAAY;AACvC,YAAI,AAAC;AACH,kBAAM,AAAM,4CAAC,AAAI,AAAC;AAClB,AAAM,mBAAC,AAAI,AACb;AACA,UAAA,AAAK,AAAC,OAAC,AAAC,AAAC,GAAC,AAAC;AACT,AAAM,mBAAC,AAAK,AACd;AAAC,AACH;AAAC,AAED,AAAM;;;;;;;;uEAAC,AAAK,WAAe,AAAsB,gBAAE,AAAsB,QAAE,AAA6D;AACtI,cAAM,AAAM,SAAkB,AAAE;AAChC,cAAM,AAAK,QAAkB,CAAC,AAAc,AAAC;AAC7C,YAAI,AAAc,iBAAG,AAAK;AAC1B,eAAO,AAAK,MAAC,AAAM,SAAG,AAAC,GAAE,AAAC;AACxB,kBAAM,AAAO,UAAG,AAAK,MAAC,AAAG,AAAG;AAC5B,AAAE,AAAC,gBAAC,AAAc,AAAC,gBAAC,AAAC;AACnB,AAAM,uBAAC,AAAI,KAAC,AAAO,AAAC,AACtB;AAAC,AACD,AAAI,mBAAC,AAAC;AACJ,AAAc,iCAAG,AAAI,AACvB;AAAC;AAED,kBAAM,AAAU,aAAG,MAAM,AAAO,6CAAC,AAAO,AAAC;AACzC,AAAU,uBAAC,AAAI,AAAE;AAEjB,kBAAM,AAAI,OAAkB,AAAE;AAC9B,oEAAsB,AAAG,IAAC,AAAU,YAAE,AAAI;AACxC,sBAAM,AAAQ,WAAG,AAAO,UAAG,AAAI,MAAC,AAAG,MAAG,AAAI;AAC1C,AAAM,kEAAO,AAAQ,AAAC,UACnB,AAAI,KAAC,AAAI;AACR,AAAE,AAAC,wBAAC,AAAM,UAAI,AAAI,QAAI,CAAC,AAAM,OAAC,AAAQ,UAAE,AAAI,AAAC,AAAC,OAAC,AAAC;AAC9C,AAAM,AACR;AAAC;AAED,AAAE,AAAC,wBAAC,AAAI,KAAC,AAAW,AAAE,AAAC,eAAC,AAAC;AACvB,AAAI,6BAAC,AAAI,KAAC,AAAQ,AAAC,AACrB;AAAC,AACD,AAAI,2BAAC,AAAC;AACJ,AAAM,+BAAC,AAAI,KAAC,AAAQ,AAAC,AACvB;AAAC;AAED,AAAM,2BAAC,AAAQ,YAAI,AAAI,OAAG,AAAI,OAAG,AAAQ,SAAC,AAAQ,UAAE,AAAI,MAAE,AAAO,AAAC,AACpE;AAAC,AAAC,AACN,iBAfS,AAAK;AAeb,aAjBK,AAAe,EAiBlB,AAAW,AAAC;AAEf,AAAG,AAAC,iBAAC,IAAI,AAAC,IAAG,AAAI,KAAC,AAAM,SAAG,AAAC,GAAE,AAAC,IAAG,CAAC,AAAC,GAAE,AAAC,AAAE,KAAE,AAAC;AAC1C,AAAK,sBAAC,AAAI,KAAC,AAAI,KAAC,AAAC,AAAC,AAAC,AACrB;AAAC,AACH;AAAC;AAED,AAAM,eAAC,AAAM,AACf;AAAC;;;;;;;;;;;;;AAnFD,AAAO,AAAE,AAAM,AAAE,AAAM,AAAE,AAAI,AAAS,AAAK,AAAE,AAAO,AAAE,AAAgB,AAAE,AAAiB,AAAE,AAAI,AAAE,AAAM,AAAE,AAAQ,AAAE,AAAO,AAAE,AAAM,AAAY,AAC9I,AAAO,AAAe,AAAM,AAAgB;;;;AAC5C,AAAO,AAAK,AAAI,AAAM,AAAM;;;;AAC5B,AAAO,AAAE,AAAK,AAAE,AAAM,AAAQ;;;;;;AAC9B,AAAO,AAAI,AAAM,AAAO;;;;;;AACxB,AAAO,AAAI,AAAM,AAAW,AAE5B,AAAM;;;;;;;;AAAC,MAAM,AAAiB,gDAAG,AAAC,AAClC,AAAM;AAAC,MAAM,AAAW,oCAAG,EAAC,AAAW,aAAE,AAAiB,AAAC,AAI3D,AAAM;wBAAyB,AAAY;AACzC,AAAM,WAAC,AAAM,4CAAC,AAAI,AAAC,MAChB,AAAK,MAAC,MAAmB,CAAC,AAAC,AAChC;AAAC,AAED,AAAM;;AAoEN,MAAM,AAAc,iBAAG,AAAO,QAAC,AAAQ,YAAI,AAAO,WAAI,AAAO,QAAC,AAAG,IAAC,AAAc,mBAAK,AAAO,AAAI,YAAC,AAAI,mCAAI,AAAO,QAAC,AAAG,IAAC,AAAc,mBAAK,AAAM,AAAC;AAE/I,AAGG,AACH,AAAM;;;;kBAAmB,AAAW,KAAE,AAAY,MAAE,AAAoB;QAAE,AAAa,oFAAG,AAAc;;AACtG,AAAE,AAAC,QAAC,AAAK,SAAI,AAAI,AAAC,MAAC,AAAC;AAClB,cAAM,AAAkB,qBAAG,AAAK,MAAC,AAAI;AACrC,cAAM,AAAI,OAAG,AAAI,AAAI,4CAAC,AAAK,AAAC;AAC5B,AAAE,AAAC,YAAC,AAAI,KAAC,AAAK,MAAC,AAAO,AAAC,SAAC,AAAC;AACvB,AAAI,iBAAC,AAAK,MAAC,AAAO,UAAG,AAAI;AACzB,AAAI,iBAAC,AAAM,OAAC,AAAO,UAAG,AAAI,AAC5B;AAAC;AAED,AAAI,aAAC,AAAK,MAAC,AAAI,OAAG,AAAI;AACtB,AAAI,aAAC,AAAM,OAAC,AAAI,OAAG,AAAI;AAEvB,AAAE,AAAC,YAAC,AAAkB,uBAAK,AAAK,MAAC,AAAI,AAAC,MAAC,AAAC;AACtC,AAAE,AAAC,gBAAC,AAAK,8BAAC,AAAO,AAAC,SAAC,AAAC;AAClB,sBAAM,AAAO,UAAG,AAAI,AAAI,4CAAC,AAAM,OAAC,AAAM,OAAC,AAAE,IAAE,AAAK,OAAE,EAAC,AAAI,MAAE,AAAkB,AAAC,AAAC,AAAC;AAC9E,AAAK,AAAC,uDAAG,AAAI,iCAA2B,AAAO,QAAC,AAAO,AAAE,gBAAK,AAAO,QAAC,AAAQ,AAAE,oBAAQ,AAAI,KAAC,AAAO,AAAE,gBAAK,AAAI,KAAC,AAAQ,AAAE,UAAG,AAAC,AAChI;AAAC;AAED,AAAuE;AACvE,AAA+G;AAC/G,AAA4I;AAC5I,AAAE,AAAC,gBAAC,AAAa,AAAC,eAAC,AAAC;AAClB,AAAa,gCAAG,AAAK;AACrB,AAAK,AAAC,uDAAG,AAAI,IAA4E,AAAC,AAC5F;AAAC,AACH;AAAC,AACH;AAAC;AAED,AAAE,AAAC,QAAC,AAAa,AAAC,eAAC,AAAC;AAClB,AAAM,eAAC,AAAI,0CAAC,AAAG,KAAE,AAAI,AAAC,AACxB;AAAC;AAED,AAAM,iEAAqB,UAAU,AAAO,SAAE,AAAM;AAClD,cAAM,AAAU,aAAG,AAAgB,sDAAC,AAAG,AAAC;AACxC,cAAM,AAAW,cAAG,AAAiB,uDAAC,AAAI,MAAE,AAAK,SAAI,AAAI,OAAG,AAAS,YAAG,EAAC,AAAI,MAAE,AAAK,MAAC,AAAI,AAAC,AAAC;AAE3F,AAAU,mBAAC,AAAE,GAAC,AAAO,SAAE,AAAM,AAAC;AAC9B,AAAW,oBAAC,AAAE,GAAC,AAAO,SAAE,AAAM,AAAC;AAE/B,AAAW,oBAAC,AAAE,GAAC,AAAM,QAAE;AACrB,AAAU,uBAAC,AAAI,KAAC,AAAW,AAAC,AAC9B;AAAC,AAAC;AAEF,AAAW,oBAAC,AAAI,KAAC,AAAQ,UAAE,AAAO,AAAC,AACrC;AAAC,AAAC,AACJ,KAbS,AAAI,AAAe;AAa3B,AAED,AAAM;;AACJ,gBAAoB,AAAiD;YAAU,oFAAgB,AAAc;;AAAzF,aAAqB,wBAArB,AAAqB,AAA4B;AAAU,aAAa,gBAAb,AAAa,AAAiB,AAC7G;AAAC;AAEK,AAAI,QAAV,AAAK,CAAM,AAAW,KAAE,AAAY,MAAE,AAAuB;;;;AAC3D,gBAAI,AAAC;AACH,sBAAM,AAAQ,SAAC,AAAG,KAAE,AAAI,MAAE,AAAI,MAAG,CAAC,AAAI,MAAC,AAAa,iBAAI,AAAI,MAAC,AAAqB,yBAAI,AAAI,AAAC,IAA3D,GAA8D,AAAI,MAAC,AAAa,gBAAG,AAAI,MAAC,AAAqB,sBAAC,AAAI,AAAC,AAAC,AACtJ;AACA,cAAA,AAAK,AAAC,OAAC,AAAC,AAAC,GAAC,AAAC;AACT,AAA4K;AAC5K,AAAE,AAAC,oBAAC,AAAC,EAAC,AAAI,SAAK,AAAO,AAAC,SAAC,AAAC;AACvB,AAAwD;AACxD,AAAE,AAAC,wBAAC,AAAI,MAAC,AAAa,AAAC,eAAC,AAAC;AACvB,AAAK,AAAC,4FAAgC,AAAC,CAAE,AAAC;AAC1C,AAAI,8BAAC,AAAa,gBAAG,AAAK,AAC5B;AAAC;AAED,0BAAM,AAAQ,SAAC,AAAG,KAAE,AAAI,MAAE,AAAI,MAAE,AAAK,AAAC,AACxC;AAAC,AACD,AAAI,uBAAC,AAAC;AACJ,0BAAM,AAAC,AACT;AAAC,AACH;AAAC,AACH;;AAAC,AACF;;iCAED,AAGG,AACH,AAAM;;;;;iBAAkB,AAAW,KAAE,AAAmB,aAAE,AAAe,QAAE,AAAyC;AAClH,AAAE,AAAC,QAAC,AAAK,8BAAC,AAAO,AAAC,SAAC,AAAC;AAClB,AAAK,AAAC,uDAAW,AAAG,YAAO,AAAW,gBAAG,AAAc,iBAAG,AAAmB,sBAAG,AAAE,EAAE,AAAC,AACvF;AAAC;AAED,UAAM,AAAiB,oBAAG,IAAI,AAAG,AAAU;AAC3C,UAAM,AAAU,aAAG,IAAI,AAAU,WAAC,AAAa,AAAC;AAChD,UAAM,AAAK,QAAgB,AAAE;AAC7B,AAAM,gBAAM,AAAG,KAAE,AAAM;AAAhB,AAAI,2EAAc,AAAK,WAAC,AAAI,MAAE,AAAI,MAAE,AAAM;AAC/C,AAAE,AAAC,gBAAC,CAAC,AAAI,KAAC,AAAM,AAAE,YAAI,CAAC,AAAI,KAAC,AAAc,AAAE,AAAC,kBAAC,AAAC;AAC7C,AAAM,AACR;AAAC;AAED,AAAE,AAAC,gBAAC,CAAC,AAAiB,kBAAC,AAAG,IAAC,AAAM,AAAC,AAAC,SAAC,AAAC;AACnC,sBAAM,AAAM,4CAAC,AAAM,OAAC,AAAO,QAAC,AAAG,KAAE,AAAW,AAAC,AAAC;AAC9C,AAAiB,kCAAC,AAAG,IAAC,AAAM,AAAC,AAC/B;AAAC;AAED,kBAAM,AAAQ,WAAG,AAAI,KAAC,AAAO,QAAC,AAAG,KAAE,AAAW,AAAC;AAC/C,AAAE,AAAC,gBAAC,AAAI,KAAC,AAAM,AAAE,AAAC,UAAC,AAAC;AAClB,sBAAM,AAAU,WAAC,AAAI,KAAC,AAAI,MAAE,AAAQ,UAAE,AAAI,AAAC,AAC7C;AAAC,AACD,AAAI,mBAAC,AAAC;AACJ,AAAK,sBAAC,AAAI,KAAC,EAAC,AAAM,QAAE,AAAQ,UAAE,AAAM,QAAE,MAAM,AAAQ,8CAAC,AAAI,AAAC,AAAC,AAAC,AAC9D;AAAC,AACH;AAAC,AAAC;;;;;UACC,AAAI,KAAC,MAAM,AAAe,kDAAC,AAAG,IAAC,AAAK,OAAE,AAAE,MAAI,AAAO,6CAAC,AAAE,GAAC,AAAI,MAAE,AAAE,GAAC,AAAI,AAAC,OAAE,AAAW,AAAC,AAAC,AACzF;AAAC",
  "sourcesContent": [
    "import { unlink, access, stat, Stats, lstat, readdir, createReadStream, createWriteStream, link, mkdirs, readlink, symlink } from \"fs-extra-p\"\nimport BluebirdPromise from \"bluebird-lst-c\"\nimport * as path from \"path\"\nimport { debug } from \"./util\"\nimport isCi from \"is-ci\"\nimport Mode from \"stat-mode\"\n\nexport const MAX_FILE_REQUESTS = 8\nexport const CONCURRENCY = {concurrency: MAX_FILE_REQUESTS}\n\nexport type Filter = (file: string, stat: Stats) => boolean\n\nexport function unlinkIfExists(file: string) {\n  return unlink(file)\n    .catch(() => {/* ignore */})\n}\n\nexport async function statOrNull(file: string): Promise<Stats | null> {\n  try {\n    return await stat(file)\n  }\n  catch (e) {\n    if (e.code === \"ENOENT\") {\n      return null\n    }\n    else {\n      throw e\n    }\n  }\n}\n\nexport async function exists(file: string): Promise<boolean> {\n  try {\n    await access(file)\n    return true\n  }\n  catch (e) {\n    return false\n  }\n}\n\nexport async function walk(initialDirPath: string, filter?: Filter | null, consumer?: (file: string, stat: Stats, parent: string) => any): Promise<Array<string>> {\n  const result: Array<string> = []\n  const queue: Array<string> = [initialDirPath]\n  let addDirToResult = false\n  while (queue.length > 0) {\n    const dirPath = queue.pop()!\n    if (addDirToResult) {\n      result.push(dirPath)\n    }\n    else {\n      addDirToResult = true\n    }\n\n    const childNames = await readdir(dirPath)\n    childNames.sort()\n\n    const dirs: Array<string> = []\n    await BluebirdPromise.map(childNames, name => {\n      const filePath = dirPath + path.sep + name\n      return lstat(filePath)\n        .then(stat => {\n          if (filter != null && !filter(filePath, stat)) {\n            return\n          }\n\n          if (stat.isDirectory()) {\n            dirs.push(filePath)\n          }\n          else {\n            result.push(filePath)\n          }\n\n          return consumer == null ? null : consumer(filePath, stat, dirPath)\n        })\n    }, CONCURRENCY)\n\n    for (let i = dirs.length - 1; i > -1; i--) {\n      queue.push(dirs[i])\n    }\n  }\n\n  return result\n}\n\nconst _isUseHardLink = process.platform != \"win32\" && process.env.USE_HARD_LINKS !== \"false\" && (isCi || process.env.USE_HARD_LINKS === \"true\")\n\n/**\n * Hard links is used if supported and allowed.\n * File permission is fixed â€” allow execute for all if owner can, allow read for all if owner can.\n */\nexport function copyFile(src: string, dest: string, stats?: Stats | null, isUseHardLink = _isUseHardLink): Promise<any> {\n  if (stats != null) {\n    const originalModeNumber = stats.mode\n    const mode = new Mode(stats)\n    if (mode.owner.execute) {\n      mode.group.execute = true\n      mode.others.execute = true\n    }\n\n    mode.group.read = true\n    mode.others.read = true\n\n    if (originalModeNumber !== stats.mode) {\n      if (debug.enabled) {\n        const oldMode = new Mode(Object.assign({}, stats, {mode: originalModeNumber}))\n        debug(`${dest} permissions fixed from ${oldMode.toOctal()} (${oldMode.toString()}) to ${mode.toOctal()} (${mode.toString()})`)\n      }\n\n      // https://helgeklein.com/blog/2009/05/hard-links-and-permissions-acls/\n      // Permissions on all hard links to the same data on disk are always identical. The same applies to attributes.\n      // That means if you change the permissions/owner/attributes on one hard link, you will immediately see the changes on all other hard links.\n      if (isUseHardLink) {\n        isUseHardLink = false\n        debug(`${dest} will be copied, but not linked, because file permissions need to be fixed`)\n      }\n    }\n  }\n\n  if (isUseHardLink) {\n    return link(src, dest)\n  }\n\n  return new BluebirdPromise(function (resolve, reject) {\n    const readStream = createReadStream(src)\n    const writeStream = createWriteStream(dest, stats == null ? undefined : {mode: stats.mode})\n\n    readStream.on(\"error\", reject)\n    writeStream.on(\"error\", reject)\n\n    writeStream.on(\"open\", function () {\n      readStream.pipe(writeStream)\n    })\n\n    writeStream.once(\"finish\", resolve)\n  })\n}\n\nexport class FileCopier {\n  constructor(private isUseHardLinkFunction?: (file: string) => boolean, private isUseHardLink = _isUseHardLink) {\n  }\n\n  async copy(src: string, dest: string, stat: Stats | undefined) {\n    try {\n      await copyFile(src, dest, stat, (!this.isUseHardLink || this.isUseHardLinkFunction == null) ? this.isUseHardLink : this.isUseHardLinkFunction(dest))\n    }\n    catch (e) {\n      // files are copied concurrently, so, we must not check here currentIsUseHardLink â€” our code can be executed after that other handler will set currentIsUseHardLink to false\n      if (e.code === \"EXDEV\") {\n        // ...but here we want to avoid excess debug log message\n        if (this.isUseHardLink) {\n          debug(`Cannot copy using hard link: ${e}`)\n          this.isUseHardLink = false\n        }\n\n        await copyFile(src, dest, stat, false)\n      }\n      else {\n        throw e\n      }\n    }\n  }\n}\n\n/**\n * Empty directories is never created.\n * Hard links is used if supported and allowed.\n */\nexport function copyDir(src: string, destination: string, filter?: Filter, isUseHardLink?: (file: string) => boolean): Promise<any> {\n  if (debug.enabled) {\n    debug(`Copying ${src} to ${destination}${_isUseHardLink ? \" using hard links\" : \"\"}`)\n  }\n\n  const createdSourceDirs = new Set<string>()\n  const fileCopier = new FileCopier(isUseHardLink)\n  const links: Array<Link> = []\n  return walk(src, filter, async(file, stat, parent) => {\n    if (!stat.isFile() && !stat.isSymbolicLink()) {\n      return\n    }\n\n    if (!createdSourceDirs.has(parent)) {\n      await mkdirs(parent.replace(src, destination))\n      createdSourceDirs.add(parent)\n    }\n\n    const destFile = file.replace(src, destination)\n    if (stat.isFile()) {\n      await fileCopier.copy(file, destFile, stat)\n    }\n    else {\n      links.push({\"file\": destFile, \"link\": await readlink(file)})\n    }\n  })\n    .then(() => BluebirdPromise.map(links, it => symlink(it.link, it.file), CONCURRENCY))\n}\n\ninterface Link {\n  readonly link: string,\n  readonly file: string\n}"
  ]
}
