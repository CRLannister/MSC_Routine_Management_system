{
  "version": 3,
  "file": "metadata.js",
  "sourceRoot": "",
  "sources": [
    "../src/metadata.ts"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "import { AsarOptions } from \"asar-electron-builder\"\nimport { PlatformPackager } from \"./platformPackager\"\nimport { MacOptions, DmgOptions, MasBuildOptions } from \"./options/macOptions\"\nimport { Publish } from \"electron-builder-http/out/publishOptions\"\nimport { WinBuildOptions, NsisOptions, SquirrelWindowsOptions, AppXOptions } from \"./options/winOptions\"\nimport { LinuxBuildOptions, SnapOptions } from \"./options/linuxOptions\"\n\nexport interface Metadata {\n  readonly repository?: string | RepositoryInfo | null\n\n  dependencies?: { [key: string]: string }\n}\n\n/*\n # Application `package.json`\n */\nexport interface AppMetadata extends Metadata {\n  readonly version?: string\n\n  /*\n   The application name.\n   */\n  readonly name: string\n\n  /*\n   As [name](#AppMetadata-name), but allows you to specify a product name for your executable which contains spaces and other special characters\n   not allowed in the [name property](https://docs.npmjs.com/files/package.json#name}).\n   */\n  readonly productName?: string | null\n\n  /*\n   The application description.\n   */\n  readonly description?: string\n\n  readonly main?: string | null\n\n  readonly author?: AuthorMetadata\n\n  /*\n   The url to the project [homepage](https://docs.npmjs.com/files/package.json#homepage) (NuGet Package `projectUrl` (optional) or Linux Package URL (required)).\n\n   If not specified and your project repository is public on GitHub, it will be `https://github.com/${user}/${project}` by default.\n   */\n  readonly homepage?: string | null\n\n  /*\n   *linux-only.* The [license](https://docs.npmjs.com/files/package.json#license) name.\n   */\n  readonly license?: string | null\n}\n\n/*\n # Development `package.json`\n */\nexport interface DevMetadata extends Metadata {\n  /*\n   See [.build](#BuildMetadata).\n   */\n  readonly build: BuildMetadata\n}\n\nexport interface RepositoryInfo {\n  readonly url: string\n}\n\nexport interface AuthorMetadata {\n  readonly name: string\n  readonly email?: string\n}\n\nexport type CompressionLevel = \"store\" | \"normal\" | \"maximum\"\n\n/*\n ## `.build`\n */\nexport interface BuildMetadata {\n  /*\n  The application id. Used as\n  [CFBundleIdentifier](https://developer.apple.com/library/ios/documentation/General/Reference/InfoPlistKeyReference/Articles/CoreFoundationKeys.html#//apple_ref/doc/uid/20001431-102070) for MacOS and as\n  [Application User Model ID](https://msdn.microsoft.com/en-us/library/windows/desktop/dd378459(v=vs.85).aspx) for Windows (NSIS target only, Squirrel.Windows not supported).\n\n  Defaults to `com.electron.${name}`. It is strongly recommended that an explicit ID be set.\n   */\n  readonly appId?: string | null\n\n  /*\n  The human-readable copyright line for the app. Defaults to `Copyright Â© year author`.\n   */\n  readonly copyright?: string | null\n\n  // deprecated\n  readonly iconUrl?: string | null\n\n  /*\n   See [AppMetadata.productName](#AppMetadata-productName).\n   */\n  readonly productName?: string | null\n\n  /**\n   A [glob patterns](https://www.npmjs.com/package/glob#glob-primer) relative to the [app directory](#MetadataDirectories-app), which specifies which files to include when copying files to create the package.\n\n   See [File Patterns](#multiple-glob-patterns).\n   */\n  readonly files?: Array<string> | string | null\n\n  /*\n   A [glob patterns](https://www.npmjs.com/package/glob#glob-primer) relative to the project directory, when specified, copy the file or directory with matching names directly into the app's resources directory (`Contents/Resources` for MacOS, `resources` for Linux/Windows).\n\n   Glob rules the same as for [files](#multiple-glob-patterns).\n   */\n  readonly extraResources?: Array<string> | string | null\n\n  /*\n   The same as [extraResources](#BuildMetadata-extraResources) but copy into the app's content directory (`Contents` for MacOS, root directory for Linux/Windows).\n   */\n  readonly extraFiles?: Array<string> | string | null\n\n  /*\n  Whether to package the application's source code into an archive, using [Electron's archive format](http://electron.atom.io/docs/tutorial/application-packaging/). Defaults to `true`.\n  Node modules, that must be unpacked, will be detected automatically, you don't need to explicitly set [asarUnpack](#BuildMetadata-asarUnpack) - please file issue if this doesn't work.\n\n  Or you can pass object of asar options.\n  */\n  readonly asar?: AsarOptions | boolean | null\n\n  /**\n   A [glob patterns](https://www.npmjs.com/package/glob#glob-primer) relative to the [app directory](#MetadataDirectories-app), which specifies which files to unpack when creating the [asar](http://electron.atom.io/docs/tutorial/application-packaging/) archive.\n   */\n  readonly asarUnpack?: Array<string> | string | null\n\n  /*\n  The file associations. See [.build.fileAssociations](#FileAssociation).\n   */\n  readonly fileAssociations?: Array<FileAssociation> | FileAssociation\n\n  /*\n  The URL protocol scheme(s) to associate the app with. See [.build.protocol](#Protocol).\n  */\n  readonly protocols?: Array<Protocol> | Protocol\n\n  /*\n   See [.build.mac](#MacOptions).\n   */\n  readonly mac?: MacOptions | null\n\n  /*\n   See [.build.dmg](#DmgOptions).\n   */\n  readonly dmg?: DmgOptions | null\n\n  /*\n   See [.build.mas](#MasBuildOptions).\n   */\n  readonly mas?: MasBuildOptions | null\n\n  /*\n   See [.build.win](#WinBuildOptions).\n   */\n  readonly win?: WinBuildOptions  | null\n\n  /*\n   See [.build.nsis](#NsisOptions).\n   */\n  readonly nsis?: NsisOptions  | null\n\n  /*\n   See [.build.squirrelWindows](#SquirrelWindowsOptions).\n   */\n  readonly squirrelWindows?: SquirrelWindowsOptions  | null\n\n  /*\n   See [.build.appx](#AppXOptions).\n   */\n  readonly appx?: AppXOptions  | null\n\n  /*\n   See [.build.linux](#LinuxBuildOptions).\n   */\n  readonly linux?: LinuxBuildOptions | null\n\n  readonly deb?: LinuxBuildOptions | null\n\n  /*\n   See [.build.snap](#SnapOptions).\n   */\n  readonly snap?: SnapOptions | null\n\n  /*\n   The compression level, one of `store`, `normal`, `maximum` (default: `normal`). If you want to rapidly test build, `store` can reduce build time significantly.\n   */\n  readonly compression?: CompressionLevel | null\n\n  /*\n   *programmatic API only* The function to be run after pack (but before pack into distributable format and sign). Promise must be returned.\n   */\n  readonly afterPack?: (context: AfterPackContext) => Promise<any> | null\n\n  /*\n   Whether to [rebuild](https://docs.npmjs.com/cli/rebuild) native dependencies (`npm rebuild`) before starting to package the app. Defaults to `true`.\n   */\n  readonly npmRebuild?: boolean\n\n  /*\n   Whether to omit using [--build-from-source](https://github.com/mapbox/node-pre-gyp#options) flag when installing app native deps. Defaults to `false`.\n   */\n  readonly npmSkipBuildFromSource?: boolean\n\n  /*\n   Additional command line arguments to use when installing app native deps. Defaults to `null`.\n   */\n  readonly npmArgs?: Array<string> | string | null\n\n  /*\n   Whether to execute `node-gyp rebuild` before starting to package the app. Defaults to `false`.\n   */\n  readonly nodeGypRebuild?: boolean\n\n  /*\n  The path to custom Electron build (e.g. `~/electron/out/R`). Only macOS supported, file issue if need for Linux or Windows.\n   */\n  readonly electronDist?: string\n\n  /*\n  The [electron-download](https://github.com/electron-userland/electron-download#usage) options.\n   */\n  readonly electronDownload?: any\n\n  readonly icon?: string | null\n\n  // deprecated\n  readonly \"app-bundle-id\"?: string | null\n\n  /*\n  See [.build.publish](#PublishConfiguration).\n   */\n  readonly publish?: Publish\n\n  /*\n  Whether to fail if application will be not signed (to prevent unsigned app if code signing configuration is not correct).\n   */\n  readonly forceCodeSigning?: boolean\n\n  /*\n   See [.directories](#MetadataDirectories)\n   */\n  readonly directories?: MetadataDirectories | null\n}\n\nexport interface AfterPackContext {\n  readonly appOutDir: string\n\n  // deprecated\n  readonly options: any\n\n  readonly packager: PlatformPackager<any>\n}\n\n/*\n ### `.build.fileAssociations`\n\n macOS and NSIS only. Array of option objects.\n */\nexport interface FileAssociation {\n  /*\n  The extension (minus the leading period). e.g. `png`.\n   */\n  readonly ext: string | Array<string>\n\n  /*\n   The name. e.g. `PNG`.\n   */\n  readonly name: string\n\n  /*\n   *windows-only.* The description.\n   */\n  readonly description?: string\n\n  /*\n   The path to icon (`.icns` for MacOS and `.ico` for Windows), relative to `build` (build resources directory). Defaults to `${firstExt}.icns`/`${firstExt}.ico` (if several extensions specified, first is used) or to application icon.\n   */\n  readonly icon?: string\n\n  /*\n  *macOS-only* The appâs role with respect to the type. The value can be `Editor`, `Viewer`, `Shell`, or `None`. Defaults to `Editor`. Corresponds to `CFBundleTypeRole`.\n   */\n  readonly role?: string\n\n  /*\n  *macOS-only* Whether the document is distributed as a bundle. If set to true, the bundle directory is treated as a file. Corresponds to `LSTypeIsPackage`.\n   */\n  readonly isPackage?: boolean\n}\n\n/*\n ### `.build.protocols`\n\n macOS only.\n\n Please note â on macOS [you need to register an `open-url` event handler](http://electron.atom.io/docs/api/app/#event-open-url-macos).\n */\nexport interface Protocol {\n  /*\n   The name. e.g. `IRC server URL`.\n   */\n  readonly name: string\n\n  /*\n  *macOS-only* The appâs role with respect to the type. The value can be `Editor`, `Viewer`, `Shell`, or `None`. Defaults to `Editor`.\n  */\n  readonly role?: string\n\n  /*\n  The schemes. e.g. `[\"irc\", \"ircs\"]`.\n  */\n  readonly schemes: Array<string>\n}\n\n/*\n ## `.directories`\n */\nexport interface MetadataDirectories {\n  /*\n   The path to build resources, defaults to `build`.\n   */\n  readonly buildResources?: string | null\n\n  /*\n   The output directory, defaults to `dist`.\n   */\n  readonly output?: string | null\n\n  /*\n   The application directory (containing the application package.json), defaults to `app`, `www` or working directory.\n   */\n  readonly app?: string | null\n}\n\nexport interface PlatformSpecificBuildOptions {\n  readonly files?: Array<string> | null\n  readonly extraFiles?: Array<string> | null\n  readonly extraResources?: Array<string> | null\n\n  readonly asarUnpack?: Array<string> | null\n\n  readonly asar?: AsarOptions | boolean\n\n  readonly target?: Array<string> | null\n\n  readonly icon?: string | null\n\n  readonly fileAssociations?: Array<FileAssociation> | FileAssociation\n\n  readonly publish?: Publish\n\n  readonly forceCodeSigning?: boolean\n}\n\nexport class Platform {\n  static MAC = new Platform(\"mac\", \"mac\", \"darwin\")\n  static LINUX = new Platform(\"linux\", \"linux\", \"linux\")\n  static WINDOWS = new Platform(\"windows\", \"win\", \"win32\")\n\n  // deprecated\n  //noinspection JSUnusedGlobalSymbols\n  static OSX = Platform.MAC\n\n  constructor(public name: string, public buildConfigurationKey: string, public nodeName: string) {\n  }\n\n  toString() {\n    return this.name\n  }\n\n  createTarget(type?: string | Array<string> | null, ...archs: Array<Arch>): Map<Platform, Map<Arch, Array<string>>> {\n    const archToType = new Map()\n    if (this === Platform.MAC) {\n      archs = [Arch.x64]\n    }\n\n    for (const arch of (archs == null || archs.length === 0 ? [archFromString(process.arch)] : archs)) {\n      archToType.set(arch, type == null ? [] : (Array.isArray(type) ? type : [type]))\n    }\n    return new Map([[this, archToType]])\n  }\n\n  static current(): Platform {\n    return Platform.fromString(process.platform)\n  }\n\n  static fromString(name: string): Platform {\n    name = name.toLowerCase()\n    switch (name) {\n      case Platform.MAC.nodeName:\n      case Platform.MAC.name:\n        return Platform.MAC\n\n      case Platform.WINDOWS.nodeName:\n      case Platform.WINDOWS.name:\n      case Platform.WINDOWS.buildConfigurationKey:\n        return Platform.WINDOWS\n\n      case Platform.LINUX.nodeName:\n        return Platform.LINUX\n\n      default:\n        throw new Error(`Unknown platform: ${name}`)\n    }\n  }\n}\n\nexport enum Arch {\n  ia32, x64, armv7l\n}\n\nexport function toLinuxArchString(arch: Arch) {\n  return arch === Arch.ia32 ? \"i386\" : (arch === Arch.x64 ? \"amd64\" : \"armv7l\")\n}\n\nexport function archFromString(name: string): Arch {\n  if (name === \"x64\") {\n    return Arch.x64\n  }\n  if (name === \"ia32\") {\n    return Arch.ia32\n  }\n  if (name === \"armv7l\") {\n    return Arch.armv7l\n  }\n\n  throw new Error(`Unsupported arch ${name}`)\n}"
  ]
}
