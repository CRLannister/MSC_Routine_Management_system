{
  "version": 3,
  "file": "winOptions.js",
  "sourceRoot": "",
  "sources": [
    "../../src/options/winOptions.ts"
  ],
  "names": [],
  "mappings": "",
  "sourcesContent": [
    "import { PlatformSpecificBuildOptions } from \"../metadata\"\n\n/*\n ### `.build.win`\n\n Windows specific build options.\n */\nexport interface WinBuildOptions extends PlatformSpecificBuildOptions {\n  /*\n   Target package type: list of `nsis`, `appx`, `squirrel`, `7z`, `zip`, `tar.xz`, `tar.lz`, `tar.gz`, `tar.bz2`, `dir`. Defaults to `nsis`.\n\n   AppX package can be built only on Windows 10.\n  */\n  readonly target?: Array<string> | null\n\n  /*\n   Array of signing algorithms used. Defaults to `['sha1', 'sha256']`\n\n   For AppX `sha256` is always used.\n   */\n  readonly signingHashAlgorithms?: Array<string> | null\n\n  /*\n   The path to application icon. Defaults to `build/icon.ico` (consider using this convention instead of complicating your configuration).\n   */\n  readonly icon?: string | null\n\n  /*\n  The trademarks and registered trademarks.\n   */\n  readonly legalTrademarks?: string | null\n\n  /*\n  The path to the *.pfx certificate you want to sign with. Please use it only if you cannot use env variable `CSC_LINK` (`WIN_CSC_LINK`) for some reason.\n  Please see [Code Signing](https://github.com/electron-userland/electron-builder/wiki/Code-Signing).\n   */\n  readonly certificateFile?: string\n\n  /*\n  The password to the certificate provided in `certificateFile`. Please use it only if you cannot use env variable `CSC_KEY_PASSWORD` (`WIN_CSC_KEY_PASSWORD`) for some reason.\n  Please see [Code Signing](https://github.com/electron-userland/electron-builder/wiki/Code-Signing).\n   */\n  readonly certificatePassword?: string\n\n  /*\n  The name of the subject of the signing certificate. Required only for EV Code Signing and works only on Windows.\n   */\n  readonly certificateSubjectName?: string\n\n  /*\n  The URL of the RFC 3161 time stamp server. Defaults to `http://timestamp.comodoca.com/rfc3161`.\n   */\n  readonly rfc3161TimeStampServer?: string\n\n  /*\n  The URL of the time stamp server. Defaults to `http://timestamp.verisign.com/scripts/timstamp.dll`.\n   */\n  readonly timeStampServer?: string\n}\n\n/*\n ### `.build.nsis`\n\n See [NSIS target notes](https://github.com/electron-userland/electron-builder/wiki/NSIS).\n */\nexport interface NsisOptions {\n  /*\n  One-click installation. Defaults to `true`.\n   */\n  readonly oneClick?: boolean\n\n  /*\n  Defaults to `false`.\n\n  If `oneClick` is `true` (default): Install per all users (per-machine).\n\n  If `oneClick` is `false`: no install mode installer page (choice per-machine or per-user), always install per-machine.\n   */\n  readonly perMachine?: boolean\n\n  /*\n   *boring installer only.* Allow requesting for elevation. If false, user will have to restart installer with elevated permissions. Defaults to `true`.\n   */\n  readonly allowElevation?: boolean\n\n  /*\n   *one-click installer only.* Run application after finish. Defaults to `true`.\n   */\n  readonly runAfterFinish?: boolean\n\n  /*\n  See [GUID vs Application Name](https://github.com/electron-userland/electron-builder/wiki/NSIS#guid-vs-application-name).\n   */\n  readonly guid?: string | null\n\n  /*\n   The path to installer icon. Defaults to `build/installerIcon.ico` or application icon.\n   */\n  readonly installerIcon?: string | null\n\n  /*\n   *boring installer only.* `MUI_HEADERIMAGE`, relative to the project directory. Defaults to `build/installerHeader.bmp`\n   */\n  readonly installerHeader?: string | null\n\n  /*\n   *one-click installer only.* The path to header icon (above the progress bar), relative to the project directory. Defaults to `build/installerHeaderIcon.ico` or application icon.\n   */\n  readonly installerHeaderIcon?: string | null\n\n  /*\n  The path to NSIS include script to customize installer. Defaults to `build/installer.nsh`. See [Custom NSIS script](https://github.com/electron-userland/electron-builder/wiki/NSIS#custom-nsis-script).\n   */\n  readonly include?: string | null\n\n  /*\n  The path to NSIS script to customize installer. Defaults to `build/installer.nsi`. See [Custom NSIS script](https://github.com/electron-userland/electron-builder/wiki/NSIS#custom-nsis-script).\n   */\n  readonly script?: string | null\n\n  /*\n  The path to EULA license file. Defaults to `build/license.rtf` or `build/license.txt`.\n   */\n  readonly license?: string | null\n\n  /*\n   * [LCID Dec](https://msdn.microsoft.com/en-au/goglobal/bb964664.aspx), defaults to `1033`(`English - United States`).\n   */\n  readonly language?: string | null\n\n  /*\n   Defaults to `false`.\n\n   If `warningsAsErrors` is `true` (default): NSIS will treat warnings as errors.\n\n   If `warningsAsErrors` is `false`: NSIS will allow warnings.\n   */\n  readonly warningsAsErrors?: boolean\n\n  /*\n  Whether to create submenu for start menu shortcut and program files directory. Defaults to `false`. If `true`, company name will be used. Or string value.\n   */\n  readonly menuCategory?: boolean | string\n}\n\n/*\n ### `.build.squirrelWindows`\n */\nexport interface SquirrelWindowsOptions extends WinBuildOptions {\n  /*\n    A URL to an ICO file to use as the application icon (displayed in Control Panel > Programs and Features). Defaults to the Electron icon.\n\n   Please note â€” [local icon file url is not accepted](https://github.com/atom/grunt-electron-installer/issues/73), must be https/http.\n\n   * If you don't plan to build windows installer, you can omit it.\n   * If your project repository is public on GitHub, it will be `https://github.com/${u}/${p}/blob/master/build/icon.ico?raw=true` by default.\n   */\n  readonly iconUrl?: string | null\n\n  /*\n   The path to a .gif file to display during install. `build/install-spinner.gif` will be used if exists (it is a recommended way to set)\n   (otherwise [default](https://github.com/electron/windows-installer/blob/master/resources/install-spinner.gif)).\n   */\n  readonly loadingGif?: string | null\n\n  /*\n   Whether to create an MSI installer. Defaults to `false` (MSI is not created).\n   */\n  readonly msi?: boolean\n\n  /*\n   A URL to your existing updates. Or `true` to automatically set to your GitHub repository. If given, these will be downloaded to create delta updates.\n   */\n  readonly remoteReleases?: string | boolean | null\n\n  /*\n   Authentication token for remote updates\n   */\n  readonly remoteToken?: string | null\n\n  /*\n   Use `appId` to identify package instead of `name`.\n   */\n  readonly useAppIdAsId?: boolean\n}\n\n/*\n ### `.build.appx`\n\n Please see [Windows AppX docs](https://msdn.microsoft.com/en-us/library/windows/apps/br211453.aspx).\n */\nexport interface AppXOptions {\n  /*\n   The background color of the app tile. Please see [Visual Elements](https://msdn.microsoft.com/en-us/library/windows/apps/br211471.aspx).\n   */\n  readonly backgroundColor?: string | null\n\n  readonly makeappxArgs?: Array<string> | null\n\n  /*\n   Describes the publisher information. The Publisher attribute must match the publisher subject information of the certificate used to sign a package. For now, required.\n   */\n  readonly publisher?: string | null\n\n  /*\n   A friendly name that can be displayed to users. Corresponds to [Properties.DisplayName](https://msdn.microsoft.com/en-us/library/windows/apps/br211432.aspx).\n   */\n  readonly displayName?: string | null\n\n  /*\n   A friendly name for the publisher that can be displayed to users. Corresponds to [Properties.PublisherDisplayName](https://msdn.microsoft.com/en-us/library/windows/apps/br211460.aspx).\n   */\n  readonly publisherDisplayName?: string | null\n\n  /*\n   Describes the contents of the package. The Name attribute is case-sensitive. Corresponds to [Identity.Name](https://msdn.microsoft.com/en-us/library/windows/apps/br211441.aspx).\n   */\n  readonly identityName?: string | null\n}\n"
  ]
}
