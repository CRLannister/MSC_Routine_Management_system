{
  "version": 3,
  "file": "linuxPackager.js",
  "sourceRoot": "",
  "sources": [
    "../src/linuxPackager.ts"
  ],
  "names": [],
  "mappings": ";;;;;;;AAAA,AAAO,AAAK,AAAI,AAAM,AAAM;;;;AAC5B,AAAO,AAAE,AAAgB,AAAa,AAAM,AAAoB;;;;;;AAChE,AAAO,AAAE,AAAQ,AAAE,AAAM,AAAY;;;;;;AAErC,AAAO,AAAE,AAAkB,AAAE,AAAU,AAAU,AAAM,AAAyB;;;;;;AAChF,AAAO,AAAE,AAAiB,AAAE,AAAM,AAA6B;;;;;;AAE/D,AAAO,AAAE,AAAM,AAAE,AAAM,AAAY;;;;;;AAEnC,AAAO,AAAgB,AAAM,AAAmB,AAGhD,AAAM;;;;;;;;MAAqB,AAAQ,AAAmC;AAGpE,gBAAY,AAAe;AACzB,AAAK,cAAC,AAAI,AAAC;AAEX,cAAM,AAAc,iBAAG,AAAI,KAAC,AAA4B,6BAAC,AAAc;AACvE,AAAI,aAAC,AAAc,iBAAG,AAAgB,6DAAC,AAAc,kBAAI,AAAI,OAAG,AAAI,KAAC,AAAO,QAAC,AAAI,OAAG,AAAc,AAAC,gBAAC,AAAW,AAAE,AACnH;AAAC;AAED,QAAI,AAAa;AACf,AAAM,eAAC,CAAC,AAAU,AAAC,AACrB;AAAC;AAED,AAAqC,0CAAC,AAA8B;AAClE,AAAE,AAAC,YAAC,AAAO,WAAI,AAAI,QAAI,AAAO,QAAC,AAAW,eAAI,AAAI,AAAC,MAAC,AAAC;AACnD,AAAM,mBAAC,AAAO,AAChB;AAAC,AACD,AAAI,eAAC,AAAC;AACJ,AAAM,0BAAQ,AAAM;AAClB,AAAW,6BAAE,AAAI,KAAC,AAAI,KAAC,AAAO,QAAC,AAAW,AAC3C;AAFoB,aAAd,AAAM,EAEV,AAAO,AAAC,AACb;AAAC,AACH;AAAC;AAED,AAAa,kBAAC,AAAsB,SAAE,AAAmE,QAAE,AAAuC;AAChJ,YAAI,AAAgC;AACpC,cAAM,AAAS,YAAG;AAChB,AAAE,AAAC,gBAAC,AAAM,UAAI,AAAI,AAAC,MAAC,AAAC;AACnB,AAAM,yBAAG,AAAI,AAAiB,wEAAC,AAAI,AAAC,AACtC;AAAC;AACD,AAAM,mBAAC,AAAM,AACf;AAAC;AAED,AAAG,AAAC,aAAC,MAAM,AAAI,QAAI,AAAO,AAAC,SAAC,AAAC;AAC3B,AAAE,AAAC,gBAAC,AAAI,AAAK,AAAU,AAAC,+DAAC,AAAC;AACxB,AAAQ,AACV;AAAC;AAED,kBAAM,AAAW,eAAyE;AACxF,AAAM,AAAC,wBAAC,AAAI,AAAC,AAAC,AAAC;AACb,yBAAK,AAAU;AACb,AAAM,+BAAC,AAAO,QAAC,AAAoB,AAAC,sBAAC,AAAO;AAC9C,yBAAK,AAAM;AACT,AAAM,+BAAC,AAAO,QAAC,AAAgB,AAAC,kBAAC,AAAO;AAC1C,yBAAK,AAAK,AAAC;AACX,yBAAK,AAAK,AAAC;AACX,yBAAK,AAAI,AAAC;AACV,yBAAK,AAAS,AAAC;AACf,yBAAK,AAAQ,AAAC;AACd,yBAAK,AAAK,AAAC;AACX,yBAAK,AAAK;AACR,AAAM,+BAAC,AAAO,QAAC,AAAe,AAAC,iBAAC,AAAO;AACzC;AACE,AAAM,+BAAC,AAAI,AACf,AAAC,AACH;;AAAC,AAAC,AAAE,aAjBqF;AAmBzF,AAAM,mBAAC,AAAI,MAAE,AAAM,UAAI,AAAW,gBAAK,AAAI,OAAG,AAAkB,kEAAC,AAAI,MAAE,AAAM,QAAE,AAAI,AAAC,QAAG,IAAI,AAAW,YAAC,AAAI,MAAE,AAAI,MAAE,AAAS,AAAE,aAAE,AAAM,AAAC,AAAC,AAC1I;AAAC,AACH;AAAC;AAED,QAAI,AAAQ;AACV,AAAM,eAAC,AAAQ,yCAAC,AAAK,AACvB;AAAC;AAES,AAAW,gBAAC,AAAiB;AACrC,AAAM,eAAC,AAAM,4CAAC,AAAI,MAAC,AAAI,KAAC,AAAS,WAAE,AAAU,AAAC,aAAE,AAAI,MAAC,AAAI,KAAC,AAAS,WAAE,AAAI,KAAC,AAAc,AAAC,AAAC,AAC5F;AAAC,AACF",
  "sourcesContent": [
    "import * as path from \"path\"\nimport { PlatformPackager, BuildInfo } from \"./platformPackager\"\nimport { Platform } from \"./metadata\"\nimport FpmTarget from \"./targets/fpm\"\nimport { createCommonTarget, DIR_TARGET, Target } from \"./targets/targetFactory\"\nimport { LinuxTargetHelper } from \"./targets/LinuxTargetHelper\"\nimport AppImageTarget from \"./targets/appImage\"\nimport { rename } from \"fs-extra-p\"\nimport { LinuxBuildOptions } from \"./options/linuxOptions\"\nimport sanitizeFileName from \"sanitize-filename\"\nimport SnapTarget from \"./targets/snap\"\n\nexport class LinuxPackager extends PlatformPackager<LinuxBuildOptions> {\n  readonly executableName: string\n\n  constructor(info: BuildInfo) {\n    super(info)\n\n    const executableName = this.platformSpecificBuildOptions.executableName\n    this.executableName = sanitizeFileName(executableName == null ? this.appInfo.name : executableName).toLowerCase()\n  }\n\n  get defaultTarget(): Array<string> {\n    return [\"appimage\"]\n  }\n\n  normalizePlatformSpecificBuildOptions(options: LinuxBuildOptions | n): LinuxBuildOptions {\n    if (options != null && options.description != null) {\n      return options\n    }\n    else {\n      return Object.assign({\n        description: this.info.appInfo.description,\n      }, options)\n    }\n  }\n\n  createTargets(targets: Array<string>, mapper: (name: string, factory: (outDir: string) => Target) => void, cleanupTasks: Array<() => Promise<any>>): void {\n    let helper: LinuxTargetHelper | null\n    const getHelper = () => {\n      if (helper == null) {\n        helper = new LinuxTargetHelper(this)\n      }\n      return helper\n    }\n\n    for (const name of targets) {\n      if (name === DIR_TARGET) {\n        continue\n      }\n\n      const targetClass: typeof AppImageTarget | typeof SnapTarget | typeof FpmTarget | null = (() => {\n        switch (name) {\n          case \"appimage\":\n            return require(\"./targets/appImage\").default\n          case \"snap\":\n            return require(\"./targets/snap\").default\n          case \"deb\":\n          case \"rpm\":\n          case \"sh\":\n          case \"freebsd\":\n          case \"pacman\":\n          case \"apk\":\n          case \"p5p\":\n            return require(\"./targets/fpm\").default\n          default:\n            return null\n        }\n      })()\n\n      mapper(name, outDir => targetClass === null ? createCommonTarget(name, outDir, this) : new targetClass(name, this, getHelper(), outDir))\n    }\n  }\n\n  get platform() {\n    return Platform.LINUX\n  }\n\n  protected postInitApp(appOutDir: string): Promise<any> {\n    return rename(path.join(appOutDir, \"electron\"), path.join(appOutDir, this.executableName))\n  }\n}"
  ]
}
