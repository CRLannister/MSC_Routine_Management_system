{
  "version": 3,
  "file": "windowsCodeSign.js",
  "sourceRoot": "",
  "sources": [
    "../src/windowsCodeSign.ts"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "import { exec } from \"./util/util\"\nimport { rename } from \"fs-extra-p\"\nimport * as path from \"path\"\nimport { release } from \"os\"\nimport { getBinFromBintray } from \"./util/binDownload\"\nimport isCi from \"is-ci\"\nimport { WinBuildOptions } from \"./options/winOptions\"\n\nconst TOOLS_VERSION = \"1.6.0\"\n\nexport function getSignVendorPath() {\n  //noinspection SpellCheckingInspection\n  return getBinFromBintray(\"winCodeSign\", TOOLS_VERSION, \"5a5e7de5087df96734a9bd96226aa40dbfaa87d44bb95e0fb4eee472e5efa583\")\n}\n\nexport interface SignOptions {\n  readonly path: string\n\n  readonly cert?: string | null\n  readonly subjectName?: string | null\n\n  readonly name?: string | null\n  readonly password?: string | null\n  readonly site?: string | null\n\n  readonly options: WinBuildOptions\n}\n\nexport async function sign(options: SignOptions) {\n  let hashes = options.options.signingHashAlgorithms\n  // msi does not support dual-signing\n  if (options.path.endsWith(\".msi\")) {\n    hashes = [hashes != null && !hashes.includes(\"sha1\") ? \"sha256\" : \"sha1\"]\n  }\n  else if (options.path.endsWith(\".appx\")) {\n    hashes = [\"sha256\"]\n  }\n  else {\n    if (hashes == null) {\n      hashes = [\"sha1\", \"sha256\"]\n    }\n    else {\n      hashes = Array.isArray(hashes) ? hashes.slice() : [hashes]\n    }\n  }\n\n  const isWin = process.platform === \"win32\"\n  let nest = false\n  //noinspection JSUnusedAssignment\n  let outputPath = \"\"\n  for (const hash of hashes) {\n    outputPath = isWin ? options.path : getOutputPath(options.path, hash)\n    await spawnSign(options, options.path, outputPath, hash, nest)\n    nest = true\n    if (!isWin) {\n      await rename(outputPath, options.path)\n    }\n  }\n}\n\n// on windows be aware of http://stackoverflow.com/a/32640183/1910191\nasync function spawnSign(options: SignOptions, inputPath: string, outputPath: string, hash: string, nest: boolean) {\n  const isWin = process.platform === \"win32\"\n  const args = isWin ? [\"sign\"] : [\"-in\", inputPath, \"-out\", outputPath]\n\n  if (process.env.ELECTRON_BUILDER_OFFLINE !== \"true\") {\n    const timestampingServiceUrl = options.options.timeStampServer || \"http://timestamp.verisign.com/scripts/timstamp.dll\"\n    if (isWin) {\n      args.push(nest || hash === \"sha256\" ? \"/tr\" : \"/t\", nest || hash === \"sha256\" ? (options.options.rfc3161TimeStampServer || \"http://timestamp.comodoca.com/rfc3161\") : timestampingServiceUrl)\n    }\n    else {\n      args.push(\"-t\", timestampingServiceUrl)\n    }\n  }\n\n  const certificateFile = options.cert\n  if (certificateFile == null) {\n    if (process.platform !== \"win32\") {\n      throw new Error(\"certificateSubjectName supported only on Windows\")\n    }\n    args.push(\"/n\", options.subjectName!)\n  }\n  else {\n    const certExtension = path.extname(certificateFile)\n    if (certExtension === \".p12\" || certExtension === \".pfx\") {\n      args.push(isWin ? \"/f\" : \"-pkcs12\", certificateFile)\n    }\n    else {\n      throw new Error(`Please specify pkcs12 (.p12/.pfx) file, ${certificateFile} is not correct`)\n    }\n  }\n\n  if (!isWin || hash !== \"sha1\") {\n    args.push(isWin ? \"/fd\" : \"-h\", hash)\n    if (isWin && process.env.ELECTRON_BUILDER_OFFLINE !== \"true\") {\n      args.push(\"/td\", \"sha256\")\n    }\n  }\n\n  if (options.name) {\n    args.push(isWin ? \"/d\" : \"-n\", options.name)\n  }\n\n  if (options.site) {\n    args.push(isWin ? \"/du\" : \"-i\", options.site)\n  }\n\n  // msi does not support dual-signing\n  if (nest) {\n    args.push(isWin ? \"/as\" : \"-nest\")\n  }\n\n  if (options.password) {\n    args.push(isWin ? \"/p\" : \"-pass\", options.password)\n  }\n\n  if (isWin) {\n    // must be last argument\n    args.push(inputPath)\n  }\n\n  return await exec(await getToolPath(), args)\n}\n\n// async function verify(options: any) {\n//   const out = await exec(await getToolPath(options), [\n//     \"verify\",\n//     \"-in\", options.path,\n//     \"-require-leaf-hash\", options.hash\n//   ])\n//   if (out.includes(\"No signature found.\")) {\n//     throw new Error(\"No signature found\")\n//   }\n//   else if (out.includes(\"Leaf hash match: failed\")) {\n//     throw new Error(\"Leaf hash match failed\")\n//   }\n// }\n\nfunction getOutputPath(inputPath: string, hash: string) {\n  const extension = path.extname(inputPath)\n  return path.join(path.dirname(inputPath), `${path.basename(inputPath, extension)}-signed-${hash}${extension}`)\n}\n\nasync function getToolPath(): Promise<string> {\n  if (process.env.USE_SYSTEM_SIGNCODE) {\n    return \"osslsigncode\"\n  }\n\n  const result = process.env.SIGNTOOL_PATH\n  if (result) {\n    return result\n  }\n\n  const vendorPath = await getSignVendorPath()\n  if (process.platform === \"win32\") {\n    if (release().startsWith(\"6.\")) {\n      return path.join(vendorPath, \"windows-6\", \"signtool.exe\")\n    }\n    else {\n      return path.join(vendorPath, \"windows-10\", process.arch, \"signtool.exe\")\n    }\n  }\n  else if (process.platform === \"darwin\" && isCi) {\n    return path.join(vendorPath, process.platform, \"ci\", \"osslsigncode\")\n  }\n  else {\n    return path.join(vendorPath, process.platform, \"osslsigncode\")\n  }\n}\n"
  ]
}
