{
  "version": 3,
  "file": "appImage.js",
  "sourceRoot": "",
  "sources": [
    "../../src/targets/appImage.ts"
  ],
  "names": [],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;AAAA,AAAO,AAAE,AAAI,AAAE,AAAM,AAAa;;;;AAClC,AAAO,AAAK,AAAI,AAAM,AAAM;;;;AAC5B,AAAO,AAAE,AAAI,AAAE,AAAM,AAAc;;;;;;AACnC,AAAO,AAAE,AAAI,AAAE,AAAK,AAAE,AAAgB,AAAE,AAAiB,AAAE,AAAK,AAAE,AAAK,AAAE,AAAM,AAAY;;;;;;AAE3F,AAAO,AAAE,AAAM,AAAE,AAAM,AAAqB,AAC5C,AAAO,AAAe,AAAM,AAAgB;;;;;;AAC5C,AAAO,AAAE,AAAE,AAAI,AAAK,AAAE,AAAM,AAAW;;;;;;AAEvC,AAAO,AAAE,AAAG,AAAE,AAAM,AAAa;;;;;;AACjC,AAAO,AAAE,AAAM,AAAE,AAAM,AAAiB;;;;;;AACxC,AAAO,AAAE,AAAc,AAAE,AAAM,AAAY;;;;;;;;AAE3C,MAAM,AAAe,kBAAG,AAAO,QAAC,AAAQ,aAAK,AAAQ,WAAG,AAAuB,0BAAG,AAAyB;AAC3G,AAAsC;AACtC,MAAM,AAAc,iBAAG,AAAO,QAAC,AAAQ,aAAK,AAAQ,WAAG,AAAkE,qEAAG,AAAkE;AAC9L,AAAsC;AACtC,MAAM,AAAmB,sBAAG,AAAM,kDAAC,AAAU,YAAE,AAAe,AAAE,kEAAgD,AAAe,eAAK,QAAE,AAAc,AAAC,AAErJ,AAAM,AAAC,AAAO;MAAsB,AAAQ,AAAM;AAIhD,gBAAY,AAAe,SAAU,AAAuB,UAAU,AAAyB,QAAU,AAAc;AACrH,AAAK,cAAC,AAAU,AAAC;AADkB,aAAQ,WAAR,AAAQ,AAAe;AAAU,aAAM,SAAN,AAAM,AAAmB;AAAU,aAAM,SAAN,AAAM,AAAQ;AAHtG,aAAO,UAAG,AAAM,OAAC,AAAM,OAAC,AAAE,IAAE,AAAI,KAAC,AAAQ,SAAC,AAA4B,8BAAQ,AAAI,KAAC,AAAQ,SAAC,AAAO,OAAC,AAAI,KAAC,AAAI,AAAC,AAAC;AAM9H,AAA8E;AAC9E,AAAI,aAAC,AAAY,iEAAmB,AAAS,AAAC,AAAK,AAAC,sCAAC,EAAC,AAAG,KAAE,AAAK,AAAC,AAAC,SAC/D,AAAI,KAAC,AAAI,eAAW,AAAmB,oBAAC,AAAI,KAAC,AAAO,SAAE,AAAQ,UAAE,AAAI;AACnE,AAAoB,AAAE,sCAAG,AAAQ,SAAC,AAAO,QAAC,AAAY,YAAE;AACxD,AAAoB,kCAAE,AAAI,AAC3B,AAAC,AAAC,AACP;AAJ2E,SAAzD,AAAM,CADF,AAAe;AAKpC;AAEK,AAAK,SAAX,AAAK,CAAO,AAAiB,WAAE,AAAU;;;;AACvC,AAAG,AAAC,0EAA8B,AAAI,qCAAC,AAAI,AAAC,KAAE,AAAC;AAE/C,kBAAM,AAAQ,WAAG,AAAI,MAAC,AAAQ;AAE9B,AAAgC;AAChC,kBAAM,AAAU,aAAG,AAAI,MAAC,AAAI,KAAC,AAAI,MAAC,AAAM,QAAE,AAAQ,SAAC,AAAY,aAAC,AAAU,YAAE,AAAI,MAAE,AAAI,AAAC,AAAC;AACxF,kBAAM,AAAc,wCAAC,AAAU,AAAC;AAEhC,kBAAM,AAAY,eAAG,MAAM,AAAmB;AAC9C,kBAAM,AAAW,cAAG,MAAM,AAAI,MAAC,AAAY;AAC3C,kBAAM,AAAI,QACR,AAAS,WAAE,AAAI,MACf,AAAQ,UAAE,AAAU,YACpB,AAAM,QAAE,AAAU,YAClB,AAAU,YAAE,AAAG,KACf,AAAM,QAAE,AAAS,WAAE,AAAU,YAC7B,AAAM,QAAE,AAAI,MAAC,AAAI,KAAC,AAAS,WAAE,AAAI,MAAE,AAAI,MAAE,AAAW,aAAE,AAAO,SAAE,AAAW,AAAC,cAAE,AAAS;AACtF,AAA6F;AAC7F,AAAM,kBARK,EAQH,AAAW,AAAE,kBAAI,AAAI,MAAC,AAAQ,SAAC,AAAc,cAAU,AAChE;AACD,AAAG,AAAC,AAAC,AAAM,+BAAe,MAAM,AAAI,MAAC,AAAM,OAAC,AAAK,AAAC,AAAC;AAAC,AAAC;;sBAAzC,AAAI;sBAAE,AAAE,AAAC,AAAI;;AACvB,AAAI,qBAAC,AAAI,KAAC,AAAM,QAAE,AAAI,AAAE,mCAA4B,AAAE,EAAE,AAAC,AAC3D;AAAC;AAED,AAAuC;AACvC,AAAE,AAAC,gBAAC,AAAI,MAAC,AAAM,OAAC,AAAW,eAAI,AAAI,AAAC,MAAC,AAAC;AACpC,sBAAM,IAAI,AAAK,MAAC,AAAsB,AAAC,AACzC;AAAC;AACD,AAAI,iBAAC,AAAI,KAAC,AAAM,QAAE,AAAI,MAAC,AAAM,OAAC,AAAW,aAAE,AAAW,AAAC;AAEvD,AAAI,iBAAC,AAAI,KAAC,AAAU,YAAE,AAAG,KAAE,AAAG,KAAE,AAAI,AAAC;AACrC,AAAI,iBAAC,AAAI,KAAC,AAAS,AAAE,qBAAS,AAAQ,SAAC,AAAM,OAAC,AAAW,gBAAK,AAAO,UAAG,AAAG,MAAG,AAAG,GAA+B,AAAC;AACjH,AAAI,iBAAC,AAAI,KAAC,AAAc,gBAAE,AAAU,YAAE,AAAG,AAAC;AAE1C,AAAE,AAAC,gBAAC,AAAI,MAAC,AAAQ,SAAC,AAAO,QAAC,AAAuB,2BAAI,AAAI,SAAI,MAAM,AAAI,MAAC,AAAQ,SAAC,AAAO,QAAC,AAAuB,wBAAC,CAAC,AAAI,MAAE,AAAW,AAAC,AAAC,AAAC,gBAAC,AAAC;AACtI,AAAM,AACR;AAAC;AAED,kBAAM,AAAI,kCAAC,AAAO,QAAC,AAAI,SAAK,AAAK,AAAI,SAAC,AAAO,QAAC,AAAG,IAAC,AAAkB,uBAAK,AAAM,UAAI,AAAO,QAAC,AAAG,IAAC,AAAkB,uBAAK,AAAE,AAAC,KAAG,AAAS,YAAG,AAAI,MAAC,AAAI,KAAC,AAAY,cAAE,AAAS,AAAC,YAAE,AAAI,AAAC;AAEjL,wEAA0B,UAAC,AAAO,SAAE,AAAM;AACxC,sBAAM,AAAE,KAAG,AAAgB,sDAAC,AAAI,MAAC,AAAI,KAAC,AAAY,cAAE,AAAI,SAAK,AAAI,qCAAC,AAAI,OAAG,AAAI,OAAG,AAAI,MAAE,AAAS,AAAC,AAAC;AACjG,AAAE,mBAAC,AAAE,GAAC,AAAO,SAAE,AAAM,AAAC;AACtB,sBAAM,AAAE,KAAG,AAAiB,uDAAC,AAAU,YAAE,EAAC,AAAK,OAAE,AAAI,AAAC,AAAC;AACvD,AAAE,mBAAC,AAAE,GAAC,AAAO,SAAE,AAAM,AAAC;AACtB,AAAE,mBAAC,AAAE,GAAC,AAAQ,UAAE,AAAO,AAAC;AACxB,AAAE,mBAAC,AAAI,KAAC,AAAE,AAAC,AACb;AAAC,AAAC,aAPI,AAAI,AAAe;AASzB,kBAAM,AAAE,KAAG,MAAM,AAAI,0CAAC,AAAU,YAAE,AAAI,AAAC;AACvC,gBAAI,AAAC;AACH,sBAAM,AAAS,YAAG,IAAI,AAAM,OAAC,CAAC,AAAI,MAAE,AAAI,MAAE,AAAI,AAAC,AAAC;AAChD,sBAAM,AAAK,2CAAC,AAAE,IAAE,AAAS,WAAE,AAAC,GAAE,AAAS,UAAC,AAAM,QAAE,AAAC,AAAC,AACpD;AAAC,sBACO,AAAC;AACP,sBAAM,AAAK,2CAAC,AAAE,AAAC,AACjB;AAAC;AAED,kBAAM,AAAK,2CAAC,AAAU,YAAE,AAAM,AAAC;AAE/B,AAAQ,qBAAC,AAAuB,wBAAC,AAAU,AAAC,AAC9C;;AAAC,AACF",
  "sourcesContent": [
    "import { Arch } from \"../metadata\"\nimport * as path from \"path\"\nimport { exec } from \"../util/util\"\nimport { open, write, createReadStream, createWriteStream, close, chmod } from \"fs-extra-p\"\nimport { LinuxTargetHelper } from \"./LinuxTargetHelper\"\nimport { getBin } from \"../util/binDownload\"\nimport BluebirdPromise from \"bluebird-lst-c\"\nimport { v1 as uuid1 } from \"uuid-1345\"\nimport { LinuxPackager } from \"../linuxPackager\"\nimport { log } from \"../util/log\"\nimport { Target } from \"./targetFactory\"\nimport { unlinkIfExists } from \"../util/fs\"\n\nconst appImageVersion = process.platform === \"darwin\" ? \"AppImage-09-07-16-mac\" : \"AppImage-09-07-16-linux\"\n//noinspection SpellCheckingInspection\nconst appImageSha256 = process.platform === \"darwin\" ? \"5d4a954876654403698a01ef5bd7f218f18826261332e7d31d93ab4432fa0312\" : \"ac324e90b502f4e995f6a169451dbfc911bb55c0077e897d746838e720ae0221\"\n//noinspection SpellCheckingInspection\nconst appImagePathPromise = getBin(\"AppImage\", appImageVersion, `https://dl.bintray.com/electron-userland/bin/${appImageVersion}.7z`, appImageSha256)\n\nexport default class AppImageTarget extends Target {\n  private readonly options = Object.assign({}, this.packager.platformSpecificBuildOptions, (<any>this.packager.config)[this.name])\n  private readonly desktopEntry: Promise<string>\n\n  constructor(ignored: string, private packager: LinuxPackager, private helper: LinuxTargetHelper, private outDir: string) {\n    super(\"appImage\")\n\n    // we add X-AppImage-BuildId to ensure that new desktop file will be installed\n    this.desktopEntry = BluebirdPromise.promisify(uuid1)({mac: false})\n      .then(uuid => helper.computeDesktopEntry(this.options, \"AppRun\", null, {\n        \"X-AppImage-Version\": `${packager.appInfo.buildVersion}`,\n        \"X-AppImage-BuildId\": uuid,\n      }))\n  }\n\n  async build(appOutDir: string, arch: Arch): Promise<any> {\n    log(`Building AppImage for arch ${Arch[arch]}`)\n\n    const packager = this.packager\n\n    // avoid spaces in the file name\n    const resultFile = path.join(this.outDir, packager.generateName(\"AppImage\", arch, true))\n    await unlinkIfExists(resultFile)\n\n    const appImagePath = await appImagePathPromise\n    const desktopFile = await this.desktopEntry\n    const args = [\n      \"-joliet\", \"on\",\n      \"-volid\", \"AppImage\",\n      \"-dev\", resultFile,\n      \"-padding\", \"0\",\n      \"-map\", appOutDir, \"/usr/bin\",\n      \"-map\", path.join(__dirname, \"..\", \"..\", \"templates\", \"linux\", \"AppRun.sh\"), \"/AppRun\",\n      // we get executable name in the AppRun by desktop file name, so, must be named as executable\n      \"-map\", desktopFile, `/${this.packager.executableName}.desktop`,\n    ]\n    for (const [from, to] of (await this.helper.icons)) {\n      args.push(\"-map\", from, `/usr/share/icons/default/${to}`)\n    }\n\n    // must be after this.helper.icons call\n    if (this.helper.maxIconPath == null) {\n      throw new Error(\"Icon is not provided\")\n    }\n    args.push(\"-map\", this.helper.maxIconPath, \"/.DirIcon\")\n\n    args.push(\"-chown_r\", \"0\", \"/\", \"--\")\n    args.push(\"-zisofs\", `level=${packager.config.compression === \"store\" ? \"0\" : \"9\"}:block_size=128k:by_magic=off`)\n    args.push(\"set_filter_r\", \"--zisofs\", \"/\")\n\n    if (this.packager.options.effectiveOptionComputed != null && await this.packager.options.effectiveOptionComputed([args, desktopFile])) {\n      return\n    }\n\n    await exec(process.arch !== \"x64\" || (process.env.USE_SYSTEM_XORRISO === \"true\" || process.env.USE_SYSTEM_XORRISO === \"\") ? \"xorriso\" : path.join(appImagePath, \"xorriso\"), args)\n\n    await new BluebirdPromise((resolve, reject) => {\n      const rd = createReadStream(path.join(appImagePath, arch === Arch.ia32 ? \"32\" : \"64\", \"runtime\"))\n      rd.on(\"error\", reject)\n      const wr = createWriteStream(resultFile, {flags: \"r+\"})\n      wr.on(\"error\", reject)\n      wr.on(\"finish\", resolve)\n      rd.pipe(wr)\n    })\n\n    const fd = await open(resultFile, \"r+\")\n    try {\n      const magicData = new Buffer([0x41, 0x49, 0x01])\n      await write(fd, magicData, 0, magicData.length, 8)\n    }\n    finally {\n      await close(fd)\n    }\n\n    await chmod(resultFile, \"0755\")\n\n    packager.dispatchArtifactCreated(resultFile)\n  }\n}"
  ]
}
