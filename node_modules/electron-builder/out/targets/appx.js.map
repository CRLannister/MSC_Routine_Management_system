{
  "version": 3,
  "file": "appx.js",
  "sourceRoot": "",
  "sources": [
    "../../src/targets/appx.ts"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "import { getArchSuffix } from \"../platformPackager\"\nimport { Arch } from \"../metadata\"\nimport { WinPackager } from \"../winPackager\"\nimport { use, spawn } from \"../util/util\"\nimport { emptyDir, copy, readFile, writeFile } from \"fs-extra-p\"\nimport * as path from \"path\"\nimport { AppXOptions } from \"../options/winOptions\"\nimport BluebirdPromise from \"bluebird-lst-c\"\nimport { Target } from \"./targetFactory\"\nimport { getSignVendorPath } from \"../windowsCodeSign\"\nimport sanitizeFileName from \"sanitize-filename\"\nimport { release } from \"os\"\nimport { copyDir } from \"../util/fs\"\n\nexport default class AppXTarget extends Target {\n  private readonly options: AppXOptions = Object.assign({}, this.packager.platformSpecificBuildOptions, this.packager.config.appx)\n\n  constructor(private readonly packager: WinPackager, private readonly outDir: string) {\n    super(\"appx\")\n\n    const osVersion = release()\n    if (process.platform !== \"win32\" || parseInt(osVersion.substring(0, osVersion.indexOf(\".\")), 10) < 10) {\n      throw new Error(\"AppX is supported only on Windows 10\")\n    }\n  }\n\n  // no flatten - use asar or npm 3 or yarn\n  async build(appOutDir: string, arch: Arch): Promise<any> {\n    const packager = this.packager\n\n    const cscInfo = await packager.cscInfo\n    if (cscInfo == null) {\n      throw new Error(\"AppX package must be signed, but certificate is not set, please see https://github.com/electron-userland/electron-builder/wiki/Code-Signing\")\n    }\n\n    // todo grab publisher info from cert\n    if (this.options.publisher == null) {\n      throw new Error(\"Please specify appx.publisher\")\n    }\n\n    const appInfo = packager.appInfo\n\n    const preAppx = path.join(this.outDir, `pre-appx-${getArchSuffix(arch)}`)\n    await emptyDir(preAppx)\n\n    const vendorPath = await getSignVendorPath()\n\n    const templatePath = path.join(__dirname, \"..\", \"..\", \"templates\", \"appx\")\n    const safeName = sanitizeFileName(appInfo.name)\n    const resourceList = await packager.resourceList\n    await BluebirdPromise.all([\n      BluebirdPromise.map([\"44x44\", \"50x50\", \"150x150\", \"310x150\"], size => {\n        const target = path.join(preAppx, \"assets\", `${safeName}.${size}.png`)\n        if (resourceList.includes(`${size}.png`)) {\n          return copy(path.join(packager.buildResourcesDir, `${size}.png`), target)\n        }\n        return copy(path.join(vendorPath, \"appxAssets\", `SampleAppx.${size}.png`), target)\n      }),\n      copyDir(appOutDir, path.join(preAppx, \"app\")),\n      this.writeManifest(templatePath, preAppx, safeName, arch)\n    ])\n\n    const destination = path.join(this.outDir, packager.generateName(\"appx\", arch, false))\n    const args = [\"pack\", \"/o\", \"/d\", preAppx, \"/p\", destination]\n    use(this.options.makeappxArgs, (it: Array<string>) => args.push(...it))\n    // wine supports only ia32 binary in any case makeappx crashed on wine\n    // await execWine(path.join(await getSignVendorPath(), \"windows-10\", process.platform === \"win32\" ? process.arch : \"ia32\", \"makeappx.exe\"), args)\n    await spawn(path.join(vendorPath, \"windows-10\", arch === Arch.ia32 ? \"ia32\" : \"x64\", \"makeappx.exe\"), args)\n\n    await packager.sign(destination)\n    packager.dispatchArtifactCreated(destination, packager.generateName(\"appx\", arch, true))\n  }\n\n  private async writeManifest(templatePath: string, preAppx: string, safeName: string, arch: Arch) {\n    const appInfo = this.packager.appInfo\n    const manifest = (await readFile(path.join(templatePath, \"appxmanifest.xml\"), \"utf8\"))\n      .replace(/\\$\\{([a-zA-Z]+)\\}/g, (match, p1): string => {\n        switch (p1) {\n          case \"publisher\":\n            return this.options.publisher!\n\n          case \"publisherDisplayName\":\n            return this.options.publisherDisplayName || appInfo.companyName\n\n          case \"version\":\n            return appInfo.versionInWeirdWindowsForm\n\n          case \"name\":\n            return appInfo.name\n            \n          case \"identityName\":\n            return this.options.identityName  || appInfo.name\n\n          case \"executable\":\n            return `app\\\\${appInfo.productFilename}.exe`\n\n          case \"displayName\":\n            return this.options.displayName || appInfo.productName\n            \n          case \"description\":\n            return appInfo.description || appInfo.productName\n\n          case \"backgroundColor\":\n            return this.options.backgroundColor || \"#464646\"\n\n          case \"safeName\":\n            return safeName\n            \n          case \"arch\":\n            return arch === Arch.ia32 ? \"x86\" : \"x64\"\n\n          default:\n            throw new Error(`Macro ${p1} is not defined`)\n        }\n      })\n    await writeFile(path.join(preAppx, \"appxmanifest.xml\"), manifest)\n  }\n}\n"
  ]
}
