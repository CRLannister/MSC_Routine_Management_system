"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _bluebirdLstC;

function _load_bluebirdLstC() {
    return _bluebirdLstC = require("bluebird-lst-c");
}

var _platformPackager;

function _load_platformPackager() {
    return _platformPackager = require("../platformPackager");
}

var _metadata;

function _load_metadata() {
    return _metadata = require("../metadata");
}

var _log;

function _load_log() {
    return _log = require("../util/log");
}

var _fsExtraP;

function _load_fsExtraP() {
    return _fsExtraP = require("fs-extra-p");
}

var _path = _interopRequireWildcard(require("path"));

var _jsYaml;

function _load_jsYaml() {
    return _jsYaml = require("js-yaml");
}

var _util;

function _load_util() {
    return _util = require("../util/util");
}

var _os;

function _load_os() {
    return _os = require("os");
}

var _targetFactory;

function _load_targetFactory() {
    return _targetFactory = require("./targetFactory");
}

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

class SnapTarget extends (_targetFactory || _load_targetFactory()).Target {
    constructor(name, packager, helper, outDir) {
        super(name);
        this.packager = packager;
        this.helper = helper;
        this.outDir = outDir;
        this.options = Object.assign({}, this.packager.platformSpecificBuildOptions, this.packager.config[this.name]);
    }
    build(appOutDir, arch) {
        var _this = this;

        return (0, (_bluebirdLstC || _load_bluebirdLstC()).coroutine)(function* () {
            (0, (_log || _load_log()).log)(`Building Snap for arch ${ (_metadata || _load_metadata()).Arch[arch] }`);
            const packager = _this.packager;
            const appInfo = packager.appInfo;
            const options = _this.options;
            const snapDir = `${ appOutDir }-snap`;
            yield (0, (_fsExtraP || _load_fsExtraP()).emptyDir)(snapDir);
            const extraSnapSourceDir = _path.join(snapDir, ".extra");
            const isUseUbuntuPlatform = options.ubuntuAppPlatformContent != null;
            if (isUseUbuntuPlatform) {
                // ubuntu-app-platform requires empty directory
                yield (0, (_fsExtraP || _load_fsExtraP()).emptyDir)(_path.join(extraSnapSourceDir, "ubuntu-app-platform"));
            }
            const snap = {};
            snap.name = packager.executableName;
            snap.version = appInfo.version;
            snap.summary = options.summary || appInfo.productName;
            snap.description = _this.helper.getDescription(options);
            snap.confinement = options.confinement || "strict";
            snap.grade = options.grade || "stable";
            yield _this.helper.icons;
            if (_this.helper.maxIconPath != null) {
                snap.icon = "setup/gui/icon.png";
                yield (0, (_fsExtraP || _load_fsExtraP()).copy)(_this.helper.maxIconPath, _path.join(snapDir, "setup", "gui", "icon.png"));
            }
            yield _this.helper.computeDesktopEntry(_this.options, `${ snap.name }`, _path.join(snapDir, "setup", "gui", `${ snap.name }.desktop`), {
                "Icon": "${SNAP}/meta/gui/icon.png"
            });
            if (options.assumes != null) {
                if (!Array.isArray(options.assumes)) {
                    throw new Error("snap.assumes must be an array of strings");
                }
                snap.assumes = options.assumes;
            }
            snap.apps = {
                [snap.name]: {
                    command: `desktop-launch $SNAP/${ packager.executableName }`,
                    plugs: ["home", "x11", "unity7", "unity8", "browser-support", "network", "gsettings", "pulseaudio", "opengl", "platform"]
                }
            };
            if (isUseUbuntuPlatform) {
                snap.plugs = {
                    platform: {
                        interface: "content",
                        content: "ubuntu-app-platform1",
                        target: "ubuntu-app-platform",
                        "default-provider": "ubuntu-app-platform"
                    }
                };
            }
            // libxss1, libasound2, gconf2 - was "error while loading shared libraries: libXss.so.1" on Xubuntu 16.04
            const isUseDocker = process.platform !== "linux";
            snap.parts = {
                app: {
                    plugin: "dump",
                    "stage-packages": options.stagePackages || (isUseUbuntuPlatform ? ["libnss3"] : ["libnotify4", "libappindicator1", "libxtst6", "libnss3", "libxss1", "fontconfig-config", "gconf2", "libasound2"]),
                    source: isUseDocker ? `/out/${ _path.basename(appOutDir) }` : appOutDir,
                    after: isUseUbuntuPlatform ? ["extra", "desktop-ubuntu-app-platform"] : ["desktop-glib-only"]
                }
            };
            if (isUseUbuntuPlatform) {
                snap.parts.extra = {
                    plugin: "dump",
                    source: isUseDocker ? `/out/${ _path.basename(snapDir) }/${ _path.basename(extraSnapSourceDir) }` : extraSnapSourceDir
                };
            }
            const snapcraft = _path.join(snapDir, "snapcraft.yaml");
            yield (0, (_fsExtraP || _load_fsExtraP()).writeFile)(snapcraft, (0, (_jsYaml || _load_jsYaml()).safeDump)(snap, { lineWidth: 160 }));
            const snapName = `${ snap.name }_${ snap.version }_${ (0, (_platformPackager || _load_platformPackager()).toDebArch)(arch) }.snap`;
            const resultFile = _path.join(_this.outDir, snapName);
            if (isUseDocker) {
                yield (0, (_util || _load_util()).spawn)("docker", ["run", "--rm", "-v", `${ packager.info.projectDir }:/project`, "-v", `${ (0, (_os || _load_os()).homedir)() }/.electron:/root/.electron`,
                // dist dir can be outside of project dir
                "-v", `${ _this.outDir }:/out`, "electronuserland/electron-builder:latest", "/bin/bash", "-c", `snapcraft --version && cp -R /out/${ _path.basename(snapDir) } /s/ && cd /s && snapcraft snap --target-arch ${ (0, (_metadata || _load_metadata()).toLinuxArchString)(arch) } -o /out/${ snapName }`], {
                    cwd: packager.info.projectDir,
                    stdio: ["ignore", "inherit", "inherit"]
                });
            } else {
                yield (0, (_util || _load_util()).spawn)("snapcraft", ["snap", "--target-arch", (0, (_metadata || _load_metadata()).toLinuxArchString)(arch), "-o", resultFile], {
                    cwd: snapDir,
                    stdio: ["ignore", "inherit", "pipe"]
                });
            }
            packager.dispatchArtifactCreated(resultFile);
        })();
    }
}
exports.default = SnapTarget; //# sourceMappingURL=snap.js.map