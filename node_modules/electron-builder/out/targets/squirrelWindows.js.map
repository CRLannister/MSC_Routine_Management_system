{
  "version": 3,
  "file": "squirrelWindows.js",
  "sourceRoot": "",
  "sources": [
    "../../src/targets/squirrelWindows.ts"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "import { WinPackager } from \"../winPackager\"\nimport { getArchSuffix } from \"../platformPackager\"\nimport { Arch } from \"../metadata\"\nimport * as path from \"path\"\nimport { warn, log } from \"../util/log\"\nimport { getRepositoryInfo } from \"../repositoryInfo\"\nimport { getBinFromBintray } from \"../util/binDownload\"\nimport { buildInstaller, convertVersion, SquirrelOptions } from \"./squirrelPack\"\nimport { SquirrelWindowsOptions } from \"../options/winOptions\"\nimport { Target } from \"./targetFactory\"\n\nconst SW_VERSION = \"1.5.1.4\"\n//noinspection SpellCheckingInspection\nconst SW_SHA2 = \"30caa74802259f956d7b73f4b282917c10c6dd3d29f5ca3e4d996b2896f2aa0d\"\n\nexport default class SquirrelWindowsTarget extends Target {\n  private readonly options: SquirrelWindowsOptions = Object.assign({}, this.packager.platformSpecificBuildOptions, this.packager.config.squirrelWindows)\n\n  constructor(private readonly packager: WinPackager, private readonly outDir: string) {\n    super(\"squirrel\")\n  }\n\n  async build(appOutDir: string, arch: Arch) {\n    log(`Building Squirrel.Windows for arch ${Arch[arch]}`)\n\n    if (arch === Arch.ia32) {\n      warn(\"For windows consider only distributing 64-bit or use nsis target, see https://github.com/electron-userland/electron-builder/issues/359#issuecomment-214851130\")\n    }\n\n    const appInfo = this.packager.appInfo\n    const version = appInfo.version\n    const archSuffix = getArchSuffix(arch)\n    const setupFileName = `${appInfo.productFilename} Setup ${version}${archSuffix}.exe`\n\n    const installerOutDir = path.join(this.outDir, `win${getArchSuffix(arch)}`)\n\n    const distOptions = await this.computeEffectiveDistOptions()\n\n    await buildInstaller(<SquirrelOptions>distOptions, installerOutDir, setupFileName, this.packager, appOutDir)\n\n    this.packager.dispatchArtifactCreated(path.join(installerOutDir, setupFileName), `${appInfo.name}-Setup-${version}${archSuffix}.exe`)\n\n    const packagePrefix = `${appInfo.name}-${convertVersion(version)}-`\n    this.packager.dispatchArtifactCreated(path.join(installerOutDir, `${packagePrefix}full.nupkg`))\n    if (distOptions.remoteReleases != null) {\n      this.packager.dispatchArtifactCreated(path.join(installerOutDir, `${packagePrefix}delta.nupkg`))\n    }\n\n    this.packager.dispatchArtifactCreated(path.join(installerOutDir, \"RELEASES\"))\n  }\n\n  async computeEffectiveDistOptions(): Promise<SquirrelOptions> {\n    const packager = this.packager\n    let iconUrl = this.options.iconUrl || packager.config.iconUrl\n    if (iconUrl == null) {\n      const info = await getRepositoryInfo(packager.appInfo.metadata, packager.info.devMetadata)\n      if (info != null) {\n        iconUrl = `https://github.com/${info.user}/${info.project}/blob/master/${packager.relativeBuildResourcesDirname}/icon.ico?raw=true`\n      }\n\n      if (iconUrl == null) {\n        throw new Error(\"iconUrl is not specified, please see https://github.com/electron-userland/electron-builder/wiki/Options#WinBuildOptions-iconUrl\")\n      }\n    }\n\n    checkConflictingOptions(this.options)\n\n    const appInfo = packager.appInfo\n    const projectUrl = await appInfo.computePackageUrl()\n    const options: any = Object.assign({\n      name: appInfo.name,\n      productName: appInfo.productName,\n      appId: this.options.useAppIdAsId ? appInfo.id : appInfo.name,\n      version: appInfo.version,\n      description: appInfo.description,\n      authors: appInfo.companyName,\n      iconUrl: iconUrl,\n      extraMetadataSpecs: projectUrl == null ? null : `\\n    <projectUrl>${projectUrl}</projectUrl>`,\n      copyright: appInfo.copyright,\n      packageCompressionLevel: packager.config.compression === \"store\" ? 0 : 9,\n      vendorPath: await getBinFromBintray(\"Squirrel.Windows\", SW_VERSION, SW_SHA2)\n    }, this.options)\n\n    if (options.remoteToken == null) {\n      options.remoteToken = process.env.GH_TOKEN\n    }\n\n    if (!(\"loadingGif\" in options)) {\n      const resourceList = await packager.resourceList\n      if (resourceList.includes(\"install-spinner.gif\")) {\n        options.loadingGif = path.join(packager.buildResourcesDir, \"install-spinner.gif\")\n      }\n    }\n\n    if (options.remoteReleases === true) {\n      const info = await getRepositoryInfo(packager.appInfo.metadata, packager.info.devMetadata)\n      if (info == null) {\n        warn(\"remoteReleases set to true, but cannot get repository info\")\n      }\n      else {\n        options.remoteReleases = `https://github.com/${info.user}/${info.project}`\n        log(`remoteReleases is set to ${options.remoteReleases}`)\n      }\n    }\n\n    return options\n  }\n}\n\nfunction checkConflictingOptions(options: any) {\n  for (const name of [\"outputDirectory\", \"appDirectory\", \"exe\", \"fixUpPaths\", \"usePackageJson\", \"extraFileSpecs\", \"extraMetadataSpecs\", \"skipUpdateIcon\", \"setupExe\"]) {\n    if (name in options) {\n      throw new Error(`Option ${name} is ignored, do not specify it.`)\n    }\n  }\n\n  if (\"noMsi\" in options) {\n    warn(`noMsi is deprecated, please specify as \"msi\": true if you want to create an MSI installer`)\n    options.msi = !options.noMsi\n  }\n\n  const msi = options.msi\n  if (msi != null && typeof msi !== \"boolean\") {\n    throw new Error(`msi expected to be boolean value, but string '\"${msi}\"' was specified`)\n  }\n}"
  ]
}
