{
  "version": 3,
  "file": "nsis.js",
  "sourceRoot": "",
  "sources": [
    "../../src/targets/nsis.ts"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "import { WinPackager } from \"../winPackager\"\nimport { Arch } from \"../metadata\"\nimport { exec, debug, doSpawn, handleProcess, use, asArray, isEmptyOrSpaces } from \"../util/util\"\nimport * as path from \"path\"\nimport BluebirdPromise from \"bluebird-lst-c\"\nimport { getBinFromBintray } from \"../util/binDownload\"\nimport { v5 as uuid5 } from \"uuid-1345\"\nimport { normalizeExt, getPublishConfigs, getResolvedPublishConfig, ArtifactCreated } from \"../platformPackager\"\nimport { archive } from \"./archive\"\nimport { subTask, log, warn } from \"../util/log\"\nimport { unlink, readFile, writeFile, createReadStream } from \"fs-extra-p\"\nimport { NsisOptions } from \"../options/winOptions\"\nimport { PublishConfiguration, GenericServerOptions, UpdateInfo } from \"electron-builder-http/out/publishOptions\"\nimport { safeDump } from \"js-yaml\"\nimport { createHash } from \"crypto\"\nimport { Target } from \"./targetFactory\"\nimport sanitizeFileName from \"sanitize-filename\"\n\nconst NSIS_VERSION = \"3.0.4\"\n//noinspection SpellCheckingInspection\nconst NSIS_SHA2 = \"c29883cb9a04733489590420b910ea7a91ba0f9b776fe4c647d9801f23175225\"\n\n//noinspection SpellCheckingInspection\nconst ELECTRON_BUILDER_NS_UUID = \"50e065bc-3134-11e6-9bab-38c9862bdaf3\"\n\nconst nsisPathPromise = getBinFromBintray(\"nsis\", NSIS_VERSION, NSIS_SHA2)\n\nexport default class NsisTarget extends Target {\n  private readonly options: NsisOptions = this.packager.config.nsis || Object.create(null)\n\n  private archs: Map<Arch, Promise<string>> = new Map()\n\n  private readonly nsisTemplatesDir = path.join(__dirname, \"..\", \"..\", \"templates\", \"nsis\")\n\n  private readonly publishConfigs = this.computePublishConfigs()\n\n  constructor(private packager: WinPackager, private outDir: string) {\n    super(\"nsis\")\n\n    const deps = packager.info.metadata.dependencies\n    if (deps != null && deps[\"electron-squirrel-startup\"] != null) {\n      warn('\"electron-squirrel-startup\" dependency is not required for NSIS')\n    }\n  }\n\n  private computePublishConfigs(): Promise<Array<PublishConfiguration> | null> {\n    const publishConfigs = getPublishConfigs(this.packager, this.options)\n    if (publishConfigs != null && publishConfigs.length > 0) {\n      return BluebirdPromise.map(publishConfigs, it => getResolvedPublishConfig(this.packager.info, it, true))\n    }\n    else {\n      return BluebirdPromise.resolve(null)\n    }\n  }\n\n  build(appOutDir: string, arch: Arch) {\n    this.archs.set(arch, this.doBuild(appOutDir, arch))\n    return BluebirdPromise.resolve(null)\n  }\n\n  private async doBuild(appOutDir: string, arch: Arch) {\n    log(`Packaging NSIS installer for arch ${Arch[arch]}`)\n\n    const publishConfigs = await this.publishConfigs\n    if (publishConfigs != null) {\n      await writeFile(path.join(appOutDir, \"resources\", \"app-update.yml\"), safeDump(publishConfigs[0]))\n    }\n\n    const packager = this.packager\n    const archiveFile = path.join(this.outDir, `${packager.appInfo.name}-${packager.appInfo.version}-${Arch[arch]}.nsis.7z`)\n    return await archive(packager.config.compression, \"7z\", archiveFile, appOutDir, true)\n  }\n\n  async finishBuild(): Promise<any> {\n    log(\"Building NSIS installer\")\n    try {\n      await this.buildInstaller()\n    }\n    finally {\n      await BluebirdPromise.map(this.archs.values(), it => unlink(it))\n    }\n  }\n\n  private async buildInstaller(): Promise<any> {\n    const packager = this.packager\n    const appInfo = packager.appInfo\n    const version = appInfo.version\n    const installerFilename = `${appInfo.productFilename} Setup ${version}.exe`\n    const options = this.options\n    const iconPath = await packager.getResource(options.installerIcon, \"installerIcon.ico\") || await packager.getIconPath()\n\n    const installerPath = path.join(this.outDir, installerFilename)\n    const guid = options.guid || await BluebirdPromise.promisify(uuid5)({namespace: ELECTRON_BUILDER_NS_UUID, name: appInfo.id})\n    const defines: any = {\n      APP_ID: appInfo.id,\n      APP_GUID: guid,\n      PRODUCT_NAME: appInfo.productName,\n      PRODUCT_FILENAME: appInfo.productFilename,\n      APP_FILENAME: appInfo.name,\n      APP_DESCRIPTION: appInfo.description,\n      VERSION: version,\n\n      COMPANY_NAME: appInfo.companyName,\n\n      PROJECT_DIR: packager.projectDir,\n      BUILD_RESOURCES_DIR: packager.buildResourcesDir,\n    }\n\n    if (iconPath != null) {\n      defines.MUI_ICON = iconPath\n      defines.MUI_UNICON = iconPath\n    }\n\n    for (const [arch, file] of this.archs) {\n      defines[arch === Arch.x64 ? \"APP_64\" : \"APP_32\"] = await file\n    }\n\n    const oneClick = options.oneClick !== false\n\n    const installerHeader = oneClick ? null : await packager.getResource(options.installerHeader, \"installerHeader.bmp\")\n    if (installerHeader != null) {\n      defines.MUI_HEADERIMAGE = null\n      defines.MUI_HEADERIMAGE_RIGHT = null\n      defines.MUI_HEADERIMAGE_BITMAP = installerHeader\n    }\n\n    const installerHeaderIcon = oneClick ? await packager.getResource(options.installerHeaderIcon, \"installerHeaderIcon.ico\") : null\n    if (installerHeaderIcon != null) {\n      defines.HEADER_ICO = installerHeaderIcon\n    }\n\n    if (options.perMachine === true) {\n      defines.INSTALL_MODE_PER_ALL_USERS = null\n    }\n\n    if (!oneClick || options.perMachine === true) {\n      defines.INSTALL_MODE_PER_ALL_USERS_REQUIRED = null\n    }\n\n    if (oneClick) {\n      if (options.runAfterFinish !== false) {\n        defines.RUN_AFTER_FINISH = null\n      }\n    }\n    else if (options.allowElevation !== false) {\n      defines.MULTIUSER_INSTALLMODE_ALLOW_ELEVATION = null\n    }\n\n    // Error: invalid VIProductVersion format, should be X.X.X.X\n    // so, we must strip beta\n    const localeId = options.language || \"1033\"\n    const versionKey = [\n      `/LANG=${localeId} ProductName \"${appInfo.productName}\"`,\n      `/LANG=${localeId} ProductVersion \"${appInfo.version}\"`,\n      `/LANG=${localeId} CompanyName \"${appInfo.companyName}\"`,\n      `/LANG=${localeId} LegalCopyright \"${appInfo.copyright}\"`,\n      `/LANG=${localeId} FileDescription \"${appInfo.description}\"`,\n      `/LANG=${localeId} FileVersion \"${appInfo.buildVersion}\"`,\n    ]\n    use(packager.platformSpecificBuildOptions.legalTrademarks, it => versionKey.push(`/LANG=${localeId} LegalTrademarks \"${it}\"`))\n\n    const commands: any = {\n      OutFile: `\"${installerPath}\"`,\n      VIProductVersion: appInfo.versionInWeirdWindowsForm,\n      VIAddVersionKey: versionKey,\n      Unicode: true,\n    }\n\n    if (packager.config.compression === \"store\") {\n      commands.SetCompress = \"off\"\n      defines.COMPRESS = \"off\"\n    }\n    else {\n      commands.SetCompressor = \"lzma\"\n      // default is 8: test app installer size 37.2 vs 36 if dict size 64\n      commands.SetCompressorDictSize = \"64\"\n\n      defines.COMPRESS = \"auto\"\n    }\n\n    if (oneClick) {\n      defines.ONE_CLICK = null\n    }\n\n    if (options.menuCategory != null) {\n      const menu = sanitizeFileName(options.menuCategory === true ? appInfo.companyName : <string>options.menuCategory)\n      if (!isEmptyOrSpaces(menu)) {\n        defines.MENU_FILENAME = menu\n      }\n    }\n\n    debug(defines)\n    debug(commands)\n\n    if (packager.options.effectiveOptionComputed != null && await packager.options.effectiveOptionComputed([defines, commands])) {\n      return\n    }\n\n    const licenseFile = await packager.getResource(options.license, \"license.rtf\", \"license.txt\")\n    if (licenseFile != null) {\n      defines.LICENSE_FILE = licenseFile\n    }\n\n    const customScriptPath = await packager.getResource(options.script, \"installer.nsi\")\n    const script = await readFile(customScriptPath || path.join(this.nsisTemplatesDir, \"installer.nsi\"), \"utf8\")\n\n    if (customScriptPath == null) {\n      const uninstallerPath = await packager.getTempFile(\"uninstaller.exe\")\n      const isWin = process.platform === \"win32\"\n      defines.BUILD_UNINSTALLER = null\n      defines.UNINSTALLER_OUT_FILE = isWin ? uninstallerPath : path.win32.join(\"Z:\", uninstallerPath)\n      await subTask(`Executing makensis — uninstaller`, this.executeMakensis(defines, commands, false, script))\n      await exec(isWin ? installerPath : \"wine\", isWin ? [] : [installerPath])\n      await packager.sign(uninstallerPath)\n\n      delete defines.BUILD_UNINSTALLER\n      // platform-specific path, not wine\n      defines.UNINSTALLER_OUT_FILE = uninstallerPath\n    }\n    else {\n      log(\"Custom NSIS script is used - uninstaller is not signed by electron-builder\")\n    }\n\n    await subTask(`Executing makensis — installer`, this.executeMakensis(defines, commands, true, script))\n    await packager.sign(installerPath)\n\n    const publishConfigs = await this.publishConfigs\n    const githubArtifactName = `${appInfo.name}-Setup-${version}.exe`\n    if (publishConfigs != null) {\n      let sha2: string | null = null\n      for (const publishConfig of publishConfigs) {\n        if (publishConfig.provider === \"generic\" || publishConfig.provider === \"github\") {\n          if (sha2 == null) {\n            sha2 = await sha256(installerPath)\n          }\n\n          const channel = (<GenericServerOptions>publishConfig).channel || \"latest\"\n          if (publishConfig.provider === \"generic\") {\n            await writeFile(path.join(this.outDir, `${channel}.yml`), safeDump(<UpdateInfo>{\n              version: version,\n              path: installerFilename,\n              sha2: sha2,\n            }))\n          }\n          else {\n            packager.info.eventEmitter.emit(\"artifactCreated\", <ArtifactCreated>{\n              data: new Buffer(safeDump(<UpdateInfo>{\n                version: version,\n                path: githubArtifactName,\n                sha2: sha2,\n              })),\n              artifactName: `${channel}.yml`,\n              packager: packager,\n              publishConfig: publishConfig,\n            })\n          }\n        }\n      }\n    }\n\n    packager.dispatchArtifactCreated(installerPath, githubArtifactName)\n  }\n\n  private async executeMakensis(defines: any, commands: any, isInstaller: boolean, originalScript: string) {\n    const args: Array<string> = (this.options.warningsAsErrors === false) ? [] : [\"-WX\"]\n    for (const name of Object.keys(defines)) {\n      const value = defines[name]\n      if (value == null) {\n        args.push(`-D${name}`)\n      }\n      else {\n        args.push(`-D${name}=${value}`)\n      }\n    }\n\n    for (const name of Object.keys(commands)) {\n      const value = commands[name]\n      if (Array.isArray(value)) {\n        for (const c of value) {\n          args.push(`-X${name} ${c}`)\n        }\n      }\n      else {\n        args.push(`-X${name} ${value}`)\n      }\n    }\n\n    args.push(\"-\")\n\n    const binDir = process.platform === \"darwin\" ? \"mac\" : (process.platform === \"win32\" ? \"Bin\" : \"linux\")\n    const nsisPath = await nsisPathPromise\n\n    let script = originalScript\n    const packager = this.packager\n    const customInclude = await packager.getResource(this.options.include, \"installer.nsh\")\n    if (customInclude != null) {\n      script = `!include \"${customInclude}\"\\n!addincludedir \"${packager.buildResourcesDir}\"\\n${script}`\n    }\n\n    const fileAssociations = packager.getFileAssociations()\n    if (fileAssociations.length !== 0) {\n      script = \"!include FileAssociation.nsh\\n\" + script\n      if (isInstaller) {\n        let registerFileAssociationsScript = \"\"\n        for (const item of fileAssociations) {\n          const extensions = asArray(item.ext).map(normalizeExt)\n          for (const ext of extensions) {\n            const customIcon = await packager.getResource(item.icon, `${extensions[0]}.ico`)\n            let installedIconPath = \"$appExe,0\"\n            if (customIcon != null) {\n              installedIconPath = `$INSTDIR\\\\resources\\\\${path.basename(customIcon)}`\n              //noinspection SpellCheckingInspection\n              registerFileAssociationsScript += `  File \"/oname=${installedIconPath}\" \"${customIcon}\"\\n`\n            }\n\n            const icon = `\"${installedIconPath}\"`\n            const commandText = `\"Open with ${packager.appInfo.productName}\"`\n            const command = '\"$appExe $\\\\\"%1$\\\\\"\"'\n            registerFileAssociationsScript += `  !insertmacro APP_ASSOCIATE \"${ext}\" \"${item.name}\" \"${item.description || \"\"}\" ${icon} ${commandText} ${command}\\n`\n          }\n        }\n        script = `!macro registerFileAssociations\\n${registerFileAssociationsScript}!macroend\\n${script}`\n      }\n      else {\n        let unregisterFileAssociationsScript = \"\"\n        for (const item of fileAssociations) {\n          for (const ext of asArray(item.ext)) {\n            unregisterFileAssociationsScript += `  !insertmacro APP_UNASSOCIATE \"${normalizeExt(ext)}\" \"${item.name}\"\\n`\n          }\n        }\n        script = `!macro unregisterFileAssociations\\n${unregisterFileAssociationsScript}!macroend\\n${script}`\n      }\n    }\n\n    if (debug.enabled) {\n      process.stdout.write(\"\\n\\nNSIS script:\\n\\n\" + script + \"\\n\\n---\\nEnd of NSIS script.\\n\\n\")\n    }\n\n    await new BluebirdPromise<any>((resolve, reject) => {\n      const command = path.join(nsisPath, binDir, process.platform === \"win32\" ? \"makensis.exe\" : \"makensis\")\n      const childProcess = doSpawn(command, args, {\n        // we use NSIS_CONFIG_CONST_DATA_PATH=no to build makensis on Linux, but in any case it doesn't use stubs as MacOS/Windows version, so, we explicitly set NSISDIR\n        env: Object.assign({}, process.env, {NSISDIR: nsisPath}),\n        cwd: this.nsisTemplatesDir,\n      }, true)\n      handleProcess(\"close\", childProcess, command, resolve, reject)\n\n      childProcess.stdin.end(script)\n    })\n  }\n}\n\nfunction sha256(file: string) {\n  return new BluebirdPromise<string>((resolve, reject) => {\n    const hash = createHash(\"sha256\")\n    hash\n      .on(\"error\", reject)\n      .setEncoding(\"hex\")\n\n    createReadStream(file)\n      .on(\"error\", reject)\n      .on(\"end\", () => {\n        hash.end()\n        resolve(<string>hash.read())\n      })\n      .pipe(hash, {end: false})\n  })\n}"
  ]
}
