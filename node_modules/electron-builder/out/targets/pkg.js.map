{
  "version": 3,
  "file": "pkg.js",
  "sourceRoot": "",
  "sources": [
    "../../src/targets/pkg.ts"
  ],
  "names": [],
  "mappings": ";;;;;;;;;;;;;;;;;AAAA,AAAO,AAAE,AAAI,AAAE,AAAM,AAAc;;;;AAGnC,AAAO,AAAK,AAAI,AAAM,AAAM;;;;AAC5B,AAAO,AAAE,AAAM,AAAE,AAAM,AAAiB,AAExC,AAAM;;;;;;MAAiB,AAAQ,AAAM;AACnC,gBAAoB,AAAqB;AACvC,AAAK,cAAC,AAAK,AAAC;AADM,aAAQ,WAAR,AAAQ,AAAa,AAEzC;AAAC;AAEK,AAAK,SAAX,AAAK,CAAO,AAAiB,WAAE,AAAU;;;;AACvC,kBAAM,AAAQ,WAAG,AAAI,MAAC,AAAQ;AAC9B,kBAAM,AAAO,UAAG,AAAQ,SAAC,AAAO;AAChC,kBAAM,AAAO,UAAG,AAAI,MAAC,AAAI,KAAC,AAAS,AAAE,eAAG,AAAO,QAAC,AAAe,qBAAI,AAAO,QAAC,AAAO,OAAM,AAAC;AACzF,kBAAM,AAAY,eAAG,CAAC,MAAM,AAAQ,SAAC,AAAe,AAAC,iBAAC,AAAY;AAClE,kBAAM,AAAI,OAAG,AAAuB,wBAAC,AAAI,MAAC,AAAI,KAAC,AAAS,AAAE,eAAG,AAAO,QAAC,AAAe,eAAM,AAAC,WAAE,MAAM,AAAQ,SAAC,AAAqB,sBAAC,AAAK,OAAE,AAAY,AAAC,gBAAE,AAAY,AAAC;AACrK,AAAI,iBAAC,AAAI,KAAC,AAAW,aAAE,AAAO,QAAC,AAAY,AAAC;AAC5C,AAAI,iBAAC,AAAI,KAAC,AAAO,AAAC;AAClB,kBAAM,AAAI,kCAAC,AAAc,gBAAE,AAAI,AAAC;AAChC,AAAQ,qBAAC,AAAuB,wBAAC,AAAO,AAAE,aAAG,AAAO,QAAC,AAAI,UAAI,AAAO,QAAC,AAAO,OAAM,AAAC,AACrF;;AAAC,AACF,AAED,AAAM;;;iCAAkC,AAAe,SAAE,AAAgB,UAAE,AAAoB;AAC7F,UAAM,AAAI,OAAG,CACX,AAAa,eAAE,AAAO,SAAE,AAAe,iBACvC,AAAQ,UAAE,AAAQ,AACnB;AACD,AAAE,AAAC,QAAC,AAAQ,YAAI,AAAI,AAAC,MAAC,AAAC;AACrB,AAAI,aAAC,AAAI,KAAC,AAAY,cAAE,AAAQ,AAAC,AACnC;AAAC;AACD,AAAM,WAAC,AAAI,AACb;AAAC",
  "sourcesContent": [
    "import { exec } from \"../util/util\"\nimport { Arch } from \"../metadata\"\nimport MacPackager from \"../macPackager\"\nimport * as path from \"path\"\nimport { Target } from \"./targetFactory\"\n\nexport class PkgTarget extends Target {\n  constructor(private packager: MacPackager) {\n    super(\"pkg\")\n  }\n\n  async build(appOutDir: string, arch: Arch): Promise<any> {\n    const packager = this.packager\n    const appInfo = packager.appInfo\n    const outFile = path.join(appOutDir, `${appInfo.productFilename}-${appInfo.version}.pkg`)\n    const keychainName = (await packager.codeSigningInfo).keychainName\n    const args = prepareProductBuildArgs(path.join(appOutDir, `${appInfo.productFilename}.app`), await packager.findInstallerIdentity(false, keychainName), keychainName)\n    args.push(\"--version\", appInfo.buildVersion)\n    args.push(outFile)\n    await exec(\"productbuild\", args)\n    packager.dispatchArtifactCreated(outFile, `${appInfo.name}-${appInfo.version}.pkg`)\n  }\n}\n\nexport function prepareProductBuildArgs(appPath: string, identity: string, keychain: string | n) {\n  const args = [\n    \"--component\", appPath, \"/Applications\",\n    \"--sign\", identity,\n  ]\n  if (keychain != null) {\n    args.push(\"--keychain\", keychain)\n  }\n  return args\n}"
  ]
}
