{
  "version": 3,
  "file": "LinuxTargetHelper.js",
  "sourceRoot": "",
  "sources": [
    "../../src/targets/LinuxTargetHelper.ts"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "import { readdir, outputFile, ensureDir } from \"fs-extra-p\"\nimport * as path from \"path\"\nimport { exec, debug, isEmptyOrSpaces } from \"../util/util\"\nimport BluebirdPromise from \"bluebird-lst-c\"\nimport { LinuxBuildOptions } from \"../options/linuxOptions\"\nimport { LinuxPackager } from \"../linuxPackager\"\n\nexport const installPrefix = \"/opt\"\n\nexport class LinuxTargetHelper {\n  readonly icons: Promise<Array<Array<string>>>\n\n  maxIconPath: string | null = null\n\n  constructor(private packager: LinuxPackager) {\n    this.icons = this.computeDesktopIcons()\n  }\n\n  // must be name without spaces and other special characters, but not product name used\n  private async computeDesktopIcons(): Promise<Array<Array<string>>> {\n    const resourceList = await this.packager.resourceList\n    if (resourceList.includes(\"icons\")) {\n      return await this.iconsFromDir(path.join(this.packager.buildResourcesDir, \"icons\"))\n    }\n    else {\n      const iconDir = await this.packager.getTempFile(\"linux.iconset\")\n      ensureDir(iconDir)\n      return await this.createFromIcns(iconDir)\n    }\n  }\n\n  private async iconsFromDir(iconsDir: string) {\n    const mappings: Array<Array<string>> = []\n    let maxSize = 0\n    for (const file of (await readdir(iconsDir))) {\n      if (file.endsWith(\".png\") || file.endsWith(\".PNG\")) {\n        // If parseInt encounters a character that is not a numeral in the specified radix,\n        // it returns the integer value parsed up to that point\n        try {\n          const size = parseInt(file!, 10)\n          if (size > 0) {\n            const iconPath = `${iconsDir}/${file}`\n            mappings.push([iconPath, `${size}x${size}/apps/${this.packager.executableName}.png`])\n\n            if (size > maxSize) {\n              maxSize = size\n              this.maxIconPath = iconPath\n            }\n          }\n        }\n        catch (e) {\n          console.error(e)\n        }\n      }\n    }\n    return mappings\n  }\n\n  private async getIcns(): Promise<string | null> {\n    const build = this.packager.config\n    let iconPath = (build.mac || {}).icon || build.icon\n    if (iconPath != null && !iconPath.endsWith(\".icns\")) {\n      iconPath += \".icns\"\n    }\n    return iconPath == null ? await this.packager.getDefaultIcon(\"icns\") : path.resolve(this.packager.projectDir, iconPath)\n  }\n\n  getDescription(options: LinuxBuildOptions) {\n    return options.description || this.packager.appInfo.description\n  }\n\n  async computeDesktopEntry(platformSpecificBuildOptions: LinuxBuildOptions, exec?: string, destination?: string | null, extra?: { [key: string]: string; }): Promise<string> {\n    const appInfo = this.packager.appInfo\n\n    const productFilename = appInfo.productFilename\n\n    const desktopMeta: any = Object.assign({\n      Name: appInfo.productName,\n      Comment: this.getDescription(platformSpecificBuildOptions),\n      Exec: exec == null ? `\"${installPrefix}/${productFilename}/${this.packager.executableName}\"` : exec,\n      Terminal: \"false\",\n      Type: \"Application\",\n      Icon: this.packager.executableName,\n    }, extra, platformSpecificBuildOptions.desktop)\n\n    const category = platformSpecificBuildOptions.category\n    if (!isEmptyOrSpaces(category)) {\n      desktopMeta.Categories = category\n    }\n\n    let data = `[Desktop Entry]`\n    for (const name of Object.keys(desktopMeta)) {\n      const value = desktopMeta[name]\n      data += `\\n${name}=${value}`\n    }\n    data += \"\\n\"\n\n    const tempFile = destination || await this.packager.getTempFile(`${productFilename}.desktop`)\n    await outputFile(tempFile, data)\n    return tempFile\n  }\n\n  private async createFromIcns(tempDir: string): Promise<Array<Array<string>>> {\n    const iconPath = await this.getIcns()\n    if (iconPath == null) {\n      return await this.iconsFromDir(path.join(__dirname, \"..\", \"..\", \"templates\", \"linux\", \"electron-icons\"))\n    }\n\n    if (process.platform === \"darwin\") {\n      await exec(\"iconutil\", [\"--convert\", \"iconset\", \"--output\", tempDir, iconPath])\n      const iconFiles = await readdir(tempDir)\n      const imagePath = iconFiles.includes(\"icon_512x512.png\") ? path.join(tempDir, \"icon_512x512.png\") : path.join(tempDir, \"icon_256x256.png\")\n      this.maxIconPath = imagePath\n\n      function resize(size: number): Promise<any> {\n        const filename = `icon_${size}x${size}.png`\n\n        if (iconFiles.includes(filename)) {\n          return BluebirdPromise.resolve()\n        }\n\n        const sizeArg = `${size}x${size}`\n        return exec(\"gm\", [\"convert\", \"-size\", sizeArg, imagePath, \"-resize\", sizeArg, path.join(tempDir, filename)])\n      }\n\n      const promises: Array<Promise<any>> = [resize(24), resize(96)]\n      promises.push(resize(16))\n      promises.push(resize(48))\n      promises.push(resize(64))\n      promises.push(resize(128))\n      await BluebirdPromise.all(promises)\n\n      return this.createMappings(tempDir)\n    }\n    else {\n      const output = await exec(\"icns2png\", [\"-x\", \"-o\", tempDir, iconPath])\n      debug(output)\n\n      //noinspection UnnecessaryLocalVariableJS\n      const imagePath = path.join(tempDir, \"icon_256x256x32.png\")\n\n      this.maxIconPath = imagePath\n\n      function resize(size: number): Promise<any> {\n        const sizeArg = `${size}x${size}`\n        return exec(\"gm\", [\"convert\", \"-size\", sizeArg, imagePath, \"-resize\", sizeArg, path.join(tempDir, `icon_${size}x${size}x32.png`)])\n      }\n\n      const promises: Array<Promise<any>> = [resize(24), resize(96)]\n      if (!output.includes(\"is32\")) {\n        promises.push(resize(16))\n      }\n      if (!output.includes(\"ih32\")) {\n        promises.push(resize(48))\n      }\n      if (!output.toString().includes(\"icp6\")) {\n        promises.push(resize(64))\n      }\n      if (!output.includes(\"it32\")) {\n        promises.push(resize(128))\n      }\n\n      await BluebirdPromise.all(promises)\n\n      return this.createMappings(tempDir)\n    }\n  }\n\n  private createMappings(tempDir: string) {\n    const name = this.packager.executableName\n\n    function createMapping(size: string) {\n      return [process.platform === \"darwin\" ? `${tempDir}/icon_${size}x${size}.png` : `${tempDir}/icon_${size}x${size}x32.png`, `${size}x${size}/apps/${name}.png`]\n    }\n\n    return [\n      createMapping(\"16\"),\n      createMapping(\"24\"),\n      createMapping(\"32\"),\n      createMapping(\"48\"),\n      createMapping(\"64\"),\n      createMapping(\"96\"),\n      createMapping(\"128\"),\n      createMapping(\"256\"),\n      createMapping(\"512\"),\n    ]\n  }\n}"
  ]
}
