{
  "version": 3,
  "file": "fpm.js",
  "sourceRoot": "",
  "sources": [
    "../../src/targets/fpm.ts"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "import { Arch, toLinuxArchString } from \"../metadata\"\nimport { smarten } from \"../platformPackager\"\nimport { use, exec } from \"../util/util\"\nimport * as path from \"path\"\nimport { getBin } from \"../util/binDownload\"\nimport { readFile, outputFile, ensureDir } from \"fs-extra-p\"\nimport BluebirdPromise from \"bluebird-lst-c\"\nimport { LinuxTargetHelper, installPrefix } from \"./LinuxTargetHelper\"\nimport * as errorMessages from \"../errorMessages\"\nimport { TmpDir } from \"../util/tmp\"\nimport { LinuxPackager } from \"../linuxPackager\"\nimport { log, warn } from \"../util/log\"\nimport { Target } from \"./targetFactory\"\nimport { unlinkIfExists } from \"../util/fs\"\n\nconst fpmPath = (process.platform === \"win32\" || process.env.USE_SYSTEM_FPM === \"true\") ?\n  BluebirdPromise.resolve(\"fpm\") : downloadFpm()\n\n// can be called in parallel, all calls for the same version will get the same promise - will be downloaded only once\nfunction downloadFpm(): Promise<string> {\n  const version = process.platform === \"darwin\" ? \"fpm-1.6.3-20150715-2.2.2\" : \"fpm-1.6.3-2.3.1\"\n  const osAndArch = process.platform === \"darwin\" ? \"mac\" : `linux-x86${process.arch === \"ia32\" ? \"\" : \"_64\"}`\n  //noinspection SpellCheckingInspection\n  const sha2 = process.platform === \"darwin\" ? \"1b13080ecfd2b6fddb984ed6e1dfcb38cdf5b051a04d609c2a95227ed9a5ecbc\" :\n    (process.arch === \"ia32\" ? \"b55f25749a27097140171f073466c52e59f733a275fea99e2334c540627ffc62\" : \"4c6fc529e996f7ff850da2d0bb6c85080e43be672494b14c0c6bdcc03bf57328\")\n\n  return getBin(\"fpm\", version, `https://dl.bintray.com/electron-userland/bin/${version}-${osAndArch}.7z`, sha2)\n    .then(it => path.join(it, \"fpm\"))\n}\n\nexport default class FpmTarget extends Target {\n  private readonly options = Object.assign({}, this.packager.platformSpecificBuildOptions, (<any>this.packager.config)[this.name])\n\n  private readonly scriptFiles: Promise<Array<string>>\n  private readonly desktopEntry: Promise<string>\n\n  constructor(name: string, private packager: LinuxPackager, private helper: LinuxTargetHelper, private outDir: string) {\n    super(name, false)\n\n    this.scriptFiles = this.createScripts()\n    this.desktopEntry = helper.computeDesktopEntry(this.options)\n  }\n\n  private async createScripts(): Promise<Array<string>> {\n    const defaultTemplatesDir = path.join(__dirname, \"..\", \"..\", \"templates\", \"linux\")\n\n    const packager = this.packager\n    const templateOptions = Object.assign({\n      // old API compatibility\n      executable: packager.executableName,\n      productFilename: packager.appInfo.productFilename,\n    }, packager.platformSpecificBuildOptions)\n\n    function getResource(value: string | n, defaultFile: string) {\n      if (value == null) {\n        return path.join(defaultTemplatesDir, defaultFile)\n      }\n      return path.resolve(packager.projectDir, value)\n    }\n\n    //noinspection ES6MissingAwait\n    return await BluebirdPromise.all<string>([\n      writeConfigFile(packager.info.tempDirManager, getResource(packager.platformSpecificBuildOptions.afterInstall, \"after-install.tpl\"), templateOptions),\n      writeConfigFile(packager.info.tempDirManager, getResource(packager.platformSpecificBuildOptions.afterRemove, \"after-remove.tpl\"), templateOptions)\n    ])\n  }\n\n  async build(appOutDir: string, arch: Arch): Promise<any> {\n    const target = this.name\n\n    log(`Building ${target}`)\n\n    const destination = path.join(this.outDir, this.packager.generateName(target, arch, true /* on Linux we use safe name — without space */))\n    await unlinkIfExists(destination)\n    if (this.packager.info.options.prepackaged != null) {\n      await ensureDir(this.outDir)\n    }\n\n    const scripts = await this.scriptFiles\n    const packager = this.packager\n    const appInfo = packager.appInfo\n\n    const projectUrl = await appInfo.computePackageUrl()\n    if (projectUrl == null) {\n      throw new Error(\"Please specify project homepage, see https://github.com/electron-userland/electron-builder/wiki/Options#AppMetadata-homepage\")\n    }\n\n    const options = this.options\n    let author = options.maintainer\n    if (author == null) {\n      const a = appInfo.metadata.author!\n      if (a.email == null) {\n        throw new Error(errorMessages.authorEmailIsMissed)\n      }\n      author = `${a.name} <${a.email}>`\n    }\n\n    const synopsis = options.synopsis\n    const args = [\n      \"-s\", \"dir\",\n      \"-t\", target,\n      \"--architecture\", toLinuxArchString(arch),\n      \"--name\", appInfo.name,\n      \"--force\",\n      \"--after-install\", scripts[0],\n      \"--after-remove\", scripts[1],\n      \"--description\", smarten(target === \"rpm\" ? this.helper.getDescription(options)! : `${synopsis || \"\"}\\n ${this.helper.getDescription(options)}`),\n      \"--maintainer\", author,\n      \"--vendor\", options.vendor || author,\n      \"--version\", appInfo.version,\n      \"--package\", destination,\n      \"--url\", projectUrl,\n    ]\n\n    const packageCategory = options.packageCategory\n    if (packageCategory != null && packageCategory !== null) {\n      args.push(\"--category\", packageCategory)\n    }\n\n    if (target === \"deb\") {\n      args.push(\"--deb-compression\", options.compression || (packager.config.compression === \"store\" ? \"gz\" : \"xz\"))\n    }\n    else if (target === \"rpm\") {\n      // args.push(\"--rpm-compression\", options.compression || (this.config.compression === \"store\" ? \"none\" : \"xz\"))\n      args.push(\"--rpm-os\", \"linux\")\n\n      if (synopsis != null) {\n        args.push(\"--rpm-summary\", smarten(synopsis))\n      }\n    }\n\n    let depends = options.depends\n    if (depends == null) {\n      if (target === \"deb\") {\n        depends = [\"gconf2\", \"gconf-service\", \"libnotify4\", \"libappindicator1\", \"libxtst6\", \"libnss3\"]\n      }\n      else {\n        depends = []\n      }\n    }\n    else if (!Array.isArray(depends)) {\n      if (typeof depends === \"string\") {\n        depends = [<string>depends]\n      }\n      else {\n        throw new Error(`depends must be Array or String, but specified as: ${depends}`)\n      }\n    }\n\n    for (const dep of depends) {\n      args.push(\"--depends\", dep)\n    }\n\n    use(packager.appInfo.metadata.license, it => args.push(\"--license\", it!))\n    use(appInfo.buildNumber, it => args.push(\"--iteration\", it!))\n\n    use(options.fpm, it => args.push(...<any>it))\n\n    args.push(`${appOutDir}/=${installPrefix}/${appInfo.productFilename}`)\n    for (const mapping of (await this.helper.icons)) {\n      args.push(mapping.join(\"=/usr/share/icons/hicolor/\"))\n    }\n\n    args.push(`${await this.desktopEntry}=/usr/share/applications/${this.packager.executableName}.desktop`)\n\n    await exec(await fpmPath, args)\n\n    this.packager.dispatchArtifactCreated(destination)\n  }\n}\n\nasync function writeConfigFile(tmpDir: TmpDir, templatePath: string, options: any): Promise<string> {\n  //noinspection JSUnusedLocalSymbols\n  function replacer(match: string, p1: string) {\n    if (p1 in options) {\n      return options[p1]\n    }\n    else {\n      throw new Error(`Macro ${p1} is not defined`)\n    }\n  }\n  const config = (await readFile(templatePath, \"utf8\"))\n    .replace(/\\$\\{([a-zA-Z]+)\\}/g, replacer)\n    .replace(/<%=([a-zA-Z]+)%>/g, (match, p1) => {\n      warn(\"<%= varName %> is deprecated, please use ${varName} instead\")\n      return replacer(match, p1.trim())\n    })\n\n  const outputPath = await tmpDir.getTempFile(path.basename(templatePath, \".tpl\"))\n  await outputFile(outputPath, config)\n  return outputPath\n}\n"
  ]
}
