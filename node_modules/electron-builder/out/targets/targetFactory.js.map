{
  "version": 3,
  "file": "targetFactory.js",
  "sourceRoot": "",
  "sources": [
    "../../src/targets/targetFactory.ts"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "import { PlatformPackager } from \"../platformPackager\"\nimport { Arch, Platform } from \"../metadata\"\nimport { tar, archive } from \"./archive\"\nimport * as path from \"path\"\nimport { log } from \"../util/log\"\nimport BluebirdPromise from \"bluebird-lst-c\"\n\nconst archiveTargets = new Set([\"zip\", \"7z\", \"tar.xz\", \"tar.lz\", \"tar.gz\", \"tar.bz2\"])\nexport const DEFAULT_TARGET = \"default\"\nexport const DIR_TARGET = \"dir\"\n\nexport abstract class Target {\n  constructor(public readonly name: string, public readonly isAsyncSupported: boolean = true) {\n  }\n\n  abstract build(appOutDir: string, arch: Arch): Promise<any>\n\n  finishBuild(): Promise<any> {\n    return BluebirdPromise.resolve()\n  }\n}\n\nexport function createTargets(nameToTarget: Map<String, Target>, rawList: Array<string> | n, outDir: string, packager: PlatformPackager<any>, cleanupTasks: Array<() => Promise<any>>): Array<Target> {\n  const result: Array<Target> = []\n\n  const mapper = (name: string, factory: (outDir: string) => Target) => {\n    let target = nameToTarget.get(name)\n    if (target == null) {\n      target = factory(outDir)\n      nameToTarget.set(name, target)\n    }\n    result.push(target)\n  }\n\n  const targets = normalizeTargets(rawList == null || rawList.length === 0 ? packager.platformSpecificBuildOptions.target : rawList, packager.defaultTarget)\n  packager.createTargets(targets, mapper, cleanupTasks)\n  return result\n}\n\nfunction normalizeTargets(targets: Array<string> | string | null | undefined, defaultTarget: Array<string>): Array<string> {\n  if (targets == null) {\n    return defaultTarget\n  }\n\n  const list: Array<string> = []\n  for (const t of (Array.isArray(targets) ? targets : [targets])) {\n    const name = t.toLowerCase().trim()\n    if (name === DEFAULT_TARGET) {\n      list.push(...defaultTarget)\n    }\n    else {\n      list.push(name)\n    }\n  }\n  return list\n}\n\nexport function createCommonTarget(target: string, outDir: string, packager: PlatformPackager<any>): Target {\n  if (archiveTargets.has(target)) {\n    return new ArchiveTarget(target, outDir, packager)\n  }\n  else if (target === \"dir\") {\n    return new NoOpTarget(\"dir\")\n  }\n  else {\n    throw new Error(`Unknown target: ${target}`)\n  }\n}\n\nexport class NoOpTarget extends Target {\n  async build(appOutDir: string, arch: Arch): Promise<any> {\n    // no build\n  }\n}\n\nclass ArchiveTarget extends Target {\n  constructor(name: string, private outDir: string, private readonly packager: PlatformPackager<any>) {\n    super(name)\n  }\n\n  async build(appOutDir: string, arch: Arch): Promise<any> {\n    const packager = this.packager\n    const isMac = packager.platform === Platform.MAC\n    const outDir = this.outDir\n\n    const format = this.name\n    log(`Building ${isMac ? \"macOS \" : \"\"}${format}`)\n\n    // we use app name here - see https://github.com/electron-userland/electron-builder/pull/204\n    const outFile = (() => {\n      switch (packager.platform) {\n        case Platform.MAC:\n          return path.join(appOutDir, packager.generateName2(format, \"mac\", false))\n        case Platform.WINDOWS:\n          return path.join(outDir, packager.generateName(format, arch, false, \"win\"))\n        case Platform.LINUX:\n          return path.join(outDir, packager.generateName(format, arch, true))\n        default:\n          throw new Error(`Unknown platform: ${packager.platform}`)\n      }\n    })()\n\n    const dirToArchive = isMac ? path.join(appOutDir, `${packager.appInfo.productFilename}.app`) : appOutDir\n    if (format.startsWith(\"tar.\")) {\n      await tar(packager.config.compression, format, outFile, dirToArchive, isMac)\n    }\n    else {\n      await archive(packager.config.compression, format, outFile, dirToArchive)\n    }\n\n    packager.dispatchArtifactCreated(outFile, isMac ? packager.generateName2(format, \"mac\", true) : packager.generateName(format, arch, true, packager.platform === Platform.WINDOWS ? \"win\" : null))\n  }\n}"
  ]
}
