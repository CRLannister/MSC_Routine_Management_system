{
  "version": 3,
  "file": "builder.js",
  "sourceRoot": "",
  "sources": [
    "../src/builder.ts"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "import { Packager, normalizePlatforms } from \"./packager\"\nimport { PackagerOptions, getPublishConfigs, getResolvedPublishConfig } from \"./platformPackager\"\nimport { PublishOptions, Publisher } from \"./publish/publisher\"\nimport { GitHubPublisher } from \"./publish/gitHubPublisher\"\nimport { executeFinally } from \"./util/promise\"\nimport BluebirdPromise from \"bluebird-lst-c\"\nimport { isEmptyOrSpaces, debug } from \"./util/util\"\nimport { log } from \"./util/log\"\nimport { Platform, Arch, archFromString } from \"./metadata\"\nimport { DIR_TARGET } from \"./targets/targetFactory\"\nimport { BintrayPublisher } from \"./publish/BintrayPublisher\"\nimport { PublishConfiguration, GithubOptions, BintrayOptions } from \"electron-builder-http/out/publishOptions\"\nimport isCi from \"is-ci\"\n\nexport interface BuildOptions extends PackagerOptions, PublishOptions {\n}\n\nexport interface CliOptions extends PackagerOptions, PublishOptions {\n  mac?: Array<string>\n  linux?: Array<string>\n  win?: Array<string>\n\n  arch?: string\n\n  x64?: boolean\n  ia32?: boolean\n  armv7l?: boolean\n\n  dir?: boolean\n\n  platform?: string\n\n  project?: string\n}\n\nfunction addValue<K, T>(map: Map<K, Array<T>>, key: K, value: T) {\n  const list = map.get(key)\n  if (list == null) {\n    map.set(key, [value])\n  }\n  else {\n    list.push(value)\n  }\n}\n\nexport function normalizeOptions(args: CliOptions): BuildOptions {\n  if (args.targets != null) {\n    return args\n  }\n\n  let targets = new Map<Platform, Map<Arch, Array<string>>>()\n\n  function processTargets(platform: Platform, types: Array<string>) {\n    if (args.platform != null) {\n      throw new Error(`--platform cannot be used if --${platform.buildConfigurationKey} is passed`)\n    }\n    if (args.arch != null) {\n      throw new Error(`--arch cannot be used if --${platform.buildConfigurationKey} is passed`)\n    }\n\n    function commonArch(): Array<Arch> {\n      const result = Array<Arch>()\n      if (args.x64) {\n        result.push(Arch.x64)\n      }\n      if (args.armv7l) {\n        result.push(Arch.armv7l)\n      }\n      if (args.ia32) {\n        result.push(Arch.ia32)\n      }\n\n      return result.length === 0 ? [archFromString(process.arch)] : result\n    }\n\n    let archToType = targets.get(platform)\n    if (archToType == null) {\n      archToType = new Map<Arch, Array<string>>()\n      targets.set(platform, archToType)\n    }\n\n    if (types.length === 0) {\n      const defaultTargetValue = args.dir ? [DIR_TARGET] : []\n      if (platform === Platform.MAC) {\n        archToType.set(Arch.x64, defaultTargetValue)\n      }\n      else {\n        for (const arch of commonArch()) {\n          archToType.set(arch, defaultTargetValue)\n        }\n      }\n      return\n    }\n\n    for (const type of types) {\n      let arch: string\n      if (platform === Platform.MAC) {\n        arch = \"x64\"\n        addValue(archToType, Arch.x64, type)\n      }\n      else {\n        const suffixPos = type.lastIndexOf(\":\")\n        if (suffixPos > 0) {\n          addValue(archToType, archFromString(type.substring(suffixPos + 1)), type.substring(0, suffixPos))\n        }\n        else {\n          for (const arch of commonArch()) {\n            addValue(archToType, arch, type)\n          }\n        }\n      }\n    }\n  }\n\n  if (args.mac != null) {\n    processTargets(Platform.MAC, args.mac)\n  }\n\n  if (args.linux != null) {\n    processTargets(Platform.LINUX, args.linux)\n  }\n\n  if (args.win != null) {\n    processTargets(Platform.WINDOWS, args.win)\n  }\n\n  if (targets.size === 0) {\n    if (args.platform == null && args.arch == null) {\n      processTargets(Platform.current(), [])\n    }\n    else {\n      targets = createTargets(normalizePlatforms(args.platform), args.dir ? DIR_TARGET : null, args.arch)\n    }\n  }\n\n  const result = Object.assign({}, args)\n  result.targets = targets\n\n  delete result.dir\n  delete result.mac\n  delete result.linux\n  delete result.win\n  delete result.platform\n  delete result.arch\n\n  const r = <any>result\n  delete r.em\n\n  delete r.m\n  delete r.o\n  delete r.l\n  delete r.w\n  delete r.windows\n  delete r.macos\n  delete r.$0\n  delete r._\n  delete r.version\n  delete r.help\n\n  delete result.ia32\n  delete result.x64\n  delete result.armv7l\n\n  if (result.project != null) {\n    result.projectDir = result.project\n  }\n  delete result.project\n  return result\n}\n\nexport function createTargets(platforms: Array<Platform>, type?: string | null, arch?: string | null): Map<Platform, Map<Arch, Array<string>>> {\n  const targets = new Map<Platform, Map<Arch, Array<string>>>()\n  for (const platform of platforms) {\n    const archs = platform === Platform.MAC ? [Arch.x64] : (arch === \"all\" ? [Arch.x64, Arch.ia32] : [archFromString(arch == null ? process.arch : arch)])\n    const archToType = new Map<Arch, Array<string>>()\n    targets.set(platform, archToType)\n\n    for (const arch of archs) {\n      archToType.set(arch, type == null ? [] : [type])\n    }\n  }\n  return targets\n}\n\nexport async function build(rawOptions?: CliOptions): Promise<Array<string>> {\n  const options = normalizeOptions(rawOptions || {})\n\n  if (options.cscLink === undefined && !isEmptyOrSpaces(process.env.CSC_LINK)) {\n    options.cscLink = process.env.CSC_LINK\n  }\n  if (options.cscInstallerLink === undefined && !isEmptyOrSpaces(process.env.CSC_INSTALLER_LINK)) {\n    options.cscInstallerLink = process.env.CSC_INSTALLER_LINK\n  }\n  if (options.cscKeyPassword === undefined && !isEmptyOrSpaces(process.env.CSC_KEY_PASSWORD)) {\n    options.cscKeyPassword = process.env.CSC_KEY_PASSWORD\n  }\n  if (options.cscInstallerKeyPassword === undefined && !isEmptyOrSpaces(process.env.CSC_INSTALLER_KEY_PASSWORD)) {\n    options.cscInstallerKeyPassword = process.env.CSC_INSTALLER_KEY_PASSWORD\n  }\n\n  if (options.draft === undefined && !isEmptyOrSpaces(process.env.EP_DRAFT)) {\n    options.draft = process.env.EP_DRAFT.toLowerCase() === \"true\"\n  }\n  if (options.prerelease === undefined && !isEmptyOrSpaces(process.env.EP_PRELEASE)) {\n    options.prerelease = process.env.EP_PRELEASE.toLowerCase() === \"true\"\n  }\n\n  let isPublishOptionGuessed = false\n  if (options.publish === undefined) {\n    if (process.env.npm_lifecycle_event === \"release\") {\n      options.publish = \"always\"\n    }\n    else if (isAuthTokenSet() ) {\n      const tag = process.env.TRAVIS_TAG || process.env.APPVEYOR_REPO_TAG_NAME || process.env.CIRCLE_TAG\n      if (!isEmptyOrSpaces(tag)) {\n        log(`Tag ${tag} is defined, so artifacts will be published`)\n        options.publish = \"onTag\"\n        isPublishOptionGuessed = true\n      }\n      else if (isCi) {\n        log(\"CI detected, so artifacts will be published if draft release exists\")\n        options.publish = \"onTagOrDraft\"\n        isPublishOptionGuessed = true\n      }\n    }\n  }\n\n  const packager = new Packager(options)\n  const publishTasks: Array<BluebirdPromise<any>> = []\n\n  if (options.publish != null && options.publish !== \"never\") {\n    // todo if token set as option\n    if (isAuthTokenSet()) {\n      publishManager(packager, publishTasks, options, isPublishOptionGuessed)\n    }\n    else if (isCi) {\n      log(`CI detected, publish is set to ${options.publish}, but neither GH_TOKEN nor BT_TOKEN is not set, so artifacts will be not published`)\n    }\n  }\n\n  //noinspection JSMismatchedCollectionQueryUpdate\n  const artifactPaths: Array<string> = []\n  packager.artifactCreated(event => {\n    if (event.file != null) {\n      artifactPaths.push(event.file)\n    }\n  })\n\n  return await executeFinally(packager.build().then(() => artifactPaths), errorOccurred => {\n    if (errorOccurred) {\n      for (const task of publishTasks) {\n        task!.cancel()\n      }\n      return BluebirdPromise.resolve(null)\n    }\n    else {\n      return BluebirdPromise.all(publishTasks)\n    }\n  })\n}\n\nfunction isAuthTokenSet() {\n  return !isEmptyOrSpaces(process.env.GH_TOKEN) || !isEmptyOrSpaces(process.env.BT_TOKEN)\n}\n\nfunction publishManager(packager: Packager, publishTasks: Array<BluebirdPromise<any>>, options: BuildOptions, isPublishOptionGuessed: boolean) {\n  const nameToPublisher = new Map<string, Promise<Publisher>>()\n\n  function getOrCreatePublisher(publishConfig: PublishConfiguration): Promise<Publisher | null> {\n    let publisher = nameToPublisher.get(publishConfig.provider)\n    if (publisher == null) {\n      publisher = createPublisher(packager, publishConfig, options, isPublishOptionGuessed)\n      nameToPublisher.set(publishConfig.provider, publisher)\n    }\n    return publisher\n  }\n\n  packager.artifactCreated(event => {\n    const publishers = event.publishConfig == null ? getPublishConfigs(event.packager, event.packager.platformSpecificBuildOptions) : [event.publishConfig]\n    // if explicitly set to null - do not publish\n    if (publishers === null) {\n      debug(`${event.file} is not published: publish is set to null`)\n      return\n    }\n\n    for (const publishConfig of publishers) {\n      const publisher = getOrCreatePublisher(publishConfig)\n      if (publisher != null) {\n        publisher\n          .then(it => {\n            if (it == null) {\n              return null\n            }\n\n            if (event.file == null) {\n              return publishTasks.push(<BluebirdPromise<any>>it.uploadData(event.data!, event.artifactName!))\n            }\n            else {\n              return publishTasks.push(<BluebirdPromise<any>>it.upload(event.file!, event.artifactName))\n            }\n          })\n      }\n    }\n  })\n}\n\n// visible only for tests\n// call only from this file or from tests\nexport async function createPublisher(packager: Packager, publishConfig: PublishConfiguration | GithubOptions | BintrayOptions, options: PublishOptions, isPublishOptionGuessed: boolean = false): Promise<Publisher | null> {\n  const config = await getResolvedPublishConfig(packager, publishConfig, isPublishOptionGuessed)\n  if (config == null) {\n    return null\n  }\n\n  const version = packager.metadata.version!\n  if (publishConfig.provider === \"github\") {\n    const githubInfo: GithubOptions = config\n    log(`Creating Github Publisher — owner: ${githubInfo.owner}, project: ${githubInfo.repo}, version: ${version}`)\n    return new GitHubPublisher(githubInfo, version, options, isPublishOptionGuessed)\n  }\n  if (publishConfig.provider === \"bintray\") {\n    const bintrayInfo: BintrayOptions = config\n    log(`Creating Bintray Publisher — user: ${bintrayInfo.user || bintrayInfo.owner}, owner: ${bintrayInfo.owner},  package: ${bintrayInfo.package}, repository: ${bintrayInfo.repo}, version: ${version}`)\n    return new BintrayPublisher(bintrayInfo, version, options)\n  }\n  return null\n}"
  ]
}
