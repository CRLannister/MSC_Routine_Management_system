{
  "version": 3,
  "file": "httpExecutor.js",
  "sourceRoot": "",
  "sources": [
    "../src/httpExecutor.ts"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "import { Url } from \"url\"\nimport { createHash } from \"crypto\"\nimport { Transform } from \"stream\"\nimport { createWriteStream } from \"fs-extra-p\"\n\nexport interface DownloadOptions {\n  skipDirCreation?: boolean\n  sha2?: string\n  onProgress?(progress: any): void\n}\n\nexport function download(url: string, destination: string, options?: DownloadOptions | null): Promise<string> {\n  return executorHolder.httpExecutor.download(url, destination, options)\n}\n\nexport class HttpExecutorHolder {\n  private _httpExecutor: HttpExecutor<any, any>\n\n  get httpExecutor(): HttpExecutor<any, any> {\n    if (this._httpExecutor == null) {\n      this._httpExecutor = new (require(\"electron-builder/out/util/nodeHttpExecutor\").NodeHttpExecutor)()\n    }\n    return this._httpExecutor\n  }\n\n  set httpExecutor(value: HttpExecutor<any, any>) {\n    this._httpExecutor = value\n  }\n}\n\nexport const maxRedirects = 10\n\nexport abstract class HttpExecutor<REQUEST_OPTS, REQUEST> {\n  request<T>(url: Url, token?: string | null, data?: {[name: string]: any; } | null, method?: string, headers?: any): Promise<T> {\n    const defaultHeaders = {\"User-Agent\": \"electron-builder\"}\n    const options = Object.assign({\n      method: method,\n      headers: headers == null ? defaultHeaders : Object.assign(defaultHeaders, headers)\n    }, url)\n\n\n    if (url.hostname!!.includes(\"github\") && !url.path!.endsWith(\".yml\") && !options.headers.Accept) {\n      options.headers[\"Accept\"] = \"application/vnd.github.v3+json\"\n    }\n\n    const encodedData = data == null ? undefined : new Buffer(JSON.stringify(data))\n    if (encodedData != null) {\n      options.method = \"post\"\n      options.headers[\"Content-Type\"] = \"application/json\"\n      options.headers[\"Content-Length\"] = encodedData.length\n    }\n    return this.doApiRequest<T>(<any>options, token || null, it => (<any>it).end(encodedData), 0)\n  }\n\n  protected abstract doApiRequest<T>(options: REQUEST_OPTS, token: string | null, requestProcessor: (request: REQUEST, reject: (error: Error) => void) => void, redirectCount: number): Promise<T>\n\n  abstract download(url: string, destination: string, options?: DownloadOptions | null): Promise<string>\n}\n\nexport class HttpError extends Error {\n  constructor(public readonly response: {statusMessage?: string | undefined, statusCode?: number | undefined, headers?: { [key: string]: string[]; } | undefined}, public description: any | null = null) {\n    super(response.statusCode + \" \" + response.statusMessage + (description == null ? \"\" : (\"\\n\" + JSON.stringify(description, null, \"  \"))) + \"\\nHeaders: \" + JSON.stringify(response.headers, null, \"  \"))\n\n    this.name = \"HttpError\"\n  }\n}\n\nclass ProgressCallbackTransform extends Transform {\n  private start = Date.now()\n  private transferred = 0\n\n  constructor(private onProgress: any, private total: number) {\n    super()\n  }\n\n  _transform(chunk: any, encoding: string, callback: Function) {\n    this.transferred = calculateDownloadProgress(this.total, this.start, this.transferred, chunk, this.onProgress)\n    callback(null, chunk)\n  }\n}\n\nclass DigestTransform extends Transform {\n  private readonly digester = createHash(\"sha256\")\n\n  constructor(private expected: string) {\n    super()\n  }\n\n  _transform(chunk: any, encoding: string, callback: Function) {\n    this.digester.update(chunk)\n    callback(null, chunk)\n  }\n\n  _flush(callback: Function): void {\n    const hash = this.digester.digest(\"hex\")\n    callback(hash === this.expected ? null : new Error(`SHA2 checksum mismatch, expected ${this.expected}, got ${hash}`))\n  }\n}\n\nexport const executorHolder = new HttpExecutorHolder()\n\nexport function githubRequest<T>(path: string, token: string | null, data: {[name: string]: any; } | null = null, method: string = \"GET\"): Promise<T> {\n  return request<T>({hostname: \"api.github.com\", path: path}, token, data, method)\n}\n\nexport function request<T>(url: Url, token: string | null = null, data: {[name: string]: any; } | null = null, method: string = \"GET\", headers?: any): Promise<T> {\n  return executorHolder.httpExecutor.request(url, token, data, method, headers)\n}\n\nfunction checkSha2(sha2Header: string | null | undefined, sha2: string | null | undefined, callback: (error: Error | null) => void): boolean {\n  if (sha2Header != null && sha2 != null) {\n    // todo why bintray doesn't send this header always\n    if (sha2Header == null) {\n      callback(new Error(\"checksum is required, but server response doesn't contain X-Checksum-Sha2 header\"))\n      return false\n    }\n    else if (sha2Header !== sha2) {\n      callback(new Error(`checksum mismatch: expected ${sha2} but got ${sha2Header} (X-Checksum-Sha2 header)`))\n      return false\n    }\n  }\n  return true\n}\n\nexport function calculateDownloadProgress(total: number, start: number, transferred: number, chunk: any, callback: any): number {\n    transferred += chunk.length\n    callback({\n      total: total,\n      transferred: transferred,\n      percent: ((transferred / total) * 100).toFixed(2),\n      bytesPerSecond: Math.round(transferred / ((Date.now() - start) / 1000))\n    })\n    return transferred\n}\n\nexport function safeGetHeader(response: any, headerKey: string) {\n  const value = response.headers[headerKey]\n  if (value == null) {\n    return null\n  }\n  else if (Array.isArray(value)) {\n    // electron API\n    return value.length === 0 ? null : value[value.length - 1]\n  }\n  else {\n    return value\n  }\n}\n\nexport function configurePipes(options: DownloadOptions, response: any, destination: string, callback: (error: Error | null) => void) {\n  if (!checkSha2(safeGetHeader(response, \"X-Checksum-Sha2\"), options.sha2, callback)) {\n    return\n  }\n\n  const streams: Array<any> = []\n  if (options.onProgress != null) {\n    const contentLength = safeGetHeader(response, \"content-length\")\n    if (contentLength != null) {\n      streams.push(new ProgressCallbackTransform(options.onProgress, parseInt(contentLength, 10)))\n    }\n  }\n\n  if (options.sha2 != null) {\n    streams.push(new DigestTransform(options.sha2))\n  }\n\n  const fileOut = createWriteStream(destination)\n  streams.push(fileOut)\n\n  let lastStream = response\n  for (const stream of streams) {\n    lastStream = lastStream.pipe(stream)\n  }\n\n  fileOut.on(\"finish\", () => (<any>fileOut.close)(callback))\n}"
  ]
}
