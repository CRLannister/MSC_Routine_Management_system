"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.executorHolder = exports.HttpError = exports.HttpExecutor = exports.maxRedirects = exports.HttpExecutorHolder = undefined;
exports.download = download;
exports.githubRequest = githubRequest;
exports.request = request;
exports.calculateDownloadProgress = calculateDownloadProgress;
exports.safeGetHeader = safeGetHeader;
exports.configurePipes = configurePipes;

var _crypto;

function _load_crypto() {
    return _crypto = require("crypto");
}

var _stream;

function _load_stream() {
    return _stream = require("stream");
}

var _fsExtraP;

function _load_fsExtraP() {
    return _fsExtraP = require("fs-extra-p");
}

function download(url, destination, options) {
    return executorHolder.httpExecutor.download(url, destination, options);
}
class HttpExecutorHolder {
    get httpExecutor() {
        if (this._httpExecutor == null) {
            this._httpExecutor = new (require("electron-builder/out/util/nodeHttpExecutor").NodeHttpExecutor)();
        }
        return this._httpExecutor;
    }
    set httpExecutor(value) {
        this._httpExecutor = value;
    }
}
exports.HttpExecutorHolder = HttpExecutorHolder;
const maxRedirects = exports.maxRedirects = 10;
class HttpExecutor {
    request(url, token, data, method, headers) {
        const defaultHeaders = { "User-Agent": "electron-builder" };
        const options = Object.assign({
            method: method,
            headers: headers == null ? defaultHeaders : Object.assign(defaultHeaders, headers)
        }, url);
        if (url.hostname.indexOf("github") !== -1 && !url.path.endsWith(".yml") && !options.headers.Accept) {
            options.headers["Accept"] = "application/vnd.github.v3+json";
        }
        const encodedData = data == null ? undefined : new Buffer(JSON.stringify(data));
        if (encodedData != null) {
            options.method = "post";
            options.headers["Content-Type"] = "application/json";
            options.headers["Content-Length"] = encodedData.length;
        }
        return this.doApiRequest(options, token || null, it => it.end(encodedData), 0);
    }
}
exports.HttpExecutor = HttpExecutor;
class HttpError extends Error {
    constructor(response) {
        let description = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

        super(response.statusCode + " " + response.statusMessage + (description == null ? "" : "\n" + JSON.stringify(description, null, "  ")) + "\nHeaders: " + JSON.stringify(response.headers, null, "  "));
        this.response = response;
        this.description = description;
        this.name = "HttpError";
    }
}
exports.HttpError = HttpError;
class ProgressCallbackTransform extends (_stream || _load_stream()).Transform {
    constructor(onProgress, total) {
        super();
        this.onProgress = onProgress;
        this.total = total;
        this.start = Date.now();
        this.transferred = 0;
    }
    _transform(chunk, encoding, callback) {
        this.transferred = calculateDownloadProgress(this.total, this.start, this.transferred, chunk, this.onProgress);
        callback(null, chunk);
    }
}
class DigestTransform extends (_stream || _load_stream()).Transform {
    constructor(expected) {
        super();
        this.expected = expected;
        this.digester = (0, (_crypto || _load_crypto()).createHash)("sha256");
    }
    _transform(chunk, encoding, callback) {
        this.digester.update(chunk);
        callback(null, chunk);
    }
    _flush(callback) {
        const hash = this.digester.digest("hex");
        callback(hash === this.expected ? null : new Error(`SHA2 checksum mismatch, expected ${ this.expected }, got ${ hash }`));
    }
}
const executorHolder = exports.executorHolder = new HttpExecutorHolder();
function githubRequest(path, token) {
    let data = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
    let method = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : "GET";

    return request({ hostname: "api.github.com", path: path }, token, data, method);
}
function request(url) {
    let token = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
    let data = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
    let method = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : "GET";
    let headers = arguments[4];

    return executorHolder.httpExecutor.request(url, token, data, method, headers);
}
function checkSha2(sha2Header, sha2, callback) {
    if (sha2Header != null && sha2 != null) {
        // todo why bintray doesn't send this header always
        if (sha2Header == null) {
            callback(new Error("checksum is required, but server response doesn't contain X-Checksum-Sha2 header"));
            return false;
        } else if (sha2Header !== sha2) {
            callback(new Error(`checksum mismatch: expected ${ sha2 } but got ${ sha2Header } (X-Checksum-Sha2 header)`));
            return false;
        }
    }
    return true;
}
function calculateDownloadProgress(total, start, transferred, chunk, callback) {
    transferred += chunk.length;
    callback({
        total: total,
        transferred: transferred,
        percent: (transferred / total * 100).toFixed(2),
        bytesPerSecond: Math.round(transferred / ((Date.now() - start) / 1000))
    });
    return transferred;
}
function safeGetHeader(response, headerKey) {
    const value = response.headers[headerKey];
    if (value == null) {
        return null;
    } else if (Array.isArray(value)) {
        // electron API
        return value.length === 0 ? null : value[value.length - 1];
    } else {
        return value;
    }
}
function configurePipes(options, response, destination, callback) {
    if (!checkSha2(safeGetHeader(response, "X-Checksum-Sha2"), options.sha2, callback)) {
        return;
    }
    const streams = [];
    if (options.onProgress != null) {
        const contentLength = safeGetHeader(response, "content-length");
        if (contentLength != null) {
            streams.push(new ProgressCallbackTransform(options.onProgress, parseInt(contentLength, 10)));
        }
    }
    if (options.sha2 != null) {
        streams.push(new DigestTransform(options.sha2));
    }
    const fileOut = (0, (_fsExtraP || _load_fsExtraP()).createWriteStream)(destination);
    streams.push(fileOut);
    let lastStream = response;
    for (const stream of streams) {
        lastStream = lastStream.pipe(stream);
    }
    fileOut.on("finish", () => fileOut.close(callback));
}
//# sourceMappingURL=httpExecutor.js.map